var searchIndex = JSON.parse('{\
"bench":{"doc":"","i":[[5,"create_arrow_array","bench","",null,[[],[["array",8],["arc",3]]]],[5,"n_arrow_arrays","","",null,[[],[["vec",3],["arc",3]]]],[5,"main","","",null,[[]]],[17,"SIZE","","",null,null],[17,"N","","",null,null]],"p":[]},\
"pandas_cmp":{"doc":"","i":[[5,"read_df","pandas_cmp","",null,[[["file",3]],["dataframe",3]]],[5,"bench_groupby","","",null,[[]]],[5,"bench_join","","",null,[[]]],[5,"print_cli","","",null,[[]]],[5,"main","","",null,[[]]]],"p":[]},\
"polars":{"doc":"Polars DataFrames in Rust","i":[[0,"chunked_array","polars","The typed heart of every Series column.",null,null],[3,"ChunkedArray","polars::chunked_array","",null,null],[0,"aggregate","","",null,null],[8,"Agg","polars::chunked_array::aggregate","",null,null],[10,"sum","","",0,[[],["option",4]]],[10,"min","","",0,[[],["option",4]]],[10,"max","","",0,[[],["option",4]]],[0,"apply","polars::chunked_array","",null,null],[8,"Apply","polars::chunked_array::apply","",null,null],[10,"apply","","",1,[[]]],[0,"builder","polars::chunked_array","",null,null],[3,"PrimitiveChunkedBuilder","polars::chunked_array::builder","",null,null],[12,"builder","","",2,null],[3,"Utf8ChunkedBuilder","","",null,null],[12,"builder","","",3,null],[5,"build_primitive_ca_with_opt","","",null,[[],["chunkedarray",3]]],[11,"new","","",2,[[]]],[11,"new_from_iter","","",2,[[],["chunkedarray",3]]],[11,"finish","","",2,[[],["chunkedarray",3]]],[11,"new","","",3,[[]]],[11,"finish","","",3,[[],["utf8chunked",6]]],[0,"comparison","polars::chunked_array","",null,null],[8,"CmpOps","polars::chunked_array::comparison","Compare Series",null,null],[10,"eq","","Check for equality.",4,[[],["booleanchunked",6]]],[10,"neq","","Check for inequality.",4,[[],["booleanchunked",6]]],[10,"gt","","Greater than comparison.",4,[[],["booleanchunked",6]]],[10,"gt_eq","","Greater than or equal comparison.",4,[[],["booleanchunked",6]]],[10,"lt","","Less than comparison.",4,[[],["booleanchunked",6]]],[10,"lt_eq","","Less than or equal comparison",4,[[],["booleanchunked",6]]],[8,"NumComp","","",null,null],[0,"iterator","polars::chunked_array","",null,null],[3,"NumIterSingleChunkNullCheck","polars::chunked_array::iterator","Single chunk with null values",null,null],[3,"NumIterSingleChunk","","Single chunk no null values",null,null],[3,"NumIterManyChunkNullCheck","","Many chunks with null checks",null,null],[3,"NumIterManyChunk","","Many chunks no null checks",null,null],[3,"ChunkStringIter","","",null,null],[3,"ChunkBoolIter","","",null,null],[3,"ChunkNumIter","","Specialized Iterator for ChunkedArray",null,null],[0,"take","polars::chunked_array","",null,null],[3,"NumTakeRandomChunked","polars::chunked_array::take","",null,null],[3,"NumTakeRandomCont","","",null,null],[3,"NumTakeRandomSingleChunk","","",null,null],[3,"Utf8TakeRandom","","",null,null],[3,"Utf8TakeRandomSingleChunk","","",null,null],[3,"BoolTakeRandom","","",null,null],[3,"BoolTakeRandomSingleChunk","","",null,null],[8,"Take","","",null,null],[10,"take","","",5,[[["option",4]],["result",6]]],[8,"TakeIndex","","",null,null],[10,"as_take_iter","","",6,[[],[["box",3],["iterator",8]]]],[10,"take_index_len","","",6,[[]]],[8,"IntoTakeRandom","","",null,null],[16,"Item","","",7,null],[10,"take_rand","","",7,[[],[["box",3],["takerandom",8]]]],[8,"TakeRandom","","",null,null],[16,"Item","","",8,null],[10,"get","","",8,[[],["option",4]]],[10,"get_unchecked","","",8,[[]]],[0,"unique","polars::chunked_array","",null,null],[8,"Unique","polars::chunked_array::unique","",null,null],[10,"unique","","Get unique values of a ChunkedArray",9,[[],["chunkedarray",3]]],[10,"arg_unique","","Get first index of the unique values in a ChunkedArray.",9,[[],["uint32chunked",6]]],[8,"ValueCounts","","",null,null],[10,"value_counts","","",10,[[],[["buildhasherdefault",3],["hashmap",3],["option",4]]]],[8,"Downcast","polars::chunked_array","",null,null],[10,"downcast_chunks","","",11,[[],["vec",3]]],[11,"chunk_id","","",12,[[],["vec",3]]],[11,"chunks","","A reference to the chunks",12,[[],["vec",3]]],[11,"null_count","","Count the null values.",12,[[]]],[11,"is_null","","Get a mask of the null values.",12,[[],["booleanchunked",6]]],[11,"u32","","Downcast",12,[[],[["uint32chunked",6],["result",6]]]],[11,"i32","","Downcast",12,[[],[["result",6],["int32chunked",6]]]],[11,"i64","","Downcast",12,[[],[["result",6],["int64chunked",6]]]],[11,"f32","","Downcast",12,[[],[["result",6],["float32chunked",6]]]],[11,"f64","","Downcast",12,[[],[["result",6],["float64chunked",6]]]],[11,"bool","","Downcast",12,[[],[["result",6],["booleanchunked",6]]]],[11,"utf8","","Downcast",12,[[],[["result",6],["utf8chunked",6]]]],[11,"date32","","Downcast",12,[[],[["result",6],["date32chunked",6]]]],[11,"date64","","Downcast",12,[[],[["date64chunked",6],["result",6]]]],[11,"time64ns","","Downcast",12,[[],[["result",6],["time64nschunked",6]]]],[11,"duration_ns","","Downcast",12,[[],[["result",6],["durationnschunked",6]]]],[11,"limit","","Take a view of top n elements",12,[[],["result",6]]],[11,"filter","","Chunk sizes should match or rhs should have one chunk",12,[[["booleanchunked",6]],["result",6]]],[11,"append_array","","Append arrow array in place.",12,[[["arrayref",6]],["result",6]]],[11,"len","","Combined length of all the chunks.",12,[[]]],[11,"get","","Get a single value. Beware this is slow.",12,[[],["anytype",4]]],[11,"slice","","Slice the array. The chunks are reallocated the underlying…",12,[[],["result",6]]],[11,"head","","Get the head of the ChunkedArray",12,[[["option",4]],["result",6]]],[11,"tail","","Get the tail of the ChunkedArray",12,[[["option",4]],["result",6]]],[11,"append","","Append in place.",12,[[]]],[11,"new_utf8_from_slice","","",12,[[]]],[11,"new_utf8_from_opt_slice","","",12,[[]]],[11,"name","","Name of the ChunkedArray.",12,[[]]],[11,"ref_field","","Get a reference to the field.",12,[[],["field",3]]],[11,"rename","","Rename this ChunkedArray.",12,[[]]],[11,"new_from_chunks","","Create a new ChunkedArray from existing chunks.",12,[[["arrayref",6],["vec",3]]]],[11,"cast","","Cast the underlying data type.",12,[[],[["chunkedarray",3],["result",6]]]],[11,"new_from_slice","","",12,[[]]],[11,"new_from_opt_slice","","",12,[[]]],[11,"cont_slice","","Contiguous slice",12,[[],["result",6]]],[11,"map","","If cont_slice is successful a closure is mapped over the…",12,[[],[["map",3],["result",6]]]],[11,"map_null_checks","","If cont_slice fails we can fallback on an iterator with…",12,[[],[["map",3],["box",3]]]],[11,"fold","","If cont_slice is successful a closure can be applied as…",12,[[],["result",6]]],[11,"fold_null_checks","","If cont_slice fails we can fallback on an iterator with…",12,[[]]],[11,"sort","","",12,[[]]],[11,"sort_in_place","","",12,[[]]],[11,"argsort","","",12,[[],["uint32chunked",6]]],[0,"datatypes","polars","",null,null],[3,"BooleanType","polars::datatypes","",null,null],[3,"Date32Type","","",null,null],[3,"Date64Type","","",null,null],[4,"DateUnit","","Date is either a 32-bit or 64-bit type representing…",null,null],[13,"Day","","Days since the UNIX epoch.",13,null],[13,"Millisecond","","Milliseconds indicating UNIX time elapsed since the epoch…",13,null],[3,"DurationNanosecondType","","",null,null],[3,"Float32Type","","",null,null],[3,"Float64Type","","",null,null],[3,"Int32Type","","",null,null],[3,"Int64Type","","",null,null],[3,"Time64NanosecondType","","",null,null],[4,"TimeUnit","","An absolute length of time in seconds, milliseconds,…",null,null],[13,"Second","","Time in seconds.",14,null],[13,"Millisecond","","Time in milliseconds.",14,null],[13,"Microsecond","","Time in microseconds.",14,null],[13,"Nanosecond","","Time in nanoseconds.",14,null],[3,"UInt32Type","","",null,null],[4,"ArrowDataType","","The set of datatypes that are supported by this…",null,null],[13,"Null","","Null type",15,null],[13,"Boolean","","A boolean datatype representing the values `true` and…",15,null],[13,"Int8","","A signed 8-bit integer.",15,null],[13,"Int16","","A signed 16-bit integer.",15,null],[13,"Int32","","A signed 32-bit integer.",15,null],[13,"Int64","","A signed 64-bit integer.",15,null],[13,"UInt8","","An unsigned 8-bit integer.",15,null],[13,"UInt16","","An unsigned 16-bit integer.",15,null],[13,"UInt32","","An unsigned 32-bit integer.",15,null],[13,"UInt64","","An unsigned 64-bit integer.",15,null],[13,"Float16","","A 16-bit floating point number.",15,null],[13,"Float32","","A 32-bit floating point number.",15,null],[13,"Float64","","A 64-bit floating point number.",15,null],[13,"Timestamp","","A timestamp with an optional timezone.",15,null],[13,"Date32","","A 32-bit date representing the elapsed time since UNIX…",15,null],[13,"Date64","","A 64-bit date representing the elapsed time since UNIX…",15,null],[13,"Time32","","A 32-bit time representing the elapsed time since midnight…",15,null],[13,"Time64","","A 64-bit time representing the elapsed time since midnight…",15,null],[13,"Duration","","Measure of elapsed time in either seconds, milliseconds,…",15,null],[13,"Interval","","A \\\"calendar\\\" interval which models types that don\'t…",15,null],[13,"Binary","","Opaque binary data of variable length.",15,null],[13,"FixedSizeBinary","","Opaque binary data of fixed size. Enum parameter specifies…",15,null],[13,"Utf8","","A variable-length string in Unicode with UTF-8 encoding.",15,null],[13,"List","","A list of some logical data type with variable length.",15,null],[13,"FixedSizeList","","A list of some logical data type with fixed length.",15,null],[13,"Struct","","A nested datatype that contains a number of sub-fields.",15,null],[13,"Union","","A nested datatype that can represent slots of differing…",15,null],[13,"Dictionary","","A dictionary array where each element is a single value…",15,null],[3,"Utf8Type","","",null,null],[4,"AnyType","","",null,null],[13,"Null","","",16,null],[13,"Bool","","",16,null],[13,"I32","","",16,null],[13,"I64","","",16,null],[13,"F32","","",16,null],[13,"F64","","",16,null],[13,"U32","","",16,null],[13,"Str","","",16,null],[13,"Date64","","",16,null],[13,"Date32","","",16,null],[13,"Time64","","",16,null],[13,"Duration","","",16,null],[6,"BooleanChunked","","",null,null],[6,"UInt32Chunked","","",null,null],[6,"Int32Chunked","","",null,null],[6,"Int64Chunked","","",null,null],[6,"Float32Chunked","","",null,null],[6,"Float64Chunked","","",null,null],[6,"Utf8Chunked","","",null,null],[6,"Date32Chunked","","",null,null],[6,"Date64Chunked","","",null,null],[6,"DurationNsChunked","","",null,null],[6,"Time64NsChunked","","",null,null],[8,"PolarsDataType","","",null,null],[10,"get_data_type","","",17,[[],["arrowdatatype",4]]],[8,"PolarsNumericType","","",null,null],[8,"PolarsIntegerType","","",null,null],[8,"ToStr","","",null,null],[10,"to_str","","",18,[[]]],[0,"error","polars","",null,null],[4,"PolarsError","polars::error","",null,null],[13,"ArrowError","","",19,null],[13,"InvalidOperation","","",19,null],[13,"ChunkMisMatch","","",19,null],[13,"DataTypeMisMatch","","",19,null],[13,"NotFound","","",19,null],[13,"LengthMismatch","","",19,null],[13,"Other","","",19,null],[13,"NoSelection","","",19,null],[13,"OutOfBounds","","",19,null],[13,"NoSlice","","",19,null],[13,"NoData","","",19,null],[6,"Result","","",null,null],[0,"frame","polars","DataFrame module",null,null],[3,"DataFrame","polars::frame","",null,null],[0,"csv","","",null,null],[3,"ReaderBuilder","polars::frame::csv","CSV file reader builder",null,null],[3,"WriterBuilder","","A CSV writer builder",null,null],[3,"CsvWriter","","Write a DataFrame to csv.",null,null],[3,"CsvReader","","Creates a DataFrame after reading a csv.",null,null],[11,"new","","Write a DataFrame to a csv file.",20,[[]]],[11,"has_headers","","Set whether to write headers",20,[[]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",20,[[]]],[11,"with_date_format","","Set the CSV file\'s date format",20,[[["string",3]]]],[11,"with_time_format","","Set the CSV file\'s time format",20,[[["string",3]]]],[11,"with_timestamp_format","","Set the CSV file\'s timestamp formatch array in",20,[[["string",3]]]],[11,"finish","","",20,[[["dataframe",3]],["result",6]]],[11,"new","","Create a new DataFrame by reading a csv file.",21,[[]]],[11,"set_rechunk","","Rechunk to one contiguous chunk of memory after all data…",21,[[]]],[11,"with_schema","","Set the CSV file\'s schema",21,[[["arc",3],["schema",3]]]],[11,"has_header","","Set whether the CSV file has headers",21,[[]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",21,[[]]],[11,"infer_schema","","Set the CSV reader to infer the schema of the file",21,[[["option",4]]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)",21,[[]]],[11,"with_projection","","Set the reader\'s column projection",21,[[["vec",3]]]],[11,"finish","","Read the file and create the DataFrame.",21,[[],[["result",6],["dataframe",3]]]],[0,"group_by","polars::frame","",null,null],[3,"GroupBy","polars::frame::group_by","",null,null],[12,"by","","",22,null],[11,"groupby","polars::frame","Group DataFrame using a Series column.",23,[[],[["groupby",3],["result",6]]]],[11,"select","polars::frame::group_by","",22,[[]]],[11,"mean","","Aggregate grouped series and compute the mean per group.",22,[[],[["result",6],["dataframe",3]]]],[11,"sum","","Aggregate grouped series and compute the sum per group.",22,[[],[["result",6],["dataframe",3]]]],[11,"min","","Aggregate grouped series and compute the minimal value per…",22,[[],[["result",6],["dataframe",3]]]],[11,"max","","Aggregate grouped series and compute the maximum value per…",22,[[],[["result",6],["dataframe",3]]]],[11,"count","","Aggregate grouped series and compute the number of values…",22,[[],[["result",6],["dataframe",3]]]],[0,"hash_join","polars::frame","",null,null],[8,"HashJoin","polars::frame::hash_join","",null,null],[10,"hash_join_inner","","",24,[[["chunkedarray",3]],["vec",3]]],[10,"hash_join_left","","",24,[[["chunkedarray",3]],["vec",3]]],[10,"hash_join_outer","","",24,[[["chunkedarray",3]],[["fnvbuildhasher",6],["hashset",3]]]],[11,"inner_join","polars::frame","Perform an inner join on two DataFrames.",23,[[["dataframe",3]],[["result",6],["dataframe",3]]]],[11,"left_join","","Perform a left join on two DataFrames # Example",23,[[["dataframe",3]],[["result",6],["dataframe",3]]]],[11,"outer_join","","Perform an outer join on two DataFrames # Example",23,[[["dataframe",3]],[["result",6],["dataframe",3]]]],[0,"select","","",null,null],[8,"Selection","polars::frame::select","",null,null],[10,"to_selection_vec","","",25,[[],["vec",3]]],[11,"new","polars::frame","Create a DataFrame from a Vector of Series.",23,[[["vec",3],["series",4]],["result",6]]],[11,"schema","","Get a reference to the DataFrame schema.",23,[[],["arc",3]]],[11,"columns","","Get a reference to the DataFrame columns.",23,[[],["vec",3]]],[11,"n_chunks","","The number of chunks per column",23,[[],["result",6]]],[11,"fields","","Get a reference the schema fields of the DataFrame.",23,[[],["vec",3]]],[11,"shape","","Get (width x height)",23,[[]]],[11,"width","","Get width of DataFrame",23,[[]]],[11,"height","","Get height of DataFrame",23,[[]]],[11,"hstack","","Add series column to DataFrame",23,[[],["result",6]]],[11,"drop","","Remove column by name",23,[[],[["result",6],["series",4]]]],[11,"drop_pure","","Drop a column by name. This is a pure method and will…",23,[[],[["result",6],["dataframe",3]]]],[11,"get","","Get a row in the dataframe. Beware this is slow.",23,[[],[["option",4],["vec",3]]]],[11,"select_idx","","Select a series by index.",23,[[],[["option",4],["series",4]]]],[11,"f_select_idx","","Force select.",23,[[],["series",4]]],[11,"select_idx_mut","","Select a mutable series by index.",23,[[],[["option",4],["series",4]]]],[11,"f_select_idx_mut","","Force select.",23,[[],["series",4]]],[11,"find_idx_by_name","","Get column index of a series by name.",23,[[],["option",4]]],[11,"column","","Select a single column by name.",23,[[],[["option",4],["series",4]]]],[11,"f_column","","Force select a single column.",23,[[],["series",4]]],[11,"select","","Select column(s) from this DataFrame.",23,[[],[["result",6],["dataframe",3]]]],[11,"select_mut","","Select a mutable series by name.",23,[[],[["option",4],["series",4]]]],[11,"f_select_mut","","Force select.",23,[[],["series",4]]],[11,"filter","","Take DataFrame rows by a boolean mask.",23,[[["booleanchunked",6]],["result",6]]],[11,"f_filter","","Force filter",23,[[["booleanchunked",6]]]],[11,"take_iter","","Take DataFrame value by indexes from an iterator.",23,[[["option",4]],["result",6]]],[11,"take","","Take DataFrame rows by index values.",23,[[],["result",6]]],[11,"f_take","","Force take",23,[[]]],[11,"rename","","Rename a column in the DataFrame",23,[[],["result",6]]],[11,"sort","","Sort DataFrame in place by a column.",23,[[],["result",6]]],[11,"replace","","Replace a column with a series.",23,[[["series",4]],["result",6]]],[11,"slice","","Slice the DataFrame along the rows.",23,[[],["result",6]]],[11,"head","","Get the head of the DataFrame",23,[[["option",4]],["result",6]]],[11,"tail","","Get the tail of the DataFrame",23,[[["option",4]],["result",6]]],[11,"as_record_batches","","Transform the underlying chunks in the DataFrame to Arrow…",23,[[],[["result",6],["vec",3]]]],[0,"prelude","polars","",null,null],[8,"ArrowPrimitiveType","polars::prelude","Trait indicating a primitive fixed-width type (bool, ints…",null,null],[16,"Native","","Corresponding Rust native type for the primitive type.",26,null],[10,"get_data_type","","Returns the corresponding Arrow data type of this…",26,[[],["datatype",4]]],[10,"get_bit_width","","Returns the bit width of this primitive type.",26,[[]]],[10,"default_value","","Returns a default value of this primitive type.",26,[[]]],[3,"Field","","Contains the meta-data for a single relative type.",null,null],[8,"ChunkOps","","",null,null],[10,"rechunk","","Aggregate to chunk id. A chunk id is a vector of the chunk…",27,[[["option",4]],["result",6]]],[10,"optional_rechunk","","Only rechunk if lhs and rhs don\'t match",27,[[["chunkedarray",3]],[["option",4],["result",6]]]],[8,"LhsNumOps","","",null,null],[16,"Output","","",28,null],[10,"add","","",28,[[]]],[10,"sub","","",28,[[]]],[10,"div","","",28,[[]]],[10,"mul","","",28,[[]]],[0,"series","polars","Series The columnar data type for a DataFrame. The Series…",null,null],[4,"Series","polars::series","",null,null],[13,"UInt32","","",29,null],[13,"Int32","","",29,null],[13,"Int64","","",29,null],[13,"Float32","","",29,null],[13,"Float64","","",29,null],[13,"Utf8","","",29,null],[13,"Bool","","",29,null],[13,"Date32","","",29,null],[13,"Date64","","",29,null],[13,"Time64Ns","","",29,null],[13,"DurationNs","","",29,null],[11,"sum","","Returns `None` if the array is empty or only contains null…",29,[[],["option",4]]],[11,"min","","Returns the minimum value in the array, according to the…",29,[[],["option",4]]],[11,"max","","Returns the maximum value in the array, according to the…",29,[[],["option",4]]],[11,"mean","","",29,[[],["option",4]]],[11,"subtract","","",29,[[["series",4]],["result",6]]],[11,"add_to","","",29,[[["series",4]],["result",6]]],[11,"multiply","","",29,[[["series",4]],["result",6]]],[8,"NamedFrom","","",null,null],[10,"new","","Initialize by name and values.",30,[[]]],[11,"chunk_lengths","","Get the lengths of the underlying chunks",29,[[],["vec",3]]],[11,"name","","Name of series.",29,[[]]],[11,"rename","","Rename series.",29,[[]]],[11,"field","","Get field (used in schema)",29,[[],["field",3]]],[11,"dtype","","Get datatype of series.",29,[[],["arrowdatatype",4]]],[11,"chunks","","Underlying chunks.",29,[[],["vec",3]]],[11,"n_chunks","","No. of chunks",29,[[]]],[11,"i32","","Unpack to ChunkedArray `# use polars::prelude::*; let s:…",29,[[],[["int32chunked",6],["result",6]]]],[11,"i64","","Unpack to ChunkedArray",29,[[],[["result",6],["int64chunked",6]]]],[11,"f32","","Unpack to ChunkedArray",29,[[],[["float32chunked",6],["result",6]]]],[11,"f64","","Unpack to ChunkedArray",29,[[],[["result",6],["float64chunked",6]]]],[11,"u32","","Unpack to ChunkedArray",29,[[],[["result",6],["uint32chunked",6]]]],[11,"bool","","Unpack to ChunkedArray",29,[[],[["booleanchunked",6],["result",6]]]],[11,"utf8","","Unpack to ChunkedArray",29,[[],[["result",6],["utf8chunked",6]]]],[11,"date32","","Unpack to ChunkedArray",29,[[],[["date32chunked",6],["result",6]]]],[11,"date64","","Unpack to ChunkedArray",29,[[],[["result",6],["date64chunked",6]]]],[11,"time64ns","","Unpack to ChunkedArray",29,[[],[["result",6],["time64nschunked",6]]]],[11,"duration_ns","","Unpack to ChunkedArray",29,[[],[["result",6],["durationnschunked",6]]]],[11,"append_array","","",29,[[["arrayref",6]],["result",6]]],[11,"limit","","Take `num_elements` from the top as a zero copy view.",29,[[],["result",6]]],[11,"slice","","Get a zero copy view of the data.",29,[[],["result",6]]],[11,"append","","Append a Series of the same type in place.",29,[[],["result",6]]],[11,"filter","","Filter by boolean mask. This operation clones data.",29,[[["booleanchunked",6],["asref",8]],["result",6]]],[11,"take_iter","","Take by index from an iterator. This operation clones the…",29,[[["option",4]],["result",6]]],[11,"take","","Take by index. This operation is clone.",29,[[],["result",6]]],[11,"len","","Get length of series.",29,[[]]],[11,"rechunk","","Aggregate all chunks to a contiguous array of memory.",29,[[["option",4]],["result",6]]],[11,"head","","Get the head of the Series.",29,[[["option",4]],["result",6]]],[11,"tail","","Get the tail of the Series.",29,[[["option",4]],["result",6]]],[11,"cast","","Cast to an some primitive type.",29,[[],["result",6]]],[11,"get","","Get a single value by index. Don\'t use this operation for…",29,[[],["anytype",4]]],[11,"sort","","Sort in place.",29,[[]]],[11,"argsort","","Retrieve the indexes needed for a sort.",29,[[],["uint32chunked",6]]],[11,"null_count","","Count the null values.",29,[[]]],[11,"unique","","Get unique values in the Series.",29,[[]]],[11,"arg_unique","","Get first indexes of unique values.",29,[[],["uint32chunked",6]]],[11,"is_null","","Get a mask of the null values.",29,[[],["booleanchunked",6]]],[0,"testing","polars","",null,null],[11,"series_equal","polars::series","",29,[[["series",4]]]],[11,"frame_equal","polars::frame","",23,[[["dataframe",3]]]],[14,"exec_concurrent","polars","",null,null],[14,"apply_operand_on_chunkedarray_by_iter","","",null,null],[14,"apply_method_all_series","","",null,null],[14,"apply_method_arrowprimitive_series","","",null,null],[11,"from","polars::chunked_array","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","polars::chunked_array::builder","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","polars::chunked_array::iterator","",31,[[]]],[11,"into","","",31,[[]]],[11,"into_iter","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"to_bytes","","",31,[[],["utf8charsplitter",3]]],[11,"to_units","","",31,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",31,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",31,[[],["utf16charmerger",3]]],[11,"vzip","","",31,[[]]],[11,"par_bridge","","",31,[[],["iterbridge",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"into_iter","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"to_bytes","","",32,[[],["utf8charsplitter",3]]],[11,"to_units","","",32,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",32,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",32,[[],["utf16charmerger",3]]],[11,"vzip","","",32,[[]]],[11,"par_bridge","","",32,[[],["iterbridge",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"into_iter","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"to_bytes","","",33,[[],["utf8charsplitter",3]]],[11,"to_units","","",33,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",33,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",33,[[],["utf16charmerger",3]]],[11,"vzip","","",33,[[]]],[11,"par_bridge","","",33,[[],["iterbridge",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"into_iter","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"to_bytes","","",34,[[],["utf8charsplitter",3]]],[11,"to_units","","",34,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",34,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",34,[[],["utf16charmerger",3]]],[11,"vzip","","",34,[[]]],[11,"par_bridge","","",34,[[],["iterbridge",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"into_iter","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"to_bytes","","",35,[[],["utf8charsplitter",3]]],[11,"to_units","","",35,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",35,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",35,[[],["utf16charmerger",3]]],[11,"vzip","","",35,[[]]],[11,"par_bridge","","",35,[[],["iterbridge",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"into_iter","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"to_bytes","","",36,[[],["utf8charsplitter",3]]],[11,"to_units","","",36,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",36,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",36,[[],["utf16charmerger",3]]],[11,"vzip","","",36,[[]]],[11,"par_bridge","","",36,[[],["iterbridge",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"into_iter","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"to_bytes","","",37,[[],["utf8charsplitter",3]]],[11,"to_units","","",37,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",37,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",37,[[],["utf16charmerger",3]]],[11,"vzip","","",37,[[]]],[11,"par_bridge","","",37,[[],["iterbridge",3]]],[11,"from","polars::chunked_array::take","",38,[[]]],[11,"into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"get_data_type","polars::datatypes","",45,[[],["datatype",4]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"get_data_type","","",46,[[],["datatype",4]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"get_data_type","","",47,[[],["datatype",4]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"equivalent","","",13,[[]]],[11,"vzip","","",13,[[]]],[11,"get_data_type","","",48,[[],["datatype",4]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"get_data_type","","",49,[[],["datatype",4]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"vzip","","",49,[[]]],[11,"get_data_type","","",50,[[],["datatype",4]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"get_data_type","","",51,[[],["datatype",4]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"get_data_type","","",52,[[],["datatype",4]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"vzip","","",52,[[]]],[11,"get_data_type","","",53,[[],["datatype",4]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"equivalent","","",14,[[]]],[11,"vzip","","",14,[[]]],[11,"get_data_type","","",54,[[],["datatype",4]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"equivalent","","",15,[[]]],[11,"vzip","","",15,[[]]],[11,"get_data_type","","",55,[[],["datatype",4]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_string","","",16,[[],["string",3]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","polars::error","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","polars::frame","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"to_string","","",23,[[],["string",3]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","polars::frame::csv","",56,[[]]],[11,"into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"vzip","","",56,[[]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"vzip","","",57,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","polars::frame::group_by","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","polars::prelude","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"to_string","","",58,[[],["string",3]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"equivalent","","",58,[[]]],[11,"vzip","","",58,[[]]],[11,"from","polars::series","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"default","polars::frame::csv","",57,[[],["writerbuilder",3]]],[11,"default","","",56,[[],["readerbuilder",3]]],[11,"fmt","polars::prelude","",58,[[["formatter",3]],[["result",4],["error",3]]]],[11,"hash","polars::datatypes","",13,[[]]],[11,"hash","","",14,[[]]],[11,"hash","polars::prelude","",58,[[]]],[11,"hash","polars::datatypes","",15,[[]]],[11,"fmt","","",15,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","polars::prelude","",58,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","polars::datatypes","",14,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",13,[[["formatter",3]],[["result",4],["error",3]]]],[11,"partial_cmp","","",13,[[["dateunit",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",14,[[["timeunit",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","polars::prelude","",58,[[["field",3]],[["ordering",4],["option",4]]]],[11,"lt","","",58,[[["field",3]]]],[11,"le","","",58,[[["field",3]]]],[11,"gt","","",58,[[["field",3]]]],[11,"ge","","",58,[[["field",3]]]],[11,"partial_cmp","polars::datatypes","",15,[[["datatype",4]],[["ordering",4],["option",4]]]],[11,"lt","","",15,[[["datatype",4]]]],[11,"le","","",15,[[["datatype",4]]]],[11,"gt","","",15,[[["datatype",4]]]],[11,"ge","","",15,[[["datatype",4]]]],[11,"deserialize","","",15,[[],[["datatype",4],["result",4]]]],[11,"deserialize","","",14,[[],[["result",4],["timeunit",4]]]],[11,"deserialize","","",13,[[],[["result",4],["dateunit",4]]]],[11,"deserialize","polars::prelude","",58,[[],[["result",4],["field",3]]]],[11,"eq","","",58,[[["field",3]]]],[11,"ne","","",58,[[["field",3]]]],[11,"eq","polars::datatypes","",13,[[["dateunit",4]]]],[11,"eq","","",14,[[["timeunit",4]]]],[11,"eq","","",15,[[["datatype",4]]]],[11,"ne","","",15,[[["datatype",4]]]],[11,"cmp","","",14,[[["timeunit",4]],["ordering",4]]],[11,"cmp","polars::prelude","",58,[[["field",3]],["ordering",4]]],[11,"cmp","polars::datatypes","",15,[[["datatype",4]],["ordering",4]]],[11,"cmp","","",13,[[["dateunit",4]],["ordering",4]]],[11,"serialize","","",13,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","polars::prelude","",58,[[],["result",4]]],[11,"from","","",58,[[["field",3]],["field",3]]],[11,"get_data_type","polars::datatypes","",47,[[],["datatype",4]]],[11,"get_bit_width","","",47,[[]]],[11,"default_value","","",47,[[]]],[11,"get_data_type","","",48,[[],["datatype",4]]],[11,"get_bit_width","","",48,[[]]],[11,"default_value","","",48,[[]]],[11,"get_data_type","","",52,[[],["datatype",4]]],[11,"get_bit_width","","",52,[[]]],[11,"default_value","","",52,[[]]],[11,"get_data_type","","",49,[[],["datatype",4]]],[11,"get_bit_width","","",49,[[]]],[11,"default_value","","",49,[[]]],[11,"get_data_type","","",50,[[],["datatype",4]]],[11,"get_bit_width","","",50,[[]]],[11,"default_value","","",50,[[]]],[11,"get_data_type","","",53,[[],["datatype",4]]],[11,"get_bit_width","","",53,[[]]],[11,"default_value","","",53,[[]]],[11,"get_data_type","","",54,[[],["datatype",4]]],[11,"get_bit_width","","",54,[[]]],[11,"default_value","","",54,[[]]],[11,"get_data_type","","",51,[[],["datatype",4]]],[11,"get_bit_width","","",51,[[]]],[11,"default_value","","",51,[[]]],[11,"get_data_type","","",46,[[],["datatype",4]]],[11,"get_bit_width","","",46,[[]]],[11,"default_value","","",46,[[]]],[11,"get_data_type","","",45,[[],["datatype",4]]],[11,"get_bit_width","","",45,[[]]],[11,"default_value","","",45,[[]]],[11,"clone","polars::prelude","",58,[[],["field",3]]],[11,"clone","polars::datatypes","",14,[[],["timeunit",4]]],[11,"clone","","",15,[[],["datatype",4]]],[11,"clone","","",13,[[],["dateunit",4]]],[11,"sum","polars::chunked_array","Returns `None` if the array is empty or only contains null…",12,[[],["option",4]]],[11,"min","","Returns the minimum value in the array, according to the…",12,[[],["option",4]]],[11,"max","","Returns the maximum value in the array, according to the…",12,[[],["option",4]]],[11,"sum","polars","Returns `None` if the array is empty or only contains null…",59,[[],["option",4]]],[11,"min","","",59,[[],["option",4]]],[11,"max","","",59,[[],["option",4]]],[11,"apply","polars::chunked_array","Chooses the fastest path for closure application. Null…",12,[[]]],[11,"apply","polars","",59,[[]]],[11,"apply","","",60,[[]]],[11,"rechunk","polars::chunked_array","",12,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",12,[[["chunkedarray",3]],[["option",4],["result",6]]]],[11,"rechunk","polars","",59,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",59,[[["chunkedarray",3]],[["option",4],["result",6]]]],[11,"rechunk","","",60,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",60,[[["chunkedarray",3]],[["option",4],["result",6]]]],[11,"eq","polars::chunked_array","",12,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"neq","","",12,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"gt","","",12,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"gt_eq","","",12,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"lt","","",12,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"lt_eq","","",12,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"eq","polars","",60,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"neq","","",60,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"gt","","",60,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"gt_eq","","",60,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"lt","","",60,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"lt_eq","","",60,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"eq","polars::chunked_array","",12,[[],["booleanchunked",6]]],[11,"neq","","",12,[[],["booleanchunked",6]]],[11,"gt","","",12,[[],["booleanchunked",6]]],[11,"gt_eq","","",12,[[],["booleanchunked",6]]],[11,"lt","","",12,[[],["booleanchunked",6]]],[11,"lt_eq","","",12,[[],["booleanchunked",6]]],[11,"eq","polars","",60,[[],["booleanchunked",6]]],[11,"neq","","",60,[[],["booleanchunked",6]]],[11,"gt","","",60,[[],["booleanchunked",6]]],[11,"gt_eq","","",60,[[],["booleanchunked",6]]],[11,"lt","","",60,[[],["booleanchunked",6]]],[11,"lt_eq","","",60,[[],["booleanchunked",6]]],[11,"eq","polars::series","Create a boolean mask by checking for equality.",29,[[["series",4]],["booleanchunked",6]]],[11,"neq","","Create a boolean mask by checking for inequality.",29,[[["series",4]],["booleanchunked",6]]],[11,"gt","","Create a boolean mask by checking if lhs > rhs.",29,[[["series",4]],["booleanchunked",6]]],[11,"gt_eq","","Create a boolean mask by checking if lhs >= rhs.",29,[[["series",4]],["booleanchunked",6]]],[11,"lt","","Create a boolean mask by checking if lhs < rhs.",29,[[["series",4]],["booleanchunked",6]]],[11,"lt_eq","","Create a boolean mask by checking if lhs <= rhs.",29,[[["series",4]],["booleanchunked",6]]],[11,"eq","","",29,[[],["booleanchunked",6]]],[11,"neq","","",29,[[],["booleanchunked",6]]],[11,"gt","","",29,[[],["booleanchunked",6]]],[11,"gt_eq","","",29,[[],["booleanchunked",6]]],[11,"lt","","",29,[[],["booleanchunked",6]]],[11,"lt_eq","","",29,[[],["booleanchunked",6]]],[11,"eq","","",29,[[],["booleanchunked",6]]],[11,"neq","","",29,[[],["booleanchunked",6]]],[11,"gt","","",29,[[],["booleanchunked",6]]],[11,"gt_eq","","",29,[[],["booleanchunked",6]]],[11,"lt","","",29,[[],["booleanchunked",6]]],[11,"lt_eq","","",29,[[],["booleanchunked",6]]],[11,"take","polars::chunked_array","",12,[[["option",4]],["result",6]]],[11,"take","polars","",59,[[["option",4]],["result",6]]],[11,"take","","",60,[[["option",4]],["result",6]]],[11,"as_take_iter","","",61,[[],[["box",3],["iterator",8]]]],[11,"take_index_len","","",61,[[]]],[11,"get","polars::chunked_array::take","",38,[[],["option",4]]],[11,"get_unchecked","","",38,[[]]],[11,"get","","",39,[[],["option",4]]],[11,"get_unchecked","","",39,[[]]],[11,"get","","",40,[[],["option",4]]],[11,"get_unchecked","","",40,[[]]],[11,"get","","",41,[[],["option",4]]],[11,"get_unchecked","","",41,[[]]],[11,"get","","",42,[[],["option",4]]],[11,"get_unchecked","","",42,[[]]],[11,"get","","",43,[[],["option",4]]],[11,"get_unchecked","","",43,[[]]],[11,"get","","",44,[[],["option",4]]],[11,"get_unchecked","","",44,[[]]],[11,"unique","polars::chunked_array","",12,[[]]],[11,"arg_unique","","",12,[[],["uint32chunked",6]]],[11,"unique","polars","",60,[[]]],[11,"arg_unique","","",60,[[],["uint32chunked",6]]],[11,"unique","","",59,[[]]],[11,"arg_unique","","",59,[[],["uint32chunked",6]]],[11,"value_counts","polars::chunked_array","",12,[[],[["buildhasherdefault",3],["hashmap",3],["option",4]]]],[11,"downcast_chunks","","",12,[[],[["vec",3],["primitivearray",3]]]],[11,"downcast_chunks","polars","",60,[[],[["stringarray",3],["vec",3]]]],[11,"downcast_chunks","","",59,[[],[["vec",3],["booleanarray",6]]]],[11,"get_data_type","polars::datatypes","",55,[[],["arrowdatatype",4]]],[11,"to_str","","",15,[[]]],[11,"hash_join_inner","polars::chunked_array","",12,[[["chunkedarray",3]],["vec",3]]],[11,"hash_join_left","","",12,[[["chunkedarray",3]],["vec",3]]],[11,"hash_join_outer","","",12,[[["chunkedarray",3]],[["fnvbuildhasher",6],["hashset",3]]]],[11,"hash_join_inner","polars","",59,[[["booleanchunked",6]],["vec",3]]],[11,"hash_join_left","","",59,[[["booleanchunked",6]],["vec",3]]],[11,"hash_join_outer","","",59,[[["booleanchunked",6]],[["fnvbuildhasher",6],["hashset",3]]]],[11,"hash_join_inner","","",60,[[["utf8chunked",6]],["vec",3]]],[11,"hash_join_left","","",60,[[["utf8chunked",6]],["vec",3]]],[11,"hash_join_outer","","",60,[[["utf8chunked",6]],[["fnvbuildhasher",6],["hashset",3]]]],[11,"new","polars::series","",29,[[]]],[11,"new","","",29,[[["vec",3]]]],[11,"new","","",29,[[]]],[11,"new","","",29,[[["vec",3]]]],[11,"new","","",29,[[]]],[11,"new","","",29,[[["vec",3]]]],[11,"new","","",29,[[]]],[11,"new","","",29,[[["vec",3]]]],[11,"new","","",29,[[]]],[11,"new","","",29,[[["vec",3]]]],[11,"new","","",29,[[]]],[11,"new","","",29,[[["vec",3]]]],[11,"new","","",29,[[]]],[11,"new","","",29,[[["vec",3]]]],[11,"new","","",29,[[]]],[11,"new","","",29,[[["vec",3]]]],[11,"new","","",29,[[]]],[11,"new","","",29,[[["vec",3]]]],[11,"new","","",29,[[["vec",3]]]],[11,"new","","",29,[[]]],[11,"new","","",29,[[]]],[11,"new","","",29,[[["vec",3]]]],[11,"new","","",29,[[]]],[11,"new","","",29,[[["vec",3]]]],[11,"new","","",29,[[]]],[11,"new","","",29,[[["vec",3]]]],[11,"new","","",29,[[]]],[11,"new","","",29,[[["vec",3]]]],[11,"new","","",29,[[]]],[11,"new","","",29,[[["vec",3]]]],[11,"new","","",29,[[]]],[11,"new","","",29,[[["vec",3]]]],[11,"as_mut","","",29,[[],["chunkedarray",3]]],[11,"as_mut","","",29,[[],["chunkedarray",3]]],[11,"as_mut","","",29,[[],["chunkedarray",3]]],[11,"as_mut","","",29,[[],["chunkedarray",3]]],[11,"as_mut","","",29,[[],["chunkedarray",3]]],[11,"as_mut","","",29,[[],["chunkedarray",3]]],[11,"as_mut","","",29,[[],["chunkedarray",3]]],[11,"as_ref","polars::chunked_array","",12,[[],["chunkedarray",3]]],[11,"as_ref","polars::series","",29,[[],["chunkedarray",3]]],[11,"as_ref","","",29,[[],["chunkedarray",3]]],[11,"as_ref","","",29,[[],["chunkedarray",3]]],[11,"as_ref","","",29,[[],["chunkedarray",3]]],[11,"as_ref","","",29,[[],["chunkedarray",3]]],[11,"as_ref","","",29,[[],["chunkedarray",3]]],[11,"as_ref","","",29,[[],["chunkedarray",3]]],[11,"from","polars::error","",19,[[["arrowerror",4]]]],[11,"next","polars::chunked_array::iterator","",31,[[],["option",4]]],[11,"size_hint","","",31,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"next","","",33,[[],["option",4]]],[11,"size_hint","","",33,[[]]],[11,"next","","",34,[[],["option",4]]],[11,"size_hint","","",34,[[]]],[11,"next","","",35,[[],["option",4]]],[11,"size_hint","","",35,[[]]],[11,"next","","",36,[[],["option",4]]],[11,"size_hint","","",36,[[]]],[11,"next","","",37,[[],["option",4]]],[11,"size_hint","","",37,[[]]],[11,"clone","polars::chunked_array","",12,[[]]],[11,"clone","polars::frame::group_by","",22,[[],["groupby",3]]],[11,"clone","polars::frame","",23,[[],["dataframe",3]]],[11,"clone","polars::series","",29,[[],["series",4]]],[11,"eq","polars::datatypes","",16,[[["anytype",4]]]],[11,"ne","","",16,[[["anytype",4]]]],[11,"deref","polars::chunked_array::builder","",2,[[]]],[11,"deref","","",3,[[]]],[11,"deref","polars::datatypes","",55,[[]]],[11,"deref_mut","polars::chunked_array::builder","",2,[[]]],[11,"deref_mut","","",3,[[]]],[11,"deref_mut","polars::datatypes","",55,[[]]],[11,"fmt","polars::chunked_array","",12,[[["formatter",3]],["result",6]]],[11,"fmt","polars::datatypes","",16,[[["formatter",3]],["result",6]]],[11,"fmt","polars::error","",19,[[["formatter",3]],["result",6]]],[11,"fmt","polars::series","",29,[[["formatter",3]],["result",6]]],[11,"fmt","polars::frame","",23,[[["formatter",3]],["result",6]]],[11,"fmt","polars::frame::group_by","",22,[[["formatter",3]],["result",6]]],[11,"fmt","polars::error","",19,[[["formatter",3]],["result",6]]],[11,"fmt","polars::series","",29,[[["formatter",3]],["result",6]]],[11,"fmt","polars::frame","",23,[[["formatter",3]],["result",6]]],[11,"fmt","polars::datatypes","",16,[[["formatter",3]],["result",6]]],[11,"div","polars::chunked_array","",12,[[]]],[11,"div","polars::series","",29,[[]]],[11,"div","","",29,[[]]],[11,"sub","polars::chunked_array","",12,[[]]],[11,"sub","polars::series","",29,[[]]],[11,"sub","","",29,[[]]],[11,"add","polars::chunked_array","",12,[[]]],[11,"add","polars::series","",29,[[]]],[11,"add","","",29,[[]]],[11,"mul","polars::chunked_array","",12,[[]]],[11,"mul","polars::series","",29,[[]]],[11,"mul","","",29,[[]]],[11,"from_iter","polars::chunked_array","",12,[[["intoiterator",8]]]],[11,"from_iter","polars","",59,[[["intoiterator",8]]]],[11,"from_iter","","",60,[[["intoiterator",8]]]],[11,"from_iter","","",60,[[["intoiterator",8]]]],[11,"from_iter","polars::series","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"from_iter","","",29,[[["intoiterator",8]]]],[11,"source","polars::error","",19,[[],[["error",8],["option",4]]]],[11,"new_utf8_from_slice","polars::datatypes","",60,[[]]],[11,"new_utf8_from_opt_slice","","",60,[[]]],[11,"to_json","","Generate a JSON representation of the data type",15,[[],["value",4]]],[11,"new","polars::frame::csv","Create a new builder for configuring CSV parsing options.",56,[[],["readerbuilder",3]]],[11,"with_schema","","Set the CSV file\'s schema",56,[[["arc",3],["schema",3]],["readerbuilder",3]]],[11,"has_header","","Set whether the CSV file has headers",56,[[],["readerbuilder",3]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",56,[[],["readerbuilder",3]]],[11,"infer_schema","","Set the CSV reader to infer the schema of the file",56,[[["option",4]],["readerbuilder",3]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)",56,[[],["readerbuilder",3]]],[11,"with_projection","","Set the reader\'s column projection",56,[[["vec",3]],["readerbuilder",3]]],[11,"build","","Create a new `Reader` from the `ReaderBuilder`",56,[[],[["reader",3],["arrowerror",4],["result",4]]]],[11,"new","","Create a new builder for configuring CSV writing options.",57,[[],["writerbuilder",3]]],[11,"has_headers","","Set whether to write headers",57,[[],["writerbuilder",3]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",57,[[],["writerbuilder",3]]],[11,"with_date_format","","Set the CSV file\'s date format",57,[[["string",3]],["writerbuilder",3]]],[11,"with_time_format","","Set the CSV file\'s time format",57,[[["string",3]],["writerbuilder",3]]],[11,"with_timestamp_format","","Set the CSV file\'s timestamp format",57,[[["string",3]],["writerbuilder",3]]],[11,"build","","Create a new `Writer`",57,[[],["writer",3]]],[11,"new","polars::prelude","Creates a new field",58,[[["datatype",4]],["field",3]]],[11,"new_dict","","Creates a new field",58,[[["datatype",4]],["field",3]]],[11,"name","","Returns an immutable reference to the `Field`\'s name",58,[[],["string",3]]],[11,"data_type","","Returns an immutable reference to the `Field`\'s  data-type",58,[[],["datatype",4]]],[11,"is_nullable","","Indicates whether this `Field` supports null values",58,[[]]],[11,"from","","Parse a `Field` definition from a JSON representation",58,[[["value",4]],[["arrowerror",4],["result",4],["field",3]]]],[11,"to_json","","Generate a JSON representation of the `Field`",58,[[],["value",4]]],[11,"to_string","","Converts to a `String` representation of the `Field`",58,[[],["string",3]]],[11,"try_merge","","Merge field into self if it is compatible. Struct will be…",58,[[["field",3]],[["result",4],["arrowerror",4]]]]],"p":[[8,"Agg"],[8,"Apply"],[3,"PrimitiveChunkedBuilder"],[3,"Utf8ChunkedBuilder"],[8,"CmpOps"],[8,"Take"],[8,"TakeIndex"],[8,"IntoTakeRandom"],[8,"TakeRandom"],[8,"Unique"],[8,"ValueCounts"],[8,"Downcast"],[3,"ChunkedArray"],[4,"DateUnit"],[4,"TimeUnit"],[4,"ArrowDataType"],[4,"AnyType"],[8,"PolarsDataType"],[8,"ToStr"],[4,"PolarsError"],[3,"CsvWriter"],[3,"CsvReader"],[3,"GroupBy"],[3,"DataFrame"],[8,"HashJoin"],[8,"Selection"],[8,"ArrowPrimitiveType"],[8,"ChunkOps"],[8,"LhsNumOps"],[4,"Series"],[8,"NamedFrom"],[3,"NumIterSingleChunkNullCheck"],[3,"NumIterSingleChunk"],[3,"NumIterManyChunkNullCheck"],[3,"NumIterManyChunk"],[3,"ChunkStringIter"],[3,"ChunkBoolIter"],[3,"ChunkNumIter"],[3,"NumTakeRandomChunked"],[3,"NumTakeRandomCont"],[3,"NumTakeRandomSingleChunk"],[3,"Utf8TakeRandom"],[3,"Utf8TakeRandomSingleChunk"],[3,"BoolTakeRandom"],[3,"BoolTakeRandomSingleChunk"],[3,"BooleanType"],[3,"Date32Type"],[3,"Date64Type"],[3,"DurationNanosecondType"],[3,"Float32Type"],[3,"Float64Type"],[3,"Int32Type"],[3,"Int64Type"],[3,"Time64NanosecondType"],[3,"UInt32Type"],[3,"Utf8Type"],[3,"ReaderBuilder"],[3,"WriterBuilder"],[3,"Field"],[6,"BooleanChunked"],[6,"Utf8Chunked"],[6,"UInt32Chunked"]]},\
"polars_arrow_rvsry99dx":{"doc":"A native Rust implementation of Apache Arrow, a…","i":[[0,"array","polars_arrow_rvsry99dx","The central type in Apache Arrow are arrays, represented…",null,null],[3,"ArrayData","polars_arrow_rvsry99dx::array","An generic representation of Arrow array data which…",null,null],[3,"ArrayDataBuilder","","Builder for `ArrayData` type",null,null],[3,"BinaryArray","","A type of `ListArray` whose elements are binaries.",null,null],[3,"DictionaryArray","","A dictionary array where each element is a single value…",null,null],[3,"FixedSizeBinaryArray","","A type of `FixedSizeListArray` whose elements are binaries.",null,null],[3,"FixedSizeListArray","","A list array where each element is a fixed-size sequence…",null,null],[3,"ListArray","","A list array where each element is a variable-sized…",null,null],[3,"PrimitiveArray","","Array whose elements are of primitive types.",null,null],[3,"StringArray","","A type of `ListArray` whose elements are UTF8 strings.",null,null],[3,"StructArray","","A nested array type where each child (called field) is…",null,null],[3,"NullArray","","An Array where all elements are nulls",null,null],[3,"UnionArray","","An Array that can represent slots of varying types",null,null],[3,"BufferBuilder","","Builder for creating a `Buffer` object.",null,null],[3,"BinaryBuilder","","Array builder for `BinaryArray`",null,null],[3,"FixedSizeBinaryBuilder","","",null,null],[3,"FixedSizeListBuilder","","Array builder for `ListArray`",null,null],[3,"ListBuilder","","Array builder for `ListArray`",null,null],[3,"PrimitiveBuilder","","Array builder for fixed-width primitive types",null,null],[3,"PrimitiveDictionaryBuilder","","Array builder for `DictionaryArray`. For example to map a…",null,null],[3,"StringBuilder","","",null,null],[3,"StringDictionaryBuilder","","Array builder for `DictionaryArray`. For example to map a…",null,null],[3,"StructBuilder","","Array builder for Struct types.",null,null],[3,"UnionBuilder","","Builder type for creating a new `UnionArray`.",null,null],[5,"as_ordarray","","Convert ArrayRef to OrdArray trait object",null,[[["arrayref",6]],[["box",3],["result",6]]]],[5,"as_boolean_array","","Force downcast ArrayRef to  BooleanArray",null,[[["arrayref",6]],["booleanarray",6]]],[5,"as_null_array","","Force downcast ArrayRef to  NullArray",null,[[["arrayref",6]],["nullarray",3]]],[5,"as_primitive_array","","Force downcast ArrayRef to PrimitiveArray",null,[[["arrayref",6]],["primitivearray",3]]],[5,"as_string_array","","Force downcast ArrayRef to  StringArray",null,[[["arrayref",6]],["stringarray",3]]],[11,"new","","",0,[[["buffer",3]]]],[11,"values","","Returns a `Buffer` holding all the values of this array.",0,[[],["buffer",3]]],[11,"len","","Returns the length of this array.",0,[[]]],[11,"raw_values","","Returns a raw pointer to the values of this array.",0,[[]]],[11,"value","","Returns the primitive value at index `i`.",0,[[]]],[11,"value_slice","","Returns a slice for the given offset and length",0,[[]]],[11,"builder","","",0,[[],["primitivebuilder",3]]],[11,"value_as_datetime","","Returns value as a chrono `NaiveDateTime`, handling time…",0,[[],[["naivedatetime",3],["option",4]]]],[11,"value_as_date","","Returns value as a chrono `NaiveDate` by using…",0,[[],[["naivedate",3],["option",4]]]],[11,"value_as_time","","Returns a value as a chrono `NaiveTime`",0,[[],[["naivetime",3],["option",4]]]],[11,"new","","",0,[[["buffer",3]]]],[11,"values","","Returns a `Buffer` holds all the values of this array.",0,[[],["buffer",3]]],[11,"value","","Returns the boolean value at index `i`.",0,[[]]],[11,"builder","","",0,[[],["booleanbuilder",6]]],[11,"from_vec","","Construct a timestamp array from a vec of i64 values and…",0,[[["option",4],["vec",3],["arc",3]]]],[11,"from_opt_vec","","Construct a timestamp array from a vec of Option values…",0,[[["arc",3],["option",4],["option",4],["vec",3]]]],[11,"values","","Returns a reference to the values of this list.",1,[[],["arrayref",6]]],[11,"value_type","","Returns a clone of the value type of this list.",1,[[],["datatype",4]]],[11,"value","","Returns ith value of this list array.",1,[[],["arrayref",6]]],[11,"value_offset","","Returns the offset for value at index `i`.",1,[[]]],[11,"value_length","","Returns the length for value at index `i`.",1,[[]]],[11,"values","","Returns a reference to the values of this list.",2,[[],["arrayref",6]]],[11,"value_type","","Returns a clone of the value type of this list.",2,[[],["datatype",4]]],[11,"value","","Returns ith value of this list array.",2,[[],["arrayref",6]]],[11,"value_offset","","Returns the offset for value at index `i`.",2,[[]]],[11,"value_length","","Returns the length for value at index `i`.",2,[[]]],[11,"value","","Returns the element at index `i` as a byte slice.",3,[[]]],[11,"value_offset","","Returns the offset for the element at index `i`.",3,[[]]],[11,"value_length","","Returns the length for the element at index `i`.",3,[[]]],[11,"value_offsets","","Returns a clone of the value offset buffer",3,[[],["buffer",3]]],[11,"value_data","","Returns a clone of the value data buffer",3,[[],["buffer",3]]],[11,"builder","","",3,[[],["binarybuilder",3]]],[11,"value","","Returns the element at index `i` as a string slice.",4,[[]]],[11,"value_offset","","Returns the offset for the element at index `i`.",4,[[]]],[11,"value_length","","Returns the length for the element at index `i`.",4,[[]]],[11,"value_offsets","","Returns a clone of the value offset buffer",4,[[],["buffer",3]]],[11,"value_data","","Returns a clone of the value data buffer",4,[[],["buffer",3]]],[11,"builder","","",4,[[],["stringbuilder",3]]],[11,"value","","Returns the element at index `i` as a byte slice.",5,[[]]],[11,"value_offset","","Returns the offset for the element at index `i`.",5,[[]]],[11,"value_length","","Returns the length for an element.",5,[[]]],[11,"value_data","","Returns a clone of the value data buffer",5,[[],["buffer",3]]],[11,"column","","Returns the field at `pos`.",6,[[],["arrayref",6]]],[11,"num_columns","","Return the number of fields in this struct array",6,[[]]],[11,"columns","","Returns the fields of the struct array",6,[[],[["vec",3],["arrayref",6]]]],[11,"columns_ref","","Returns child array refs of the struct array",6,[[],[["arrayref",6],["vec",3]]]],[11,"column_names","","Return field names in this struct array",6,[[],["vec",3]]],[11,"column_by_name","","Return child array whose field name equals to column_name",6,[[],[["arrayref",6],["option",4]]]],[11,"keys","","Return an iterator to the keys of this dictionary.",7,[[],["nullableiter",3]]],[11,"lookup_key","","Returns the lookup key by doing reverse dictionary lookup",7,[[],["option",4]]],[11,"values","","Returns an `ArrayRef` to the dictionary values.",7,[[],["arrayref",6]]],[11,"value_type","","Returns a clone of the value type of this list.",7,[[],["datatype",4]]],[11,"len","","The length of the dictionary is the length of the keys…",7,[[]]],[11,"is_ordered","","",7,[[]]],[11,"new","","Creates a new primitive array builder",8,[[]]],[11,"capacity","","Returns the capacity of this builder measured in slots of…",8,[[]]],[11,"append_value","","Appends a value of type `T` into the builder",8,[[],["result",6]]],[11,"append_null","","Appends a null slot into the builder",8,[[],["result",6]]],[11,"append_option","","Appends an `Option<T>` into the builder",8,[[["option",4]],["result",6]]],[11,"append_slice","","Appends a slice of type `T` into the builder",8,[[],["result",6]]],[11,"append_values","","Appends values from a slice of type `T` and a validity…",8,[[],["result",6]]],[11,"finish","","Builds the `PrimitiveArray` and reset this builder.",8,[[],["primitivearray",3]]],[11,"finish_dict","","Builds the `DictionaryArray` and reset this builder.",8,[[["arrayref",6]],["dictionaryarray",3]]],[11,"new","","Creates a new `ListArrayBuilder` from a given values array…",9,[[]]],[11,"with_capacity","","Creates a new `ListArrayBuilder` from a given values array…",9,[[]]],[11,"values","","Returns the child array builder as a mutable reference.",9,[[]]],[11,"append","","Finish the current variable-length list array slot",9,[[],["result",6]]],[11,"finish","","Builds the `ListArray` and reset this builder.",9,[[],["listarray",3]]],[11,"new","","Creates a new `FixedSizeListBuilder` from a given values…",10,[[]]],[11,"with_capacity","","Creates a new `FixedSizeListBuilder` from a given values…",10,[[]]],[11,"values","","Returns the child array builder as a mutable reference.",10,[[]]],[11,"value_length","","",10,[[]]],[11,"append","","Finish the current variable-length list array slot",10,[[],["result",6]]],[11,"finish","","Builds the `FixedSizeListBuilder` and reset this builder.",10,[[],["fixedsizelistarray",3]]],[11,"new","","Creates a new `BinaryBuilder`, `capacity` is the number of…",11,[[]]],[11,"append_byte","","Appends a single byte value into the builder\'s values array.",11,[[],["result",6]]],[11,"append_value","","Appends a byte slice into the builder.",11,[[],["result",6]]],[11,"append","","Finish the current variable-length list array slot.",11,[[],["result",6]]],[11,"append_null","","Append a null value to the array.",11,[[],["result",6]]],[11,"finish","","Builds the `BinaryArray` and reset this builder.",11,[[],["binaryarray",3]]],[11,"new","","Creates a new `StringBuilder`, `capacity` is the number of…",12,[[]]],[11,"with_capacity","","Creates a new `StringBuilder`, `data_capacity` is the…",12,[[]]],[11,"append_value","","Appends a string into the builder.",12,[[],["result",6]]],[11,"append","","Finish the current variable-length list array slot.",12,[[],["result",6]]],[11,"append_null","","Append a null value to the array.",12,[[],["result",6]]],[11,"finish","","Builds the `StringArray` and reset this builder.",12,[[],["stringarray",3]]],[11,"new","","Creates a new `BinaryBuilder`, `capacity` is the number of…",13,[[]]],[11,"append_value","","Appends a byte slice into the builder.",13,[[],["result",6]]],[11,"append_null","","Append a null value to the array.",13,[[],["result",6]]],[11,"finish","","Builds the `FixedSizeBinaryArray` and reset this builder.",13,[[],["fixedsizebinaryarray",3]]],[11,"new","","",14,[[["vec",3],["vec",3],["box",3],["field",3]]]],[11,"from_schema","","",14,[[["schema",3]]]],[11,"field_builder","","Returns a mutable reference to the child field builder at…",14,[[],["option",4]]],[11,"num_fields","","Returns the number of fields for the struct this builder…",14,[[]]],[11,"append","","Appends an element (either null or non-null) to the…",14,[[],["result",6]]],[11,"append_null","","Appends a null element to the struct.",14,[[],["result",6]]],[11,"finish","","Builds the `StructArray` and reset this builder.",14,[[],["structarray",3]]],[11,"new","","Creates a new `PrimitiveDictionaryBuilder` from a keys…",15,[[["primitivebuilder",3],["primitivebuilder",3]]]],[11,"append","","Append a primitive value to the array. Return an existing…",15,[[],["result",6]]],[11,"append_null","","",15,[[],["result",6]]],[11,"finish","","Builds the `DictionaryArray` and reset this builder.",15,[[],["dictionaryarray",3]]],[11,"new","","Creates a new `StringDictionaryBuilder` from a keys…",16,[[["stringbuilder",3],["primitivebuilder",3]]]],[11,"new_with_dictionary","","Creates a new `StringDictionaryBuilder` from a keys…",16,[[["primitivebuilder",3],["stringarray",3]],["result",6]]],[11,"append","","Append a primitive value to the array. Return an existing…",16,[[],["result",6]]],[11,"append_null","","",16,[[],["result",6]]],[11,"finish","","Builds the `DictionaryArray` and reset this builder.",16,[[],["dictionaryarray",3]]],[11,"new","","",17,[[["buffer",3],["arraydataref",6],["vec",3],["option",4],["option",4],["datatype",4],["vec",3]]]],[11,"builder","","Returns a builder to construct a `ArrayData` instance.",17,[[["datatype",4]],["arraydatabuilder",3]]],[11,"data_type","","Returns a reference to the data type of this array data",17,[[],["datatype",4]]],[11,"buffers","","Returns a slice of buffers for this array data",17,[[]]],[11,"child_data","","Returns a slice of children data arrays",17,[[]]],[11,"is_null","","Returns whether the element at index `i` is null",17,[[]]],[11,"null_bitmap","","Returns a reference to the null bitmap of this array data",17,[[],["option",4]]],[11,"null_buffer","","Returns a reference to the null buffer of this array data.",17,[[],[["option",4],["buffer",3]]]],[11,"is_valid","","Returns whether the element at index `i` is not null",17,[[]]],[11,"len","","Returns the length (i.e., number of elements) of this array",17,[[]]],[11,"offset","","Returns the offset of this array",17,[[]]],[11,"null_count","","Returns the total number of nulls in this array",17,[[]]],[11,"new","","",18,[[["datatype",4]]]],[11,"len","","",18,[[]]],[11,"null_count","","",18,[[]]],[11,"null_bit_buffer","","",18,[[["buffer",3]]]],[11,"offset","","",18,[[]]],[11,"buffers","","",18,[[["buffer",3],["vec",3]]]],[11,"add_buffer","","",18,[[["buffer",3]]]],[11,"child_data","","",18,[[["arraydataref",6],["vec",3]]]],[11,"add_child_data","","",18,[[["arraydataref",6]]]],[11,"build","","",18,[[],["arraydataref",6]]],[11,"new","","Create a new null array of the specified length",19,[[]]],[11,"new","","Creates a new `UnionArray`.",20,[[["buffer",3],["option",4],["option",4],["vec",3]]]],[11,"try_new","","Attempts to create a new `UnionArray` and validates the…",20,[[["buffer",3],["option",4],["vec",3]],["result",6]]],[11,"child","","Accesses the child array for `type_id`.",20,[[],["arrayref",6]]],[11,"type_id","","Returns the `type_id` for the array slot at `index`.",20,[[]]],[11,"value_offset","","Returns the offset into the underlying values array for…",20,[[]]],[11,"value","","Returns the array\'s value at `index`.",20,[[],["arrayref",6]]],[11,"type_names","","Returns the names of the types in the union.",20,[[],["vec",3]]],[11,"new_dense","","Creates a new dense array builder.",21,[[]]],[11,"new_sparse","","Creates a new sparse array builder.",21,[[]]],[11,"append_null","","Appends a null to this builder.",21,[[],["result",6]]],[11,"append","","Appends a value to this builder.",21,[[],["result",6]]],[11,"build","","Builds this builder creating a new `UnionArray`.",21,[[],[["unionarray",3],["result",6]]]],[6,"ArrayRef","","A reference-counted reference to a generic `Array`.",null,null],[6,"ArrayDataRef","","",null,null],[6,"BooleanArray","","",null,null],[6,"Int8Array","","",null,null],[6,"Int16Array","","",null,null],[6,"Int32Array","","",null,null],[6,"Int64Array","","",null,null],[6,"UInt8Array","","",null,null],[6,"UInt16Array","","",null,null],[6,"UInt32Array","","",null,null],[6,"UInt64Array","","",null,null],[6,"Float32Array","","",null,null],[6,"Float64Array","","",null,null],[6,"Int8DictionaryArray","","",null,null],[6,"Int16DictionaryArray","","",null,null],[6,"Int32DictionaryArray","","",null,null],[6,"Int64DictionaryArray","","",null,null],[6,"UInt8DictionaryArray","","",null,null],[6,"UInt16DictionaryArray","","",null,null],[6,"UInt32DictionaryArray","","",null,null],[6,"UInt64DictionaryArray","","",null,null],[6,"TimestampSecondArray","","",null,null],[6,"TimestampMillisecondArray","","",null,null],[6,"TimestampMicrosecondArray","","",null,null],[6,"TimestampNanosecondArray","","",null,null],[6,"Date32Array","","",null,null],[6,"Date64Array","","",null,null],[6,"Time32SecondArray","","",null,null],[6,"Time32MillisecondArray","","",null,null],[6,"Time64MicrosecondArray","","",null,null],[6,"Time64NanosecondArray","","",null,null],[6,"IntervalYearMonthArray","","",null,null],[6,"IntervalDayTimeArray","","",null,null],[6,"DurationSecondArray","","",null,null],[6,"DurationMillisecondArray","","",null,null],[6,"DurationMicrosecondArray","","",null,null],[6,"DurationNanosecondArray","","",null,null],[6,"BooleanBufferBuilder","","",null,null],[6,"Int8BufferBuilder","","",null,null],[6,"Int16BufferBuilder","","",null,null],[6,"Int32BufferBuilder","","",null,null],[6,"Int64BufferBuilder","","",null,null],[6,"UInt8BufferBuilder","","",null,null],[6,"UInt16BufferBuilder","","",null,null],[6,"UInt32BufferBuilder","","",null,null],[6,"UInt64BufferBuilder","","",null,null],[6,"Float32BufferBuilder","","",null,null],[6,"Float64BufferBuilder","","",null,null],[6,"TimestampSecondBufferBuilder","","",null,null],[6,"TimestampMillisecondBufferBuilder","","",null,null],[6,"TimestampMicrosecondBufferBuilder","","",null,null],[6,"TimestampNanosecondBufferBuilder","","",null,null],[6,"Date32BufferBuilder","","",null,null],[6,"Date64BufferBuilder","","",null,null],[6,"Time32SecondBufferBuilder","","",null,null],[6,"Time32MillisecondBufferBuilder","","",null,null],[6,"Time64MicrosecondBufferBuilder","","",null,null],[6,"Time64NanosecondBufferBuilder","","",null,null],[6,"IntervalYearMonthBufferBuilder","","",null,null],[6,"IntervalDayTimeBufferBuilder","","",null,null],[6,"DurationSecondBufferBuilder","","",null,null],[6,"DurationMillisecondBufferBuilder","","",null,null],[6,"DurationMicrosecondBufferBuilder","","",null,null],[6,"DurationNanosecondBufferBuilder","","",null,null],[6,"BooleanBuilder","","",null,null],[6,"Int8Builder","","",null,null],[6,"Int16Builder","","",null,null],[6,"Int32Builder","","",null,null],[6,"Int64Builder","","",null,null],[6,"UInt8Builder","","",null,null],[6,"UInt16Builder","","",null,null],[6,"UInt32Builder","","",null,null],[6,"UInt64Builder","","",null,null],[6,"Float32Builder","","",null,null],[6,"Float64Builder","","",null,null],[6,"TimestampSecondBuilder","","",null,null],[6,"TimestampMillisecondBuilder","","",null,null],[6,"TimestampMicrosecondBuilder","","",null,null],[6,"TimestampNanosecondBuilder","","",null,null],[6,"Date32Builder","","",null,null],[6,"Date64Builder","","",null,null],[6,"Time32SecondBuilder","","",null,null],[6,"Time32MillisecondBuilder","","",null,null],[6,"Time64MicrosecondBuilder","","",null,null],[6,"Time64NanosecondBuilder","","",null,null],[6,"IntervalYearMonthBuilder","","",null,null],[6,"IntervalDayTimeBuilder","","",null,null],[6,"DurationSecondBuilder","","",null,null],[6,"DurationMillisecondBuilder","","",null,null],[6,"DurationMicrosecondBuilder","","",null,null],[6,"DurationNanosecondBuilder","","",null,null],[8,"Array","","Trait for dealing with different types of array at runtime…",null,null],[10,"as_any","","Returns the array as `Any` so that it can be downcasted to…",22,[[],["any",8]]],[10,"data","","Returns a reference-counted pointer to the underlying data…",22,[[],["arraydataref",6]]],[10,"data_ref","","Returns a borrowed & reference-counted pointer to the…",22,[[],["arraydataref",6]]],[11,"data_type","","Returns a reference to the `DataType` of this array.",22,[[],["datatype",4]]],[11,"slice","","Returns a zero-copy slice of this array with the indicated…",22,[[],["arrayref",6]]],[11,"len","","Returns the length (i.e., number of elements) of this array.",22,[[]]],[11,"offset","","Returns the offset into the underlying data used by this…",22,[[]]],[11,"is_null","","Returns whether the element at `index` is null. When using…",22,[[]]],[11,"is_valid","","Returns whether the element at `index` is not null. When…",22,[[]]],[11,"null_count","","Returns the total number of null values in this array.",22,[[]]],[8,"ListArrayOps","","Common operations for List types, currently `ListArray`,…",null,null],[10,"value_offset_at","","",23,[[]]],[8,"PrimitiveArrayOps","","Common operations for primitive types, including numeric…",null,null],[10,"values","","",24,[[],["buffer",3]]],[10,"value","","",24,[[]]],[8,"BufferBuilderTrait","","Trait for simplifying the construction of `Buffers`.",null,null],[10,"new","","Creates a new builder with initial capacity for at least…",25,[[]]],[10,"len","","Returns the current number of array elements in the…",25,[[]]],[10,"capacity","","Returns the actual capacity (number of elements) of the…",25,[[]]],[10,"advance","","Increases the number of elements in the internal buffer by…",25,[[],["result",6]]],[10,"reserve","","Reserves memory for at least `n` more elements of type `T`.",25,[[],["result",6]]],[10,"append","","Appends a value of type `T` into the builder, growing the…",25,[[],["result",6]]],[10,"append_n","","Appends a value of type `T` into the builder N times,…",25,[[],["result",6]]],[10,"append_slice","","Appends a slice of type `T`, growing the internal buffer…",25,[[],["result",6]]],[10,"finish","","Resets this builder and returns an immutable `Buffer`.",25,[[],["buffer",3]]],[8,"ArrayBuilder","","Trait for dealing with different array builders at runtime",null,null],[10,"len","","Returns the number of array slots in the builder",26,[[]]],[10,"append_data","","Appends data from other arrays into the builder",26,[[],["result",6]]],[10,"data_type","","Returns the data type of the builder",26,[[],["datatype",4]]],[10,"finish","","Builds the array",26,[[],["arrayref",6]]],[10,"as_any","","Returns the builder as a non-mutable `Any` reference.",26,[[],["any",8]]],[10,"as_any_mut","","Returns the builder as a mutable `Any` reference.",26,[[],["any",8]]],[10,"into_box_any","","Returns the boxed builder as a box of `Any`.",26,[[["box",3]],[["box",3],["any",8]]]],[8,"ArrayEqual","","Trait for `Array` equality.",null,null],[10,"equals","","Returns true if this array is equal to the `other` array",27,[[["array",8]]]],[10,"range_equals","","Returns true if the range [start_idx, end_idx) is equal to…",27,[[["array",8]]]],[8,"JsonEqual","","Trait for comparing some array with json array",null,null],[10,"equals_json","","Checks whether some array equals to json array.",28,[[]]],[11,"equals_json_values","","Checks whether some array equals to json array.",28,[[]]],[8,"OrdArray","","Trait for Arrays that can be sorted",null,null],[10,"cmp_value","","Return ordering between array element at index i and j",29,[[],["ordering",4]]],[0,"bitmap","polars_arrow_rvsry99dx","Defines a bitmap, which is used to track which values in…",null,null],[3,"Bitmap","polars_arrow_rvsry99dx::bitmap","",null,null],[11,"new","","",30,[[]]],[11,"len","","",30,[[]]],[11,"is_set","","",30,[[]]],[11,"buffer_ref","","",30,[[],["buffer",3]]],[11,"to_buffer","","",30,[[],["buffer",3]]],[0,"buffer","polars_arrow_rvsry99dx","The main type in the module is `Buffer`, a contiguous…",null,null],[3,"Buffer","polars_arrow_rvsry99dx::buffer","Buffer is a contiguous memory region of fixed size and is…",null,null],[3,"MutableBuffer","","Similar to `Buffer`, but is growable and can be mutated. A…",null,null],[11,"from_raw_parts","","Creates a buffer from an existing memory region (must…",31,[[]]],[11,"from_unowned","","Creates a buffer from an existing memory region (must…",31,[[]]],[11,"len","","Returns the number of bytes in the buffer",31,[[]]],[11,"capacity","","Returns the capacity of this buffer",31,[[]]],[11,"is_empty","","Returns whether the buffer is empty.",31,[[]]],[11,"data","","Returns the byte slice stored in this buffer",31,[[]]],[11,"slice","","Returns a slice of this buffer, starting from `offset`.",31,[[]]],[11,"raw_data","","Returns a raw pointer for this buffer.",31,[[]]],[11,"typed_data","","View buffer as typed slice.",31,[[]]],[11,"empty","","Returns an empty buffer.",31,[[]]],[11,"new","","Allocate a new mutable buffer with initial capacity to be…",32,[[]]],[11,"with_bitset","","Set the bits in the range of `[0, end)` to 0 (if `val` is…",32,[[]]],[11,"set_null_bits","","Ensure that `count` bytes from `start` contain zero bits",32,[[]]],[11,"reserve","","Ensures that this buffer has at least `capacity` slots in…",32,[[],["result",6]]],[11,"resize","","Resizes the buffer so that the `len` will equal to the…",32,[[],["result",6]]],[11,"is_empty","","Returns whether this buffer is empty or not.",32,[[]]],[11,"len","","Returns the length (the number of bytes written) in this…",32,[[]]],[11,"capacity","","Returns the total capacity in this buffer.",32,[[]]],[11,"clear","","Clear all existing data from this buffer.",32,[[]]],[11,"data","","Returns the data stored in this buffer as a slice.",32,[[]]],[11,"data_mut","","Returns the data stored in this buffer as a mutable slice.",32,[[]]],[11,"raw_data","","Returns a raw pointer for this buffer.",32,[[]]],[11,"raw_data_mut","","",32,[[]]],[11,"freeze","","Freezes this buffer and return an immutable version of it.",32,[[],["buffer",3]]],[11,"typed_data_mut","","View buffer as typed slice.",32,[[]]],[11,"write_bytes","","Writes a byte slice to the underlying buffer and updates…",32,[[],["result",6]]],[0,"compute","polars_arrow_rvsry99dx","Computation kernels on Arrow Arrays",null,null],[0,"kernels","polars_arrow_rvsry99dx::compute","Computation kernels on Arrow Arrays",null,null],[0,"aggregate","polars_arrow_rvsry99dx::compute::kernels","Defines aggregations over Arrow arrays.",null,null],[5,"min","polars_arrow_rvsry99dx::compute::kernels::aggregate","Returns the minimum value in the array, according to the…",null,[[["primitivearray",3]],["option",4]]],[5,"max","","Returns the maximum value in the array, according to the…",null,[[["primitivearray",3]],["option",4]]],[5,"sum","","Returns the sum of values in the array.",null,[[["primitivearray",3]],["option",4]]],[0,"arithmetic","polars_arrow_rvsry99dx::compute::kernels","Defines basic arithmetic kernels for `PrimitiveArrays`.",null,null],[5,"math_op","polars_arrow_rvsry99dx::compute::kernels::arithmetic","Helper function to perform math lambda function on values…",null,[[["primitivearray",3]],[["primitivearray",3],["result",6]]]],[5,"add","","Perform `left + right` operation on two arrays. If either…",null,[[["primitivearray",3]],[["primitivearray",3],["result",6]]]],[5,"subtract","","Perform `left - right` operation on two arrays. If either…",null,[[["primitivearray",3]],[["primitivearray",3],["result",6]]]],[5,"multiply","","Perform `left * right` operation on two arrays. If either…",null,[[["primitivearray",3]],[["primitivearray",3],["result",6]]]],[5,"divide","","Perform `left / right` operation on two arrays. If either…",null,[[["primitivearray",3]],[["primitivearray",3],["result",6]]]],[0,"boolean","polars_arrow_rvsry99dx::compute::kernels","Defines boolean kernels on Arrow `BooleanArray`\'s, e.g.…",null,null],[5,"and","polars_arrow_rvsry99dx::compute::kernels::boolean","Performs `AND` operation on two arrays. If either left or…",null,[[["booleanarray",6]],[["booleanarray",6],["result",6]]]],[5,"or","","Performs `OR` operation on two arrays. If either left or…",null,[[["booleanarray",6]],[["booleanarray",6],["result",6]]]],[5,"not","","Performs unary `NOT` operation on an arrays. If value is…",null,[[["booleanarray",6]],[["booleanarray",6],["result",6]]]],[0,"cast","polars_arrow_rvsry99dx::compute::kernels","Defines cast kernels for `ArrayRef`, allowing casting…",null,null],[5,"cast","polars_arrow_rvsry99dx::compute::kernels::cast","Cast array to provided data type",null,[[["arrayref",6],["datatype",4]],[["arrayref",6],["result",6]]]],[0,"comparison","polars_arrow_rvsry99dx::compute::kernels","Defines basic comparison kernels for `PrimitiveArrays`.",null,null],[5,"no_simd_compare_op","polars_arrow_rvsry99dx::compute::kernels::comparison","",null,[[["primitivearray",3]],[["booleanarray",6],["result",6]]]],[5,"no_simd_compare_op_scalar","","",null,[[["primitivearray",3]],[["booleanarray",6],["result",6]]]],[5,"like_utf8","","",null,[[["stringarray",3]],[["booleanarray",6],["result",6]]]],[5,"nlike_utf8","","",null,[[["stringarray",3]],[["booleanarray",6],["result",6]]]],[5,"eq_utf8","","",null,[[["stringarray",3]],[["booleanarray",6],["result",6]]]],[5,"eq_utf8_scalar","","",null,[[["stringarray",3]],[["booleanarray",6],["result",6]]]],[5,"neq_utf8","","",null,[[["stringarray",3]],[["booleanarray",6],["result",6]]]],[5,"neq_utf8_scalar","","",null,[[["stringarray",3]],[["booleanarray",6],["result",6]]]],[5,"lt_utf8","","",null,[[["stringarray",3]],[["booleanarray",6],["result",6]]]],[5,"lt_utf8_scalar","","",null,[[["stringarray",3]],[["booleanarray",6],["result",6]]]],[5,"lt_eq_utf8","","",null,[[["stringarray",3]],[["booleanarray",6],["result",6]]]],[5,"lt_eq_utf8_scalar","","",null,[[["stringarray",3]],[["booleanarray",6],["result",6]]]],[5,"gt_utf8","","",null,[[["stringarray",3]],[["booleanarray",6],["result",6]]]],[5,"gt_utf8_scalar","","",null,[[["stringarray",3]],[["booleanarray",6],["result",6]]]],[5,"gt_eq_utf8","","",null,[[["stringarray",3]],[["booleanarray",6],["result",6]]]],[5,"gt_eq_utf8_scalar","","",null,[[["stringarray",3]],[["booleanarray",6],["result",6]]]],[5,"eq","","Perform `left == right` operation on two arrays.",null,[[["primitivearray",3]],[["booleanarray",6],["result",6]]]],[5,"eq_scalar","","Perform `left == right` operation on an array and a scalar…",null,[[["primitivearray",3]],[["booleanarray",6],["result",6]]]],[5,"neq","","Perform `left != right` operation on two arrays.",null,[[["primitivearray",3]],[["booleanarray",6],["result",6]]]],[5,"neq_scalar","","Perform `left != right` operation on an array and a scalar…",null,[[["primitivearray",3]],[["booleanarray",6],["result",6]]]],[5,"lt","","Perform `left < right` operation on two arrays. Null…",null,[[["primitivearray",3]],[["booleanarray",6],["result",6]]]],[5,"lt_scalar","","Perform `left < right` operation on an array and a scalar…",null,[[["primitivearray",3]],[["booleanarray",6],["result",6]]]],[5,"lt_eq","","Perform `left <= right` operation on two arrays. Null…",null,[[["primitivearray",3]],[["booleanarray",6],["result",6]]]],[5,"lt_eq_scalar","","Perform `left <= right` operation on an array and a scalar…",null,[[["primitivearray",3]],[["booleanarray",6],["result",6]]]],[5,"gt","","Perform `left > right` operation on two arrays. Non-null…",null,[[["primitivearray",3]],[["booleanarray",6],["result",6]]]],[5,"gt_scalar","","Perform `left > right` operation on an array and a scalar…",null,[[["primitivearray",3]],[["booleanarray",6],["result",6]]]],[5,"gt_eq","","Perform `left >= right` operation on two arrays. Non-null…",null,[[["primitivearray",3]],[["booleanarray",6],["result",6]]]],[5,"gt_eq_scalar","","Perform `left >= right` operation on an array and a scalar…",null,[[["primitivearray",3]],[["booleanarray",6],["result",6]]]],[0,"concat","polars_arrow_rvsry99dx::compute::kernels","Defines concat kernel for `ArrayRef`",null,null],[5,"concat","polars_arrow_rvsry99dx::compute::kernels::concat","Concatenate multiple `ArrayRef` with the same type.",null,[[],[["arrayref",6],["result",6]]]],[0,"filter","polars_arrow_rvsry99dx::compute::kernels","Defines miscellaneous array kernels.",null,null],[5,"filter","polars_arrow_rvsry99dx::compute::kernels::filter","Returns the array, taking only the elements matching the…",null,[[["booleanarray",6],["array",8]],[["arrayref",6],["result",6]]]],[0,"limit","polars_arrow_rvsry99dx::compute::kernels","Defines miscellaneous array kernels.",null,null],[5,"limit","polars_arrow_rvsry99dx::compute::kernels::limit","Returns the array, taking only the number of elements…",null,[[["arrayref",6]],[["arrayref",6],["result",6]]]],[0,"sort","polars_arrow_rvsry99dx::compute::kernels","Defines sort kernel for `ArrayRef`",null,null],[3,"SortOptions","polars_arrow_rvsry99dx::compute::kernels::sort","Options that define how sort kernels should behave",null,null],[12,"descending","","Whether to sort in descending order",33,null],[12,"nulls_first","","Whether to sort nulls first",33,null],[3,"SortColumn","","One column to be used in lexicographical sort",null,null],[12,"values","","",34,null],[12,"options","","",34,null],[5,"sort","","Sort the `ArrayRef` using `SortOptions`.",null,[[["arrayref",6],["sortoptions",3],["option",4]],[["arrayref",6],["result",6]]]],[5,"sort_to_indices","","Sort elements from `ArrayRef` into an unsigned integer…",null,[[["arrayref",6],["sortoptions",3],["option",4]],[["uint32array",6],["result",6]]]],[5,"lexsort","","Sort a list of `ArrayRef` using `SortOptions` provided for…",null,[[["vec",3]],[["result",6],["vec",3]]]],[5,"lexsort_to_indices","","Sort elements lexicographically from a list of `ArrayRef`…",null,[[["vec",3]],[["uint32array",6],["result",6]]]],[0,"take","polars_arrow_rvsry99dx::compute::kernels","Defines take kernel for `ArrayRef`",null,null],[3,"TakeOptions","polars_arrow_rvsry99dx::compute::kernels::take","Options that define how `take` should behave",null,null],[12,"check_bounds","","Perform bounds check before taking indices from values. If…",35,null],[5,"take","","Take elements from `ArrayRef` by supplying an array of…",null,[[["arrayref",6],["uint32array",6],["option",4],["takeoptions",3]],[["arrayref",6],["result",6]]]],[0,"temporal","polars_arrow_rvsry99dx::compute::kernels","Defines temporal kernels for time and date related…",null,null],[5,"hour","polars_arrow_rvsry99dx::compute::kernels::temporal","Extracts the hours of a given temporal array as an array…",null,[[["primitivearray",3]],[["result",6],["int32array",6]]]],[0,"csv","polars_arrow_rvsry99dx","Transfer data between the Arrow memory format and CSV…",null,null],[0,"reader","polars_arrow_rvsry99dx::csv","CSV Reader",null,null],[3,"Reader","polars_arrow_rvsry99dx::csv::reader","CSV file reader",null,null],[3,"ReaderBuilder","","CSV file reader builder",null,null],[5,"infer_schema_from_files","","Infer schema from a list of CSV files by reading through…",null,[[["vec",3],["option",4]],[["result",6],["schema",3]]]],[11,"new","","Create a new CsvReader from any value that implements the…",36,[[["arc",3],["option",4],["schema",3],["vec",3],["option",4]]]],[11,"schema","","Returns the schema of the reader, useful for getting the…",36,[[],[["arc",3],["schema",3]]]],[11,"from_buf_reader","","Create a new CsvReader from a `BufReader<R: Read>",36,[[["arc",3],["option",4],["schema",3],["bufreader",3],["option",4],["vec",3]]]],[11,"next","","Read the next batch of rows",36,[[],[["result",6],["option",4]]]],[11,"new","","Create a new builder for configuring CSV parsing options.",37,[[],["readerbuilder",3]]],[11,"with_schema","","Set the CSV file\'s schema",37,[[["arc",3],["schema",3]]]],[11,"has_header","","Set whether the CSV file has headers",37,[[]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",37,[[]]],[11,"infer_schema","","Set the CSV reader to infer the schema of the file",37,[[["option",4]]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)",37,[[]]],[11,"with_projection","","Set the reader\'s column projection",37,[[["vec",3]]]],[11,"build","","Create a new `Reader` from the `ReaderBuilder`",37,[[["read",8],["seek",8]],[["result",6],["reader",3]]]],[0,"writer","polars_arrow_rvsry99dx::csv","CSV Writer",null,null],[3,"Writer","polars_arrow_rvsry99dx::csv::writer","A CSV writer",null,null],[3,"WriterBuilder","","A CSV writer builder",null,null],[11,"new","","Create a new CsvWriter from a writable object, with…",38,[[]]],[11,"write","","Write a vector of record batches to a writable object",38,[[["recordbatch",3]],["result",6]]],[11,"new","","Create a new builder for configuring CSV writing options.",39,[[]]],[11,"has_headers","","Set whether to write headers",39,[[]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",39,[[]]],[11,"with_date_format","","Set the CSV file\'s date format",39,[[["string",3]]]],[11,"with_time_format","","Set the CSV file\'s time format",39,[[["string",3]]]],[11,"with_timestamp_format","","Set the CSV file\'s timestamp format",39,[[["string",3]]]],[11,"build","","Create a new `Writer`",39,[[["write",8]],[["writer",3],["write",8]]]],[0,"datatypes","polars_arrow_rvsry99dx","Defines the logical data types of Arrow arrays.",null,null],[3,"Field","polars_arrow_rvsry99dx::datatypes","Contains the meta-data for a single relative type.",null,null],[3,"BooleanType","","",null,null],[3,"Int8Type","","",null,null],[3,"Int16Type","","",null,null],[3,"Int32Type","","",null,null],[3,"Int64Type","","",null,null],[3,"UInt8Type","","",null,null],[3,"UInt16Type","","",null,null],[3,"UInt32Type","","",null,null],[3,"UInt64Type","","",null,null],[3,"Float32Type","","",null,null],[3,"Float64Type","","",null,null],[3,"TimestampSecondType","","",null,null],[3,"TimestampMillisecondType","","",null,null],[3,"TimestampMicrosecondType","","",null,null],[3,"TimestampNanosecondType","","",null,null],[3,"Date32Type","","",null,null],[3,"Date64Type","","",null,null],[3,"Time32SecondType","","",null,null],[3,"Time32MillisecondType","","",null,null],[3,"Time64MicrosecondType","","",null,null],[3,"Time64NanosecondType","","",null,null],[3,"IntervalYearMonthType","","",null,null],[3,"IntervalDayTimeType","","",null,null],[3,"DurationSecondType","","",null,null],[3,"DurationMillisecondType","","",null,null],[3,"DurationMicrosecondType","","",null,null],[3,"DurationNanosecondType","","",null,null],[3,"Schema","","Describes the meta-data of an ordered sequence of relative…",null,null],[4,"DataType","","The set of datatypes that are supported by this…",null,null],[13,"Null","","Null type",40,null],[13,"Boolean","","A boolean datatype representing the values `true` and…",40,null],[13,"Int8","","A signed 8-bit integer.",40,null],[13,"Int16","","A signed 16-bit integer.",40,null],[13,"Int32","","A signed 32-bit integer.",40,null],[13,"Int64","","A signed 64-bit integer.",40,null],[13,"UInt8","","An unsigned 8-bit integer.",40,null],[13,"UInt16","","An unsigned 16-bit integer.",40,null],[13,"UInt32","","An unsigned 32-bit integer.",40,null],[13,"UInt64","","An unsigned 64-bit integer.",40,null],[13,"Float16","","A 16-bit floating point number.",40,null],[13,"Float32","","A 32-bit floating point number.",40,null],[13,"Float64","","A 64-bit floating point number.",40,null],[13,"Timestamp","","A timestamp with an optional timezone.",40,null],[13,"Date32","","A 32-bit date representing the elapsed time since UNIX…",40,null],[13,"Date64","","A 64-bit date representing the elapsed time since UNIX…",40,null],[13,"Time32","","A 32-bit time representing the elapsed time since midnight…",40,null],[13,"Time64","","A 64-bit time representing the elapsed time since midnight…",40,null],[13,"Duration","","Measure of elapsed time in either seconds, milliseconds,…",40,null],[13,"Interval","","A \\\"calendar\\\" interval which models types that don\'t…",40,null],[13,"Binary","","Opaque binary data of variable length.",40,null],[13,"FixedSizeBinary","","Opaque binary data of fixed size. Enum parameter specifies…",40,null],[13,"Utf8","","A variable-length string in Unicode with UTF-8 encoding.",40,null],[13,"List","","A list of some logical data type with variable length.",40,null],[13,"FixedSizeList","","A list of some logical data type with fixed length.",40,null],[13,"Struct","","A nested datatype that contains a number of sub-fields.",40,null],[13,"Union","","A nested datatype that can represent slots of differing…",40,null],[13,"Dictionary","","A dictionary array where each element is a single value…",40,null],[4,"DateUnit","","Date is either a 32-bit or 64-bit type representing…",null,null],[13,"Day","","Days since the UNIX epoch.",41,null],[13,"Millisecond","","Milliseconds indicating UNIX time elapsed since the epoch…",41,null],[4,"TimeUnit","","An absolute length of time in seconds, milliseconds,…",null,null],[13,"Second","","Time in seconds.",42,null],[13,"Millisecond","","Time in milliseconds.",42,null],[13,"Microsecond","","Time in microseconds.",42,null],[13,"Nanosecond","","Time in nanoseconds.",42,null],[4,"IntervalUnit","","YEAR_MONTH or DAY_TIME interval in SQL style.",null,null],[13,"YearMonth","","Indicates the number of elapsed whole months, stored as…",43,null],[13,"DayTime","","Indicates the number of elapsed days and milliseconds,…",43,null],[6,"SchemaRef","","A reference-counted reference to a `Schema`.",null,null],[8,"ArrowNativeType","","",null,null],[10,"into_json_value","","",44,[[],[["option",4],["value",4]]]],[11,"from_usize","","Convert native type from usize.",44,[[],["option",4]]],[11,"to_usize","","Convert native type to usize.",44,[[],["option",4]]],[8,"ArrowPrimitiveType","","Trait indicating a primitive fixed-width type (bool, ints…",null,null],[16,"Native","","Corresponding Rust native type for the primitive type.",45,null],[10,"get_data_type","","Returns the corresponding Arrow data type of this…",45,[[],["datatype",4]]],[10,"get_bit_width","","Returns the bit width of this primitive type.",45,[[]]],[10,"default_value","","Returns a default value of this primitive type.",45,[[]]],[8,"ArrowDictionaryKeyType","","A subtype of primitive type that represents legal…",null,null],[8,"ArrowNumericType","","",null,null],[8,"ArrowTemporalType","","A subtype of primitive type that represents temporal values.",null,null],[8,"ArrowTimestampType","","A timestamp type allows us to create array builders that…",null,null],[10,"get_time_unit","","Returns the `TimeUnit` of this timestamp.",46,[[],["timeunit",4]]],[8,"ToByteSlice","","Allows conversion from supported Arrow types to a byte…",null,null],[10,"to_byte_slice","","Converts this instance into a byte slice",47,[[]]],[11,"to_json","","Generate a JSON representation of the data type",40,[[],["value",4]]],[11,"new","","Creates a new field",48,[[["datatype",4]]]],[11,"new_dict","","Creates a new field",48,[[["datatype",4]]]],[11,"name","","Returns an immutable reference to the `Field`\'s name",48,[[],["string",3]]],[11,"data_type","","Returns an immutable reference to the `Field`\'s  data-type",48,[[],["datatype",4]]],[11,"is_nullable","","Indicates whether this `Field` supports null values",48,[[]]],[11,"from","","Parse a `Field` definition from a JSON representation",48,[[["value",4]],["result",6]]],[11,"to_json","","Generate a JSON representation of the `Field`",48,[[],["value",4]]],[11,"to_string","","Converts to a `String` representation of the `Field`",48,[[],["string",3]]],[11,"try_merge","","Merge field into self if it is compatible. Struct will be…",48,[[["field",3]],["result",6]]],[11,"empty","","Creates an empty `Schema`",49,[[]]],[11,"new","","Creates a new `Schema` from a sequence of `Field` values",49,[[["vec",3],["field",3]]]],[11,"new_with_metadata","","Creates a new `Schema` from a sequence of `Field` values…",49,[[["hashmap",3],["string",3],["vec",3],["field",3]]]],[11,"try_merge","","Merge schema into self if it is compatible. Struct fields…",49,[[["vec",3]],["result",6]]],[11,"fields","","Returns an immutable reference of the vector of `Field`…",49,[[],["vec",3]]],[11,"field","","Returns an immutable reference of a specific `Field`…",49,[[],["field",3]]],[11,"field_with_name","","Returns an immutable reference of a specific `Field`…",49,[[],[["result",6],["field",3]]]],[11,"index_of","","Find the index of the column with the given name",49,[[],["result",6]]],[11,"metadata","","Returns an immutable reference to the Map of custom…",49,[[],["hashmap",3]]],[11,"column_with_name","","Look up a column by name and return a immutable reference…",49,[[],["option",4]]],[11,"to_json","","Generate a JSON representation of the `Schema`",49,[[],["value",4]]],[11,"from","","Parse a `Schema` definition from a JSON representation",49,[[["value",4]],["result",6]]],[0,"error","polars_arrow_rvsry99dx","Defines `ArrowError` for representing failures in various…",null,null],[4,"ArrowError","polars_arrow_rvsry99dx::error","Many different operations in the `some` crate return this…",null,null],[13,"MemoryError","","",50,null],[13,"ParseError","","",50,null],[13,"SchemaError","","",50,null],[13,"ComputeError","","",50,null],[13,"DivideByZero","","",50,null],[13,"CsvError","","",50,null],[13,"JsonError","","",50,null],[13,"IoError","","",50,null],[13,"InvalidArgumentError","","",50,null],[13,"ParquetError","","",50,null],[13,"DictionaryKeyOverflowError","","",50,null],[6,"Result","","",null,null],[0,"ipc","polars_arrow_rvsry99dx","",null,null],[0,"convert","polars_arrow_rvsry99dx::ipc","Utilities for converting between IPC types and native…",null,null],[5,"schema_to_fb","polars_arrow_rvsry99dx::ipc::convert","Serialize a schema in IPC format",null,[[["schema",3]],["flatbufferbuilder",3]]],[5,"schema_to_fb_offset","","",null,[[["flatbufferbuilder",3],["schema",3]],[["wipoffset",3],["schema",3]]]],[5,"fb_to_schema","","Deserialize a Schema table from IPC format to Schema data…",null,[[["schema",3]],["schema",3]]],[5,"schema_from_bytes","","Deserialize an IPC message into a schema",null,[[],[["option",4],["schema",3]]]],[0,"reader","polars_arrow_rvsry99dx::ipc","Arrow IPC File and Stream Readers",null,null],[3,"FileReader","polars_arrow_rvsry99dx::ipc::reader","Arrow File reader",null,null],[3,"StreamReader","","Arrow Stream reader",null,null],[11,"try_new","","Try to create a new file reader",51,[[],["result",6]]],[11,"num_batches","","Return the number of batches in the file",51,[[]]],[11,"schema","","Return the schema of the file",51,[[],["schemaref",6]]],[11,"next","","Read the next record batch",51,[[],[["result",6],["option",4]]]],[11,"set_index","","Read a specific record batch",51,[[],["result",6]]],[11,"try_new","","Try to create a new stream reader",52,[[],["result",6]]],[11,"schema","","Return the schema of the stream",52,[[],["schemaref",6]]],[11,"next","","Read the next record batch",52,[[],[["result",6],["option",4]]]],[11,"is_finished","","Check if the stream is finished",52,[[]]],[0,"writer","polars_arrow_rvsry99dx::ipc","Arrow IPC File and Stream Writers",null,null],[3,"FileWriter","polars_arrow_rvsry99dx::ipc::writer","",null,null],[3,"StreamWriter","","",null,null],[11,"try_new","","Try create a new writer, with the schema written as part…",53,[[["schema",3]],["result",6]]],[11,"write","","Write a record batch to the file",53,[[["recordbatch",3]],["result",6]]],[11,"finish","","Write footer and closing tag, then mark the writer as done",53,[[],["result",6]]],[11,"try_new","","Try create a new writer, with the schema written as part…",54,[[["schema",3]],["result",6]]],[11,"write","","Write a record batch to the stream",54,[[["recordbatch",3]],["result",6]]],[11,"finish","","Write continuation bytes, and mark the stream as done",54,[[],["result",6]]],[0,"gen","polars_arrow_rvsry99dx::ipc","Generated code",null,null],[0,"File","polars_arrow_rvsry99dx::ipc::gen","",null,null],[3,"Block","polars_arrow_rvsry99dx::ipc::gen::File","",null,null],[3,"Footer","","…",null,null],[12,"_tab","","",55,null],[3,"FooterArgs","","",null,null],[12,"version","","",56,null],[12,"schema","","",56,null],[12,"dictionaries","","",56,null],[12,"recordBatches","","",56,null],[12,"custom_metadata","","",56,null],[3,"FooterBuilder","","",null,null],[4,"FooterOffset","","",null,null],[5,"get_root_as_footer","","",null,[[],["footer",3]]],[5,"get_size_prefixed_root_as_footer","","",null,[[],["footer",3]]],[5,"finish_footer_buffer","","",null,[[["footer",3],["wipoffset",3],["flatbufferbuilder",3]]]],[5,"finish_size_prefixed_footer_buffer","","",null,[[["footer",3],["wipoffset",3],["flatbufferbuilder",3]]]],[11,"new","","",57,[[]]],[11,"offset","","Index to the start of the RecordBlock (note this is past…",57,[[]]],[11,"metaDataLength","","Length of the metadata",57,[[]]],[11,"bodyLength","","Length of the data (this is aligned so there can be a gap…",57,[[]]],[11,"init_from_table","","",55,[[["table",3]]]],[11,"create","","",55,[[["footerargs",3],["flatbufferbuilder",3]],[["footer",3],["wipoffset",3]]]],[18,"VT_VERSION","","",55,null],[18,"VT_SCHEMA","","",55,null],[18,"VT_DICTIONARIES","","",55,null],[18,"VT_RECORDBATCHES","","",55,null],[18,"VT_CUSTOM_METADATA","","",55,null],[11,"version","","",55,[[],["metadataversion",4]]],[11,"schema","","",55,[[],[["schema",3],["option",4]]]],[11,"dictionaries","","",55,[[],["option",4]]],[11,"recordBatches","","",55,[[],["option",4]]],[11,"custom_metadata","","User-defined metadata",55,[[],[["option",4],["vector",3]]]],[11,"add_version","","",58,[[["metadataversion",4]]]],[11,"add_schema","","",58,[[["wipoffset",3],["schema",3]]]],[11,"add_dictionaries","","",58,[[["vector",3],["wipoffset",3]]]],[11,"add_recordBatches","","",58,[[["vector",3],["wipoffset",3]]]],[11,"add_custom_metadata","","",58,[[["vector",3],["wipoffset",3]]]],[11,"new","","",58,[[["flatbufferbuilder",3]],["footerbuilder",3]]],[11,"finish","","",58,[[],[["wipoffset",3],["footer",3]]]],[0,"Message","polars_arrow_rvsry99dx::ipc::gen","",null,null],[3,"MessageHeaderUnionTableOffset","polars_arrow_rvsry99dx::ipc::gen::Message","",null,null],[3,"FieldNode","","…",null,null],[3,"RecordBatch","","A data header describing the shared memory layout of a…",null,null],[12,"_tab","","",59,null],[3,"RecordBatchArgs","","",null,null],[12,"length","","",60,null],[12,"nodes","","",60,null],[12,"buffers","","",60,null],[3,"RecordBatchBuilder","","",null,null],[3,"DictionaryBatch","","For sending dictionary encoding information. Any Field can…",null,null],[12,"_tab","","",61,null],[3,"DictionaryBatchArgs","","",null,null],[12,"id","","",62,null],[12,"data","","",62,null],[12,"isDelta","","",62,null],[3,"DictionaryBatchBuilder","","",null,null],[3,"Message","","",null,null],[12,"_tab","","",63,null],[3,"MessageArgs","","",null,null],[12,"version","","",64,null],[12,"header_type","","",64,null],[12,"header","","",64,null],[12,"bodyLength","","",64,null],[12,"custom_metadata","","",64,null],[3,"MessageBuilder","","",null,null],[4,"MessageHeader","","…",null,null],[13,"NONE","","",65,null],[13,"Schema","","",65,null],[13,"DictionaryBatch","","",65,null],[13,"RecordBatch","","",65,null],[13,"Tensor","","",65,null],[13,"SparseTensor","","",65,null],[4,"RecordBatchOffset","","",null,null],[4,"DictionaryBatchOffset","","",null,null],[4,"MessageOffset","","",null,null],[5,"enum_name_message_header","","",null,[[["messageheader",4]]]],[5,"get_root_as_message","","",null,[[],["message",3]]],[5,"get_size_prefixed_root_as_message","","",null,[[],["message",3]]],[5,"finish_message_buffer","","",null,[[["message",3],["wipoffset",3],["flatbufferbuilder",3]]]],[5,"finish_size_prefixed_message_buffer","","",null,[[["message",3],["wipoffset",3],["flatbufferbuilder",3]]]],[11,"new","","",66,[[]]],[11,"length","","The number of value slots in the Arrow array at this level…",66,[[]]],[11,"null_count","","The number of observed nulls. Fields with null_count == 0…",66,[[]]],[11,"init_from_table","","",59,[[["table",3]]]],[11,"create","","",59,[[["recordbatchargs",3],["flatbufferbuilder",3]],[["recordbatch",3],["wipoffset",3]]]],[18,"VT_LENGTH","","",59,null],[18,"VT_NODES","","",59,null],[18,"VT_BUFFERS","","",59,null],[11,"length","","number of records / rows. The arrays in the batch should…",59,[[]]],[11,"nodes","","Nodes correspond to the pre-ordered flattened logical schema",59,[[],["option",4]]],[11,"buffers","","Buffers correspond to the pre-ordered flattened buffer tree",59,[[],["option",4]]],[11,"add_length","","",67,[[]]],[11,"add_nodes","","",67,[[["wipoffset",3],["vector",3]]]],[11,"add_buffers","","",67,[[["wipoffset",3],["vector",3]]]],[11,"new","","",67,[[["flatbufferbuilder",3]],["recordbatchbuilder",3]]],[11,"finish","","",67,[[],[["wipoffset",3],["recordbatch",3]]]],[11,"init_from_table","","",61,[[["table",3]]]],[11,"create","","",61,[[["dictionarybatchargs",3],["flatbufferbuilder",3]],[["dictionarybatch",3],["wipoffset",3]]]],[18,"VT_ID","","",61,null],[18,"VT_DATA","","",61,null],[18,"VT_ISDELTA","","",61,null],[11,"id","","",61,[[]]],[11,"data","","",61,[[],[["option",4],["recordbatch",3]]]],[11,"isDelta","","If isDelta is true the values in the dictionary are to be…",61,[[]]],[11,"add_id","","",68,[[]]],[11,"add_data","","",68,[[["wipoffset",3],["recordbatch",3]]]],[11,"add_isDelta","","",68,[[]]],[11,"new","","",68,[[["flatbufferbuilder",3]],["dictionarybatchbuilder",3]]],[11,"finish","","",68,[[],[["dictionarybatch",3],["wipoffset",3]]]],[11,"init_from_table","","",63,[[["table",3]]]],[11,"create","","",63,[[["messageargs",3],["flatbufferbuilder",3]],[["message",3],["wipoffset",3]]]],[18,"VT_VERSION","","",63,null],[18,"VT_HEADER_TYPE","","",63,null],[18,"VT_HEADER","","",63,null],[18,"VT_BODYLENGTH","","",63,null],[18,"VT_CUSTOM_METADATA","","",63,null],[11,"version","","",63,[[],["metadataversion",4]]],[11,"header_type","","",63,[[],["messageheader",4]]],[11,"header","","",63,[[],[["option",4],["table",3]]]],[11,"bodyLength","","",63,[[]]],[11,"custom_metadata","","",63,[[],[["option",4],["vector",3]]]],[11,"header_as_schema","","",63,[[],[["schema",3],["option",4]]]],[11,"header_as_dictionary_batch","","",63,[[],[["dictionarybatch",3],["option",4]]]],[11,"header_as_record_batch","","",63,[[],[["option",4],["recordbatch",3]]]],[11,"header_as_tensor","","",63,[[],[["option",4],["tensor",3]]]],[11,"header_as_sparse_tensor","","",63,[[],[["option",4],["sparsetensor",3]]]],[11,"add_version","","",69,[[["metadataversion",4]]]],[11,"add_header_type","","",69,[[["messageheader",4]]]],[11,"add_header","","",69,[[["wipoffset",3],["unionwipoffset",3]]]],[11,"add_bodyLength","","",69,[[]]],[11,"add_custom_metadata","","",69,[[["vector",3],["wipoffset",3]]]],[11,"new","","",69,[[["flatbufferbuilder",3]],["messagebuilder",3]]],[11,"finish","","",69,[[],[["message",3],["wipoffset",3]]]],[0,"Schema","polars_arrow_rvsry99dx::ipc::gen","",null,null],[3,"TypeUnionTableOffset","polars_arrow_rvsry99dx::ipc::gen::Schema","",null,null],[3,"Buffer","","…",null,null],[3,"Null","","These are stored in the flatbuffer in the Type union below",null,null],[12,"_tab","","",70,null],[3,"NullArgs","","",null,null],[3,"NullBuilder","","",null,null],[3,"Struct_","","A Struct_ in the flatbuffer metadata is the same as an…",null,null],[12,"_tab","","",71,null],[3,"Struct_Args","","",null,null],[3,"Struct_Builder","","",null,null],[3,"List","","",null,null],[12,"_tab","","",72,null],[3,"ListArgs","","",null,null],[3,"ListBuilder","","",null,null],[3,"LargeList","","Same as List, but with 64-bit offsets, allowing to…",null,null],[12,"_tab","","",73,null],[3,"LargeListArgs","","",null,null],[3,"LargeListBuilder","","",null,null],[3,"FixedSizeList","","",null,null],[12,"_tab","","",74,null],[3,"FixedSizeListArgs","","",null,null],[12,"listSize","","",75,null],[3,"FixedSizeListBuilder","","",null,null],[3,"Map","","A Map is a logical nested type that is represented as",null,null],[12,"_tab","","",76,null],[3,"MapArgs","","",null,null],[12,"keysSorted","","",77,null],[3,"MapBuilder","","",null,null],[3,"Union","","A union is a complex type with children in Field By…",null,null],[12,"_tab","","",78,null],[3,"UnionArgs","","",null,null],[12,"mode","","",79,null],[12,"typeIds","","",79,null],[3,"UnionBuilder","","",null,null],[3,"Int","","",null,null],[12,"_tab","","",80,null],[3,"IntArgs","","",null,null],[12,"bitWidth","","",81,null],[12,"is_signed","","",81,null],[3,"IntBuilder","","",null,null],[3,"FloatingPoint","","",null,null],[12,"_tab","","",82,null],[3,"FloatingPointArgs","","",null,null],[12,"precision","","",83,null],[3,"FloatingPointBuilder","","",null,null],[3,"Utf8","","Unicode with UTF-8 encoding",null,null],[12,"_tab","","",84,null],[3,"Utf8Args","","",null,null],[3,"Utf8Builder","","",null,null],[3,"Binary","","Opaque binary data",null,null],[12,"_tab","","",85,null],[3,"BinaryArgs","","",null,null],[3,"BinaryBuilder","","",null,null],[3,"LargeUtf8","","Same as Utf8, but with 64-bit offsets, allowing to…",null,null],[12,"_tab","","",86,null],[3,"LargeUtf8Args","","",null,null],[3,"LargeUtf8Builder","","",null,null],[3,"LargeBinary","","Same as Binary, but with 64-bit offsets, allowing to…",null,null],[12,"_tab","","",87,null],[3,"LargeBinaryArgs","","",null,null],[3,"LargeBinaryBuilder","","",null,null],[3,"FixedSizeBinary","","",null,null],[12,"_tab","","",88,null],[3,"FixedSizeBinaryArgs","","",null,null],[12,"byteWidth","","",89,null],[3,"FixedSizeBinaryBuilder","","",null,null],[3,"Bool","","",null,null],[12,"_tab","","",90,null],[3,"BoolArgs","","",null,null],[3,"BoolBuilder","","",null,null],[3,"Decimal","","",null,null],[12,"_tab","","",91,null],[3,"DecimalArgs","","",null,null],[12,"precision","","",92,null],[12,"scale","","",92,null],[3,"DecimalBuilder","","",null,null],[3,"Date","","Date is either a 32-bit or 64-bit type representing…",null,null],[12,"_tab","","",93,null],[3,"DateArgs","","",null,null],[12,"unit","","",94,null],[3,"DateBuilder","","",null,null],[3,"Time","","Time type. The physical storage type depends on the unit -…",null,null],[12,"_tab","","",95,null],[3,"TimeArgs","","",null,null],[12,"unit","","",96,null],[12,"bitWidth","","",96,null],[3,"TimeBuilder","","",null,null],[3,"Timestamp","","Time elapsed from the Unix epoch, 00:00:00.000 on 1…",null,null],[12,"_tab","","",97,null],[3,"TimestampArgs","","",null,null],[12,"unit","","",98,null],[12,"timezone","","",98,null],[3,"TimestampBuilder","","",null,null],[3,"Interval","","",null,null],[12,"_tab","","",99,null],[3,"IntervalArgs","","",null,null],[12,"unit","","",100,null],[3,"IntervalBuilder","","",null,null],[3,"Duration","","",null,null],[12,"_tab","","",101,null],[3,"DurationArgs","","",null,null],[12,"unit","","",102,null],[3,"DurationBuilder","","",null,null],[3,"KeyValue","","…",null,null],[12,"_tab","","",103,null],[3,"KeyValueArgs","","",null,null],[12,"key","","",104,null],[12,"value","","",104,null],[3,"KeyValueBuilder","","",null,null],[3,"DictionaryEncoding","","",null,null],[12,"_tab","","",105,null],[3,"DictionaryEncodingArgs","","",null,null],[12,"id","","",106,null],[12,"indexType","","",106,null],[12,"isOrdered","","",106,null],[12,"dictionaryKind","","",106,null],[3,"DictionaryEncodingBuilder","","",null,null],[3,"Field","","…",null,null],[12,"_tab","","",107,null],[3,"FieldArgs","","",null,null],[12,"name","","",108,null],[12,"nullable","","",108,null],[12,"type_type","","",108,null],[12,"type_","","",108,null],[12,"dictionary","","",108,null],[12,"children","","",108,null],[12,"custom_metadata","","",108,null],[3,"FieldBuilder","","",null,null],[3,"Schema","","…",null,null],[12,"_tab","","",109,null],[3,"SchemaArgs","","",null,null],[12,"endianness","","",110,null],[12,"fields","","",110,null],[12,"custom_metadata","","",110,null],[3,"SchemaBuilder","","",null,null],[4,"MetadataVersion","","",null,null],[13,"V1","","0.1.0",111,null],[13,"V2","","0.2.0",111,null],[13,"V3","","0.3.0 -> 0.7.1",111,null],[13,"V4","","= 0.8.0",111,null],[4,"UnionMode","","",null,null],[13,"Sparse","","",112,null],[13,"Dense","","",112,null],[4,"Precision","","",null,null],[13,"HALF","","",113,null],[13,"SINGLE","","",113,null],[13,"DOUBLE","","",113,null],[4,"DateUnit","","",null,null],[13,"DAY","","",114,null],[13,"MILLISECOND","","",114,null],[4,"TimeUnit","","",null,null],[13,"SECOND","","",115,null],[13,"MILLISECOND","","",115,null],[13,"MICROSECOND","","",115,null],[13,"NANOSECOND","","",115,null],[4,"IntervalUnit","","",null,null],[13,"YEAR_MONTH","","",116,null],[13,"DAY_TIME","","",116,null],[4,"Type","","…",null,null],[13,"NONE","","",117,null],[13,"Null","","",117,null],[13,"Int","","",117,null],[13,"FloatingPoint","","",117,null],[13,"Binary","","",117,null],[13,"Utf8","","",117,null],[13,"Bool","","",117,null],[13,"Decimal","","",117,null],[13,"Date","","",117,null],[13,"Time","","",117,null],[13,"Timestamp","","",117,null],[13,"Interval","","",117,null],[13,"List","","",117,null],[13,"Struct_","","",117,null],[13,"Union","","",117,null],[13,"FixedSizeBinary","","",117,null],[13,"FixedSizeList","","",117,null],[13,"Map","","",117,null],[13,"Duration","","",117,null],[13,"LargeBinary","","",117,null],[13,"LargeUtf8","","",117,null],[13,"LargeList","","",117,null],[4,"DictionaryKind","","…",null,null],[13,"DenseArray","","",118,null],[4,"Endianness","","…",null,null],[13,"Little","","",119,null],[13,"Big","","",119,null],[4,"NullOffset","","",null,null],[4,"Struct_Offset","","",null,null],[4,"ListOffset","","",null,null],[4,"LargeListOffset","","",null,null],[4,"FixedSizeListOffset","","",null,null],[4,"MapOffset","","",null,null],[4,"UnionOffset","","",null,null],[4,"IntOffset","","",null,null],[4,"FloatingPointOffset","","",null,null],[4,"Utf8Offset","","",null,null],[4,"BinaryOffset","","",null,null],[4,"LargeUtf8Offset","","",null,null],[4,"LargeBinaryOffset","","",null,null],[4,"FixedSizeBinaryOffset","","",null,null],[4,"BoolOffset","","",null,null],[4,"DecimalOffset","","",null,null],[4,"DateOffset","","",null,null],[4,"TimeOffset","","",null,null],[4,"TimestampOffset","","",null,null],[4,"IntervalOffset","","",null,null],[4,"DurationOffset","","",null,null],[4,"KeyValueOffset","","",null,null],[4,"DictionaryEncodingOffset","","",null,null],[4,"FieldOffset","","",null,null],[4,"SchemaOffset","","",null,null],[5,"enum_name_metadata_version","","",null,[[["metadataversion",4]]]],[5,"enum_name_union_mode","","",null,[[["unionmode",4]]]],[5,"enum_name_precision","","",null,[[["precision",4]]]],[5,"enum_name_date_unit","","",null,[[["dateunit",4]]]],[5,"enum_name_time_unit","","",null,[[["timeunit",4]]]],[5,"enum_name_interval_unit","","",null,[[["intervalunit",4]]]],[5,"enum_name_type","","",null,[[["type",4]]]],[5,"enum_name_dictionary_kind","","",null,[[["dictionarykind",4]]]],[5,"enum_name_endianness","","",null,[[["endianness",4]]]],[5,"get_root_as_schema","","",null,[[],["schema",3]]],[5,"get_size_prefixed_root_as_schema","","",null,[[],["schema",3]]],[5,"finish_schema_buffer","","",null,[[["schema",3],["wipoffset",3],["flatbufferbuilder",3]]]],[5,"finish_size_prefixed_schema_buffer","","",null,[[["schema",3],["wipoffset",3],["flatbufferbuilder",3]]]],[11,"new","","",120,[[]]],[11,"offset","","The relative offset into the shared memory page where the…",120,[[]]],[11,"length","","The absolute length (in bytes) of the memory buffer. The…",120,[[]]],[11,"init_from_table","","",70,[[["table",3]]]],[11,"create","","",70,[[["nullargs",3],["flatbufferbuilder",3]],[["null",3],["wipoffset",3]]]],[11,"new","","",121,[[["flatbufferbuilder",3]],["nullbuilder",3]]],[11,"finish","","",121,[[],[["wipoffset",3],["null",3]]]],[11,"init_from_table","","",71,[[["table",3]]]],[11,"create","","",71,[[["struct_args",3],["flatbufferbuilder",3]],[["struct_",3],["wipoffset",3]]]],[11,"new","","",122,[[["flatbufferbuilder",3]],["struct_builder",3]]],[11,"finish","","",122,[[],[["struct_",3],["wipoffset",3]]]],[11,"init_from_table","","",72,[[["table",3]]]],[11,"create","","",72,[[["listargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["list",3]]]],[11,"new","","",123,[[["flatbufferbuilder",3]],["listbuilder",3]]],[11,"finish","","",123,[[],[["wipoffset",3],["list",3]]]],[11,"init_from_table","","",73,[[["table",3]]]],[11,"create","","",73,[[["largelistargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["largelist",3]]]],[11,"new","","",124,[[["flatbufferbuilder",3]],["largelistbuilder",3]]],[11,"finish","","",124,[[],[["wipoffset",3],["largelist",3]]]],[11,"init_from_table","","",74,[[["table",3]]]],[11,"create","","",74,[[["fixedsizelistargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["fixedsizelist",3]]]],[18,"VT_LISTSIZE","","",74,null],[11,"listSize","","Number of list items per value",74,[[]]],[11,"add_listSize","","",125,[[]]],[11,"new","","",125,[[["flatbufferbuilder",3]],["fixedsizelistbuilder",3]]],[11,"finish","","",125,[[],[["fixedsizelist",3],["wipoffset",3]]]],[11,"init_from_table","","",76,[[["table",3]]]],[11,"create","","",76,[[["mapargs",3],["flatbufferbuilder",3]],[["map",3],["wipoffset",3]]]],[18,"VT_KEYSSORTED","","",76,null],[11,"keysSorted","","Set to true if the keys within each value are sorted",76,[[]]],[11,"add_keysSorted","","",126,[[]]],[11,"new","","",126,[[["flatbufferbuilder",3]],["mapbuilder",3]]],[11,"finish","","",126,[[],[["wipoffset",3],["map",3]]]],[11,"init_from_table","","",78,[[["table",3]]]],[11,"create","","",78,[[["unionargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["union",3]]]],[18,"VT_MODE","","",78,null],[18,"VT_TYPEIDS","","",78,null],[11,"mode","","",78,[[],["unionmode",4]]],[11,"typeIds","","",78,[[],[["vector",3],["option",4]]]],[11,"add_mode","","",127,[[["unionmode",4]]]],[11,"add_typeIds","","",127,[[["wipoffset",3],["vector",3]]]],[11,"new","","",127,[[["flatbufferbuilder",3]],["unionbuilder",3]]],[11,"finish","","",127,[[],[["union",3],["wipoffset",3]]]],[11,"init_from_table","","",80,[[["table",3]]]],[11,"create","","",80,[[["intargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["int",3]]]],[18,"VT_BITWIDTH","","",80,null],[18,"VT_IS_SIGNED","","",80,null],[11,"bitWidth","","",80,[[]]],[11,"is_signed","","",80,[[]]],[11,"add_bitWidth","","",128,[[]]],[11,"add_is_signed","","",128,[[]]],[11,"new","","",128,[[["flatbufferbuilder",3]],["intbuilder",3]]],[11,"finish","","",128,[[],[["wipoffset",3],["int",3]]]],[11,"init_from_table","","",82,[[["table",3]]]],[11,"create","","",82,[[["floatingpointargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["floatingpoint",3]]]],[18,"VT_PRECISION","","",82,null],[11,"precision","","",82,[[],["precision",4]]],[11,"add_precision","","",129,[[["precision",4]]]],[11,"new","","",129,[[["flatbufferbuilder",3]],["floatingpointbuilder",3]]],[11,"finish","","",129,[[],[["wipoffset",3],["floatingpoint",3]]]],[11,"init_from_table","","",84,[[["table",3]]]],[11,"create","","",84,[[["utf8args",3],["flatbufferbuilder",3]],[["utf8",3],["wipoffset",3]]]],[11,"new","","",130,[[["flatbufferbuilder",3]],["utf8builder",3]]],[11,"finish","","",130,[[],[["utf8",3],["wipoffset",3]]]],[11,"init_from_table","","",85,[[["table",3]]]],[11,"create","","",85,[[["binaryargs",3],["flatbufferbuilder",3]],[["binary",3],["wipoffset",3]]]],[11,"new","","",131,[[["flatbufferbuilder",3]],["binarybuilder",3]]],[11,"finish","","",131,[[],[["wipoffset",3],["binary",3]]]],[11,"init_from_table","","",86,[[["table",3]]]],[11,"create","","",86,[[["largeutf8args",3],["flatbufferbuilder",3]],[["wipoffset",3],["largeutf8",3]]]],[11,"new","","",132,[[["flatbufferbuilder",3]],["largeutf8builder",3]]],[11,"finish","","",132,[[],[["wipoffset",3],["largeutf8",3]]]],[11,"init_from_table","","",87,[[["table",3]]]],[11,"create","","",87,[[["largebinaryargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["largebinary",3]]]],[11,"new","","",133,[[["flatbufferbuilder",3]],["largebinarybuilder",3]]],[11,"finish","","",133,[[],[["wipoffset",3],["largebinary",3]]]],[11,"init_from_table","","",88,[[["table",3]]]],[11,"create","","",88,[[["fixedsizebinaryargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["fixedsizebinary",3]]]],[18,"VT_BYTEWIDTH","","",88,null],[11,"byteWidth","","Number of bytes per value",88,[[]]],[11,"add_byteWidth","","",134,[[]]],[11,"new","","",134,[[["flatbufferbuilder",3]],["fixedsizebinarybuilder",3]]],[11,"finish","","",134,[[],[["wipoffset",3],["fixedsizebinary",3]]]],[11,"init_from_table","","",90,[[["table",3]]]],[11,"create","","",90,[[["boolargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["bool",3]]]],[11,"new","","",135,[[["flatbufferbuilder",3]],["boolbuilder",3]]],[11,"finish","","",135,[[],[["wipoffset",3],["bool",3]]]],[11,"init_from_table","","",91,[[["table",3]]]],[11,"create","","",91,[[["decimalargs",3],["flatbufferbuilder",3]],[["decimal",3],["wipoffset",3]]]],[18,"VT_PRECISION","","",91,null],[18,"VT_SCALE","","",91,null],[11,"precision","","Total number of decimal digits",91,[[]]],[11,"scale","","Number of digits after the decimal point \\\".\\\"",91,[[]]],[11,"add_precision","","",136,[[]]],[11,"add_scale","","",136,[[]]],[11,"new","","",136,[[["flatbufferbuilder",3]],["decimalbuilder",3]]],[11,"finish","","",136,[[],[["decimal",3],["wipoffset",3]]]],[11,"init_from_table","","",93,[[["table",3]]]],[11,"create","","",93,[[["dateargs",3],["flatbufferbuilder",3]],[["date",3],["wipoffset",3]]]],[18,"VT_UNIT","","",93,null],[11,"unit","","",93,[[],["dateunit",4]]],[11,"add_unit","","",137,[[["dateunit",4]]]],[11,"new","","",137,[[["flatbufferbuilder",3]],["datebuilder",3]]],[11,"finish","","",137,[[],[["date",3],["wipoffset",3]]]],[11,"init_from_table","","",95,[[["table",3]]]],[11,"create","","",95,[[["timeargs",3],["flatbufferbuilder",3]],[["time",3],["wipoffset",3]]]],[18,"VT_UNIT","","",95,null],[18,"VT_BITWIDTH","","",95,null],[11,"unit","","",95,[[],["timeunit",4]]],[11,"bitWidth","","",95,[[]]],[11,"add_unit","","",138,[[["timeunit",4]]]],[11,"add_bitWidth","","",138,[[]]],[11,"new","","",138,[[["flatbufferbuilder",3]],["timebuilder",3]]],[11,"finish","","",138,[[],[["wipoffset",3],["time",3]]]],[11,"init_from_table","","",97,[[["table",3]]]],[11,"create","","",97,[[["timestampargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["timestamp",3]]]],[18,"VT_UNIT","","",97,null],[18,"VT_TIMEZONE","","",97,null],[11,"unit","","",97,[[],["timeunit",4]]],[11,"timezone","","The time zone is a string indicating the name of a time…",97,[[],["option",4]]],[11,"add_unit","","",139,[[["timeunit",4]]]],[11,"add_timezone","","",139,[[["wipoffset",3]]]],[11,"new","","",139,[[["flatbufferbuilder",3]],["timestampbuilder",3]]],[11,"finish","","",139,[[],[["timestamp",3],["wipoffset",3]]]],[11,"init_from_table","","",99,[[["table",3]]]],[11,"create","","",99,[[["intervalargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["interval",3]]]],[18,"VT_UNIT","","",99,null],[11,"unit","","",99,[[],["intervalunit",4]]],[11,"add_unit","","",140,[[["intervalunit",4]]]],[11,"new","","",140,[[["flatbufferbuilder",3]],["intervalbuilder",3]]],[11,"finish","","",140,[[],[["wipoffset",3],["interval",3]]]],[11,"init_from_table","","",101,[[["table",3]]]],[11,"create","","",101,[[["durationargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["duration",3]]]],[18,"VT_UNIT","","",101,null],[11,"unit","","",101,[[],["timeunit",4]]],[11,"add_unit","","",141,[[["timeunit",4]]]],[11,"new","","",141,[[["flatbufferbuilder",3]],["durationbuilder",3]]],[11,"finish","","",141,[[],[["duration",3],["wipoffset",3]]]],[11,"init_from_table","","",103,[[["table",3]]]],[11,"create","","",103,[[["keyvalueargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["keyvalue",3]]]],[18,"VT_KEY","","",103,null],[18,"VT_VALUE","","",103,null],[11,"key","","",103,[[],["option",4]]],[11,"value","","",103,[[],["option",4]]],[11,"add_key","","",142,[[["wipoffset",3]]]],[11,"add_value","","",142,[[["wipoffset",3]]]],[11,"new","","",142,[[["flatbufferbuilder",3]],["keyvaluebuilder",3]]],[11,"finish","","",142,[[],[["keyvalue",3],["wipoffset",3]]]],[11,"init_from_table","","",105,[[["table",3]]]],[11,"create","","",105,[[["dictionaryencodingargs",3],["flatbufferbuilder",3]],[["dictionaryencoding",3],["wipoffset",3]]]],[18,"VT_ID","","",105,null],[18,"VT_INDEXTYPE","","",105,null],[18,"VT_ISORDERED","","",105,null],[18,"VT_DICTIONARYKIND","","",105,null],[11,"id","","The known dictionary id in the application where this data…",105,[[]]],[11,"indexType","","The dictionary indices are constrained to be positive…",105,[[],[["option",4],["int",3]]]],[11,"isOrdered","","By default, dictionaries are not ordered, or the order…",105,[[]]],[11,"dictionaryKind","","",105,[[],["dictionarykind",4]]],[11,"add_id","","",143,[[]]],[11,"add_indexType","","",143,[[["wipoffset",3],["int",3]]]],[11,"add_isOrdered","","",143,[[]]],[11,"add_dictionaryKind","","",143,[[["dictionarykind",4]]]],[11,"new","","",143,[[["flatbufferbuilder",3]],["dictionaryencodingbuilder",3]]],[11,"finish","","",143,[[],[["wipoffset",3],["dictionaryencoding",3]]]],[11,"init_from_table","","",107,[[["table",3]]]],[11,"create","","",107,[[["fieldargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["field",3]]]],[18,"VT_NAME","","",107,null],[18,"VT_NULLABLE","","",107,null],[18,"VT_TYPE_TYPE","","",107,null],[18,"VT_TYPE_","","",107,null],[18,"VT_DICTIONARY","","",107,null],[18,"VT_CHILDREN","","",107,null],[18,"VT_CUSTOM_METADATA","","",107,null],[11,"name","","Name is not required, in i.e. a List",107,[[],["option",4]]],[11,"nullable","","Whether or not this field can contain nulls. Should be…",107,[[]]],[11,"type_type","","",107,[[],["type",4]]],[11,"type_","","This is the type of the decoded value if the field is…",107,[[],[["option",4],["table",3]]]],[11,"dictionary","","Present only if the field is dictionary encoded.",107,[[],[["option",4],["dictionaryencoding",3]]]],[11,"children","","children apply only to nested data types like Struct, List…",107,[[],[["option",4],["vector",3]]]],[11,"custom_metadata","","User-defined metadata",107,[[],[["option",4],["vector",3]]]],[11,"type_as_null","","",107,[[],[["null",3],["option",4]]]],[11,"type_as_int","","",107,[[],[["option",4],["int",3]]]],[11,"type_as_floating_point","","",107,[[],[["floatingpoint",3],["option",4]]]],[11,"type_as_binary","","",107,[[],[["option",4],["binary",3]]]],[11,"type_as_utf_8","","",107,[[],[["utf8",3],["option",4]]]],[11,"type_as_bool","","",107,[[],[["bool",3],["option",4]]]],[11,"type_as_decimal","","",107,[[],[["decimal",3],["option",4]]]],[11,"type_as_date","","",107,[[],[["option",4],["date",3]]]],[11,"type_as_time","","",107,[[],[["time",3],["option",4]]]],[11,"type_as_timestamp","","",107,[[],[["option",4],["timestamp",3]]]],[11,"type_as_interval","","",107,[[],[["option",4],["interval",3]]]],[11,"type_as_list","","",107,[[],[["option",4],["list",3]]]],[11,"type_as_struct_","","",107,[[],[["option",4],["struct_",3]]]],[11,"type_as_union","","",107,[[],[["union",3],["option",4]]]],[11,"type_as_fixed_size_binary","","",107,[[],[["option",4],["fixedsizebinary",3]]]],[11,"type_as_fixed_size_list","","",107,[[],[["option",4],["fixedsizelist",3]]]],[11,"type_as_map","","",107,[[],[["map",3],["option",4]]]],[11,"type_as_duration","","",107,[[],[["option",4],["duration",3]]]],[11,"type_as_large_binary","","",107,[[],[["option",4],["largebinary",3]]]],[11,"type_as_large_utf_8","","",107,[[],[["largeutf8",3],["option",4]]]],[11,"type_as_large_list","","",107,[[],[["largelist",3],["option",4]]]],[11,"add_name","","",144,[[["wipoffset",3]]]],[11,"add_nullable","","",144,[[]]],[11,"add_type_type","","",144,[[["type",4]]]],[11,"add_type_","","",144,[[["wipoffset",3],["unionwipoffset",3]]]],[11,"add_dictionary","","",144,[[["wipoffset",3],["dictionaryencoding",3]]]],[11,"add_children","","",144,[[["vector",3],["wipoffset",3]]]],[11,"add_custom_metadata","","",144,[[["vector",3],["wipoffset",3]]]],[11,"new","","",144,[[["flatbufferbuilder",3]],["fieldbuilder",3]]],[11,"finish","","",144,[[],[["field",3],["wipoffset",3]]]],[11,"init_from_table","","",109,[[["table",3]]]],[11,"create","","",109,[[["schemaargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["schema",3]]]],[18,"VT_ENDIANNESS","","",109,null],[18,"VT_FIELDS","","",109,null],[18,"VT_CUSTOM_METADATA","","",109,null],[11,"endianness","","endianness of the buffer it is Little Endian by default if…",109,[[],["endianness",4]]],[11,"fields","","",109,[[],[["option",4],["vector",3]]]],[11,"custom_metadata","","",109,[[],[["option",4],["vector",3]]]],[11,"add_endianness","","",145,[[["endianness",4]]]],[11,"add_fields","","",145,[[["vector",3],["wipoffset",3]]]],[11,"add_custom_metadata","","",145,[[["vector",3],["wipoffset",3]]]],[11,"new","","",145,[[["flatbufferbuilder",3]],["schemabuilder",3]]],[11,"finish","","",145,[[],[["schema",3],["wipoffset",3]]]],[0,"SparseTensor","polars_arrow_rvsry99dx::ipc::gen","",null,null],[3,"SparseTensorIndexUnionTableOffset","polars_arrow_rvsry99dx::ipc::gen::SparseTensor","",null,null],[3,"SparseTensorIndexCOO","","…",null,null],[12,"_tab","","",146,null],[3,"SparseTensorIndexCOOArgs","","",null,null],[12,"indicesType","","",147,null],[12,"indicesStrides","","",147,null],[12,"indicesBuffer","","",147,null],[3,"SparseTensorIndexCOOBuilder","","",null,null],[3,"SparseMatrixIndexCSX","","Compressed Sparse format, that is matrix-specific.",null,null],[12,"_tab","","",148,null],[3,"SparseMatrixIndexCSXArgs","","",null,null],[12,"compressedAxis","","",149,null],[12,"indptrType","","",149,null],[12,"indptrBuffer","","",149,null],[12,"indicesType","","",149,null],[12,"indicesBuffer","","",149,null],[3,"SparseMatrixIndexCSXBuilder","","",null,null],[3,"SparseTensor","","",null,null],[12,"_tab","","",150,null],[3,"SparseTensorArgs","","",null,null],[12,"type_type","","",151,null],[12,"type_","","",151,null],[12,"shape","","",151,null],[12,"non_zero_length","","",151,null],[12,"sparseIndex_type","","",151,null],[12,"sparseIndex","","",151,null],[12,"data","","",151,null],[3,"SparseTensorBuilder","","",null,null],[4,"SparseMatrixCompressedAxis","","",null,null],[13,"Row","","",152,null],[13,"Column","","",152,null],[4,"SparseTensorIndex","","",null,null],[13,"NONE","","",153,null],[13,"SparseTensorIndexCOO","","",153,null],[13,"SparseMatrixIndexCSX","","",153,null],[4,"SparseTensorIndexCOOOffset","","",null,null],[4,"SparseMatrixIndexCSXOffset","","",null,null],[4,"SparseTensorOffset","","",null,null],[5,"enum_name_sparse_matrix_compressed_axis","","",null,[[["sparsematrixcompressedaxis",4]]]],[5,"enum_name_sparse_tensor_index","","",null,[[["sparsetensorindex",4]]]],[5,"get_root_as_sparse_tensor","","",null,[[],["sparsetensor",3]]],[5,"get_size_prefixed_root_as_sparse_tensor","","",null,[[],["sparsetensor",3]]],[5,"finish_sparse_tensor_buffer","","",null,[[["sparsetensor",3],["wipoffset",3],["flatbufferbuilder",3]]]],[5,"finish_size_prefixed_sparse_tensor_buffer","","",null,[[["sparsetensor",3],["wipoffset",3],["flatbufferbuilder",3]]]],[11,"init_from_table","","",146,[[["table",3]]]],[11,"create","","",146,[[["sparsetensorindexcooargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["sparsetensorindexcoo",3]]]],[18,"VT_INDICESTYPE","","",146,null],[18,"VT_INDICESSTRIDES","","",146,null],[18,"VT_INDICESBUFFER","","",146,null],[11,"indicesType","","The type of values in indicesBuffer",146,[[],[["option",4],["int",3]]]],[11,"indicesStrides","","Non-negative byte offsets to advance one value cell along…",146,[[],[["option",4],["vector",3]]]],[11,"indicesBuffer","","The location and size of the indices matrix\'s data",146,[[],[["option",4],["buffer",3]]]],[11,"add_indicesType","","",154,[[["wipoffset",3],["int",3]]]],[11,"add_indicesStrides","","",154,[[["wipoffset",3],["vector",3]]]],[11,"add_indicesBuffer","","",154,[[["buffer",3]]]],[11,"new","","",154,[[["flatbufferbuilder",3]],["sparsetensorindexcoobuilder",3]]],[11,"finish","","",154,[[],[["sparsetensorindexcoo",3],["wipoffset",3]]]],[11,"init_from_table","","",148,[[["table",3]]]],[11,"create","","",148,[[["sparsematrixindexcsxargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["sparsematrixindexcsx",3]]]],[18,"VT_COMPRESSEDAXIS","","",148,null],[18,"VT_INDPTRTYPE","","",148,null],[18,"VT_INDPTRBUFFER","","",148,null],[18,"VT_INDICESTYPE","","",148,null],[18,"VT_INDICESBUFFER","","",148,null],[11,"compressedAxis","","Which axis, row or column, is compressed",148,[[],["sparsematrixcompressedaxis",4]]],[11,"indptrType","","The type of values in indptrBuffer",148,[[],[["option",4],["int",3]]]],[11,"indptrBuffer","","indptrBuffer stores the location and size of indptr array…",148,[[],[["option",4],["buffer",3]]]],[11,"indicesType","","The type of values in indicesBuffer",148,[[],[["option",4],["int",3]]]],[11,"indicesBuffer","","indicesBuffer stores the location and size of the array…",148,[[],[["option",4],["buffer",3]]]],[11,"add_compressedAxis","","",155,[[["sparsematrixcompressedaxis",4]]]],[11,"add_indptrType","","",155,[[["wipoffset",3],["int",3]]]],[11,"add_indptrBuffer","","",155,[[["buffer",3]]]],[11,"add_indicesType","","",155,[[["wipoffset",3],["int",3]]]],[11,"add_indicesBuffer","","",155,[[["buffer",3]]]],[11,"new","","",155,[[["flatbufferbuilder",3]],["sparsematrixindexcsxbuilder",3]]],[11,"finish","","",155,[[],[["wipoffset",3],["sparsematrixindexcsx",3]]]],[11,"init_from_table","","",150,[[["table",3]]]],[11,"create","","",150,[[["sparsetensorargs",3],["flatbufferbuilder",3]],[["sparsetensor",3],["wipoffset",3]]]],[18,"VT_TYPE_TYPE","","",150,null],[18,"VT_TYPE_","","",150,null],[18,"VT_SHAPE","","",150,null],[18,"VT_NON_ZERO_LENGTH","","",150,null],[18,"VT_SPARSEINDEX_TYPE","","",150,null],[18,"VT_SPARSEINDEX","","",150,null],[18,"VT_DATA","","",150,null],[11,"type_type","","",150,[[],["type",4]]],[11,"type_","","The type of data contained in a value cell. Currently only…",150,[[],[["option",4],["table",3]]]],[11,"shape","","The dimensions of the tensor, optionally named.",150,[[],[["vector",3],["option",4]]]],[11,"non_zero_length","","The number of non-zero values in a sparse tensor.",150,[[]]],[11,"sparseIndex_type","","",150,[[],["sparsetensorindex",4]]],[11,"sparseIndex","","Sparse tensor index",150,[[],[["option",4],["table",3]]]],[11,"data","","The location and size of the tensor\'s data",150,[[],[["option",4],["buffer",3]]]],[11,"type_as_null","","",150,[[],[["null",3],["option",4]]]],[11,"type_as_int","","",150,[[],[["option",4],["int",3]]]],[11,"type_as_floating_point","","",150,[[],[["floatingpoint",3],["option",4]]]],[11,"type_as_binary","","",150,[[],[["option",4],["binary",3]]]],[11,"type_as_utf_8","","",150,[[],[["utf8",3],["option",4]]]],[11,"type_as_bool","","",150,[[],[["bool",3],["option",4]]]],[11,"type_as_decimal","","",150,[[],[["decimal",3],["option",4]]]],[11,"type_as_date","","",150,[[],[["option",4],["date",3]]]],[11,"type_as_time","","",150,[[],[["time",3],["option",4]]]],[11,"type_as_timestamp","","",150,[[],[["option",4],["timestamp",3]]]],[11,"type_as_interval","","",150,[[],[["option",4],["interval",3]]]],[11,"type_as_list","","",150,[[],[["option",4],["list",3]]]],[11,"type_as_struct_","","",150,[[],[["option",4],["struct_",3]]]],[11,"type_as_union","","",150,[[],[["union",3],["option",4]]]],[11,"type_as_fixed_size_binary","","",150,[[],[["option",4],["fixedsizebinary",3]]]],[11,"type_as_fixed_size_list","","",150,[[],[["option",4],["fixedsizelist",3]]]],[11,"type_as_map","","",150,[[],[["map",3],["option",4]]]],[11,"type_as_duration","","",150,[[],[["option",4],["duration",3]]]],[11,"type_as_large_binary","","",150,[[],[["option",4],["largebinary",3]]]],[11,"type_as_large_utf_8","","",150,[[],[["largeutf8",3],["option",4]]]],[11,"type_as_large_list","","",150,[[],[["largelist",3],["option",4]]]],[11,"sparseIndex_as_sparse_tensor_index_coo","","",150,[[],[["option",4],["sparsetensorindexcoo",3]]]],[11,"sparseIndex_as_sparse_matrix_index_csx","","",150,[[],[["option",4],["sparsematrixindexcsx",3]]]],[11,"add_type_type","","",156,[[["type",4]]]],[11,"add_type_","","",156,[[["wipoffset",3],["unionwipoffset",3]]]],[11,"add_shape","","",156,[[["vector",3],["wipoffset",3]]]],[11,"add_non_zero_length","","",156,[[]]],[11,"add_sparseIndex_type","","",156,[[["sparsetensorindex",4]]]],[11,"add_sparseIndex","","",156,[[["wipoffset",3],["unionwipoffset",3]]]],[11,"add_data","","",156,[[["buffer",3]]]],[11,"new","","",156,[[["flatbufferbuilder",3]],["sparsetensorbuilder",3]]],[11,"finish","","",156,[[],[["sparsetensor",3],["wipoffset",3]]]],[0,"Tensor","polars_arrow_rvsry99dx::ipc::gen","",null,null],[3,"TensorDim","polars_arrow_rvsry99dx::ipc::gen::Tensor","…",null,null],[12,"_tab","","",157,null],[3,"TensorDimArgs","","",null,null],[12,"size_","","",158,null],[12,"name","","",158,null],[3,"TensorDimBuilder","","",null,null],[3,"Tensor","","",null,null],[12,"_tab","","",159,null],[3,"TensorArgs","","",null,null],[12,"type_type","","",160,null],[12,"type_","","",160,null],[12,"shape","","",160,null],[12,"strides","","",160,null],[12,"data","","",160,null],[3,"TensorBuilder","","",null,null],[4,"TensorDimOffset","","",null,null],[4,"TensorOffset","","",null,null],[5,"get_root_as_tensor","","",null,[[],["tensor",3]]],[5,"get_size_prefixed_root_as_tensor","","",null,[[],["tensor",3]]],[5,"finish_tensor_buffer","","",null,[[["wipoffset",3],["tensor",3],["flatbufferbuilder",3]]]],[5,"finish_size_prefixed_tensor_buffer","","",null,[[["wipoffset",3],["tensor",3],["flatbufferbuilder",3]]]],[11,"init_from_table","","",157,[[["table",3]]]],[11,"create","","",157,[[["tensordimargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["tensordim",3]]]],[18,"VT_SIZE_","","",157,null],[18,"VT_NAME","","",157,null],[11,"size_","","Length of dimension",157,[[]]],[11,"name","","Name of the dimension, optional",157,[[],["option",4]]],[11,"add_size_","","",161,[[]]],[11,"add_name","","",161,[[["wipoffset",3]]]],[11,"new","","",161,[[["flatbufferbuilder",3]],["tensordimbuilder",3]]],[11,"finish","","",161,[[],[["wipoffset",3],["tensordim",3]]]],[11,"init_from_table","","",159,[[["table",3]]]],[11,"create","","",159,[[["tensorargs",3],["flatbufferbuilder",3]],[["wipoffset",3],["tensor",3]]]],[18,"VT_TYPE_TYPE","","",159,null],[18,"VT_TYPE_","","",159,null],[18,"VT_SHAPE","","",159,null],[18,"VT_STRIDES","","",159,null],[18,"VT_DATA","","",159,null],[11,"type_type","","",159,[[],["type",4]]],[11,"type_","","The type of data contained in a value cell. Currently only…",159,[[],[["option",4],["table",3]]]],[11,"shape","","The dimensions of the tensor, optionally named",159,[[],[["vector",3],["option",4]]]],[11,"strides","","Non-negative byte offsets to advance one value cell along…",159,[[],[["option",4],["vector",3]]]],[11,"data","","The location and size of the tensor\'s data",159,[[],[["option",4],["buffer",3]]]],[11,"type_as_null","","",159,[[],[["null",3],["option",4]]]],[11,"type_as_int","","",159,[[],[["option",4],["int",3]]]],[11,"type_as_floating_point","","",159,[[],[["floatingpoint",3],["option",4]]]],[11,"type_as_binary","","",159,[[],[["option",4],["binary",3]]]],[11,"type_as_utf_8","","",159,[[],[["utf8",3],["option",4]]]],[11,"type_as_bool","","",159,[[],[["bool",3],["option",4]]]],[11,"type_as_decimal","","",159,[[],[["decimal",3],["option",4]]]],[11,"type_as_date","","",159,[[],[["option",4],["date",3]]]],[11,"type_as_time","","",159,[[],[["time",3],["option",4]]]],[11,"type_as_timestamp","","",159,[[],[["option",4],["timestamp",3]]]],[11,"type_as_interval","","",159,[[],[["option",4],["interval",3]]]],[11,"type_as_list","","",159,[[],[["option",4],["list",3]]]],[11,"type_as_struct_","","",159,[[],[["option",4],["struct_",3]]]],[11,"type_as_union","","",159,[[],[["union",3],["option",4]]]],[11,"type_as_fixed_size_binary","","",159,[[],[["option",4],["fixedsizebinary",3]]]],[11,"type_as_fixed_size_list","","",159,[[],[["option",4],["fixedsizelist",3]]]],[11,"type_as_map","","",159,[[],[["map",3],["option",4]]]],[11,"type_as_duration","","",159,[[],[["option",4],["duration",3]]]],[11,"type_as_large_binary","","",159,[[],[["option",4],["largebinary",3]]]],[11,"type_as_large_utf_8","","",159,[[],[["largeutf8",3],["option",4]]]],[11,"type_as_large_list","","",159,[[],[["largelist",3],["option",4]]]],[11,"add_type_type","","",162,[[["type",4]]]],[11,"add_type_","","",162,[[["wipoffset",3],["unionwipoffset",3]]]],[11,"add_shape","","",162,[[["vector",3],["wipoffset",3]]]],[11,"add_strides","","",162,[[["wipoffset",3],["vector",3]]]],[11,"add_data","","",162,[[["buffer",3]]]],[11,"new","","",162,[[["flatbufferbuilder",3]],["tensorbuilder",3]]],[11,"finish","","",162,[[],[["wipoffset",3],["tensor",3]]]],[0,"json","polars_arrow_rvsry99dx","Transfer data between the Arrow memory format and JSON…",null,null],[0,"reader","polars_arrow_rvsry99dx::json","JSON Reader",null,null],[3,"Reader","polars_arrow_rvsry99dx::json::reader","JSON file reader",null,null],[3,"ReaderBuilder","","JSON file reader builder",null,null],[5,"infer_json_schema_from_seekable","","Infer the fields of a JSON file by reading the first n…",null,[[["bufreader",3],["option",4]],[["arc",3],["result",6]]]],[5,"infer_json_schema","","Infer the fields of a JSON file by reading the first n…",null,[[["bufreader",3],["option",4]],[["arc",3],["result",6]]]],[11,"new","","Create a new JSON Reader from any value that implements…",163,[[["arc",3],["option",4],["vec",3],["schema",3]]]],[11,"schema","","Returns the schema of the reader, useful for getting the…",163,[[],[["arc",3],["schema",3]]]],[11,"from_buf_reader","","Create a new JSON Reader from a `BufReader<R: Read>`",163,[[["arc",3],["option",4],["vec",3],["schema",3],["bufreader",3]]]],[11,"next","","Read the next batch of records",163,[[],[["result",6],["option",4]]]],[11,"new","","Create a new builder for configuring JSON parsing options.",164,[[]]],[11,"with_schema","","Set the JSON file\'s schema",164,[[["arc",3],["schema",3]]]],[11,"infer_schema","","Set the JSON reader to infer the schema of the file",164,[[["option",4]]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)",164,[[]]],[11,"with_projection","","Set the reader\'s column projection",164,[[["vec",3],["string",3]]]],[11,"build","","Create a new `Reader` from the `ReaderBuilder`",164,[[["read",8],["seek",8]],[["result",6],["reader",3]]]],[0,"memory","polars_arrow_rvsry99dx","Defines memory-related functions, such as…",null,null],[5,"allocate_aligned","polars_arrow_rvsry99dx::memory","",null,[[]]],[5,"free_aligned","","",null,[[]]],[5,"reallocate","","",null,[[]]],[5,"memcpy","","",null,[[]]],[5,"is_aligned","","Check if the pointer `p` is aligned to offset `a`.",null,[[]]],[5,"is_ptr_aligned","","",null,[[]]],[5,"memcmp","","",null,null],[17,"ALIGNMENT","","Cache and allocation multiple alignment size",null,null],[0,"record_batch","polars_arrow_rvsry99dx","A two-dimensional batch of column-oriented data with a…",null,null],[3,"RecordBatch","polars_arrow_rvsry99dx::record_batch","A two-dimensional batch of column-oriented data with a…",null,null],[8,"RecordBatchReader","","Definition of record batch reader.",null,null],[10,"schema","","Returns schemas of this record batch reader.…",165,[[],["schemaref",6]]],[10,"next_batch","","Returns next record batch.",165,[[],[["result",6],["option",4]]]],[11,"try_new","","Creates a `RecordBatch` from a schema and columns.",166,[[["arc",3],["schema",3],["arrayref",6],["vec",3]],["result",6]]],[11,"schema","","Returns the `Schema` of the record batch.",166,[[],["arc",3]]],[11,"num_columns","","Returns the number of columns in the record batch.",166,[[]]],[11,"num_rows","","Returns the number of rows in each column.",166,[[]]],[11,"column","","Get a reference to a column\'s array by index.",166,[[],["arrayref",6]]],[11,"columns","","Get a reference to all columns in the record batch.",166,[[]]],[0,"tensor","polars_arrow_rvsry99dx","Arrow Tensor Type, defined in `format/Tensor.fbs`.",null,null],[3,"Tensor","polars_arrow_rvsry99dx::tensor","Tensor of primitive types",null,null],[6,"BooleanTensor","","",null,null],[6,"Int8Tensor","","",null,null],[6,"Int16Tensor","","",null,null],[6,"Int32Tensor","","",null,null],[6,"Int64Tensor","","",null,null],[6,"UInt8Tensor","","",null,null],[6,"UInt16Tensor","","",null,null],[6,"UInt32Tensor","","",null,null],[6,"UInt64Tensor","","",null,null],[6,"Float32Tensor","","",null,null],[6,"Float64Tensor","","",null,null],[11,"new","","Creates a new `Tensor`",167,[[["buffer",3],["option",4],["vec",3],["vec",3],["option",4]]]],[11,"new_row_major","","Creates a new Tensor using row major memory layout",167,[[["buffer",3],["option",4],["vec",3],["vec",3],["option",4]]]],[11,"new_column_major","","Creates a new Tensor using column major memory layout",167,[[["buffer",3],["option",4],["vec",3],["vec",3],["option",4]]]],[11,"data_type","","The data type of the `Tensor`",167,[[],["datatype",4]]],[11,"shape","","The sizes of the dimensions",167,[[],[["option",4],["vec",3]]]],[11,"data","","Returns a reference to the underlying `Buffer`",167,[[],["buffer",3]]],[11,"strides","","The number of bytes between elements in each dimension",167,[[],[["option",4],["vec",3]]]],[11,"names","","The names of the dimensions",167,[[],[["option",4],["vec",3]]]],[11,"ndim","","The number of dimensions",167,[[]]],[11,"dim_name","","The name of dimension i",167,[[],["option",4]]],[11,"size","","The total number of elements in the `Tensor`",167,[[]]],[11,"is_contiguous","","Indicates if the data is laid out contiguously in memory",167,[[]]],[11,"is_row_major","","Indicates if the memory layout row major",167,[[]]],[11,"is_column_major","","Indicates if the memory layout column major",167,[[]]],[0,"util","polars_arrow_rvsry99dx","",null,null],[0,"bit_util","polars_arrow_rvsry99dx::util","Utils for working with bits",null,null],[5,"round_upto_multiple_of_64","polars_arrow_rvsry99dx::util::bit_util","Returns the nearest number that is `>=` than `num` and is…",null,[[]]],[5,"get_bit","","Returns whether bit at position `i` in `data` is set or not",null,[[]]],[5,"get_bit_raw","","Returns whether bit at position `i` in `data` is set or not.",null,[[]]],[5,"set_bit","","Sets bit at position `i` for `data`",null,[[]]],[5,"set_bit_raw","","Sets bit at position `i` for `data`",null,[[]]],[5,"set_bits_raw","","Sets bits in the non-inclusive range `start..end` for `data`",null,[[]]],[5,"count_set_bits","","Returns the number of 1-bits in `data`",null,[[]]],[5,"count_set_bits_offset","","Returns the number of 1-bits in `data`, starting from…",null,[[]]],[5,"ceil","","Returns the ceil of `value`/`divisor`",null,[[]]],[0,"integration_util","polars_arrow_rvsry99dx::util","Utils for JSON integration testing",null,null],[3,"ArrowJson","polars_arrow_rvsry99dx::util::integration_util","A struct that represents an Arrow file with a schema and…",null,null],[12,"schema","","",168,null],[12,"batches","","",168,null],[12,"dictionaries","","",168,null],[3,"ArrowJsonSchema","","A struct that partially reads the Arrow JSON schema.",null,null],[12,"fields","","",169,null],[3,"ArrowJsonBatch","","A struct that partially reads the Arrow JSON record batch",null,null],[12,"columns","","",170,null],[3,"ArrowJsonDictionaryBatch","","A struct that partially reads the Arrow JSON dictionary…",null,null],[3,"ArrowJsonColumn","","A struct that partially reads the Arrow JSON column/array",null,null],[12,"count","","",171,null],[12,"validity","","",171,null],[12,"data","","",171,null],[12,"offset","","",171,null],[12,"children","","",171,null],[11,"equals_reader","","Compare the Arrow JSON with a record batch reader",168,[[["recordbatchreader",8]]]],[11,"from_batch","","",170,[[["recordbatch",3]],["arrowjsonbatch",3]]],[0,"pretty","polars_arrow_rvsry99dx::util","Utilities for printing record batches",null,null],[5,"pretty_format_batches","polars_arrow_rvsry99dx::util::pretty","Create a visual representation of record batches",null,[[],[["string",3],["result",6]]]],[5,"print_batches","","Prints a visual representation of record batches to stdout",null,[[],["result",6]]],[0,"string_writer","polars_arrow_rvsry99dx::util","String Writer This string writer encapsulates…",null,null],[3,"StringWriter","polars_arrow_rvsry99dx::util::string_writer","",null,null],[11,"new","","",172,[[]]],[0,"test_util","polars_arrow_rvsry99dx::util","Utils to make testing easier",null,null],[5,"random_bytes","polars_arrow_rvsry99dx::util::test_util","Returns a vector of size `n`, filled with randomly…",null,[[],["vec",3]]],[5,"get_temp_file","","Returns file handle for a temp file in \'target\' directory…",null,[[],["file",3]]],[11,"from","polars_arrow_rvsry99dx::array","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from_cast","","",17,[[]]],[11,"cast","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from_cast","","",18,[[]]],[11,"cast","","",18,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from_cast","","",3,[[]]],[11,"cast","","",3,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from_cast","","",7,[[]]],[11,"cast","","",7,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from_cast","","",5,[[]]],[11,"cast","","",5,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from_cast","","",2,[[]]],[11,"cast","","",2,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from_cast","","",1,[[]]],[11,"cast","","",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from_cast","","",0,[[]]],[11,"cast","","",0,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from_cast","","",4,[[]]],[11,"cast","","",4,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from_cast","","",6,[[]]],[11,"cast","","",6,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from_cast","","",19,[[]]],[11,"cast","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from_cast","","",20,[[]]],[11,"cast","","",20,[[]]],[11,"from","","",173,[[]]],[11,"into","","",173,[[]]],[11,"try_from","","",173,[[],["result",4]]],[11,"try_into","","",173,[[],["result",4]]],[11,"borrow","","",173,[[]]],[11,"borrow_mut","","",173,[[]]],[11,"type_id","","",173,[[],["typeid",3]]],[11,"vzip","","",173,[[]]],[11,"from_cast","","",173,[[]]],[11,"cast","","",173,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from_cast","","",11,[[]]],[11,"cast","","",11,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from_cast","","",13,[[]]],[11,"cast","","",13,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from_cast","","",10,[[]]],[11,"cast","","",10,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from_cast","","",9,[[]]],[11,"cast","","",9,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from_cast","","",8,[[]]],[11,"cast","","",8,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from_cast","","",15,[[]]],[11,"cast","","",15,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from_cast","","",12,[[]]],[11,"cast","","",12,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from_cast","","",16,[[]]],[11,"cast","","",16,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from_cast","","",14,[[]]],[11,"cast","","",14,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from_cast","","",21,[[]]],[11,"cast","","",21,[[]]],[11,"from","polars_arrow_rvsry99dx::bitmap","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from_cast","","",30,[[]]],[11,"cast","","",30,[[]]],[11,"from","polars_arrow_rvsry99dx::buffer","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from_cast","","",31,[[]]],[11,"cast","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"from_cast","","",32,[[]]],[11,"cast","","",32,[[]]],[11,"from","polars_arrow_rvsry99dx::compute::kernels::sort","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from_cast","","",33,[[]]],[11,"cast","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"from_cast","","",34,[[]]],[11,"cast","","",34,[[]]],[11,"from","polars_arrow_rvsry99dx::compute::kernels::take","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"from_cast","","",35,[[]]],[11,"cast","","",35,[[]]],[11,"from","polars_arrow_rvsry99dx::csv::reader","",36,[[]]],[11,"into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from_cast","","",36,[[]]],[11,"cast","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"from_cast","","",37,[[]]],[11,"cast","","",37,[[]]],[11,"from","polars_arrow_rvsry99dx::csv::writer","",38,[[]]],[11,"into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"from_cast","","",38,[[]]],[11,"cast","","",38,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from_cast","","",39,[[]]],[11,"cast","","",39,[[]]],[11,"from","polars_arrow_rvsry99dx::datatypes","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"to_string","","",48,[[],["string",3]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"equivalent","","",48,[[]]],[11,"vzip","","",48,[[]]],[11,"from_cast","","",48,[[]]],[11,"cast","","",48,[[]]],[11,"from","","",174,[[]]],[11,"into","","",174,[[]]],[11,"try_from","","",174,[[],["result",4]]],[11,"try_into","","",174,[[],["result",4]]],[11,"borrow","","",174,[[]]],[11,"borrow_mut","","",174,[[]]],[11,"type_id","","",174,[[],["typeid",3]]],[11,"vzip","","",174,[[]]],[11,"from_cast","","",174,[[]]],[11,"cast","","",174,[[]]],[11,"from","","",175,[[]]],[11,"into","","",175,[[]]],[11,"try_from","","",175,[[],["result",4]]],[11,"try_into","","",175,[[],["result",4]]],[11,"borrow","","",175,[[]]],[11,"borrow_mut","","",175,[[]]],[11,"type_id","","",175,[[],["typeid",3]]],[11,"vzip","","",175,[[]]],[11,"from_cast","","",175,[[]]],[11,"cast","","",175,[[]]],[11,"from","","",176,[[]]],[11,"into","","",176,[[]]],[11,"try_from","","",176,[[],["result",4]]],[11,"try_into","","",176,[[],["result",4]]],[11,"borrow","","",176,[[]]],[11,"borrow_mut","","",176,[[]]],[11,"type_id","","",176,[[],["typeid",3]]],[11,"vzip","","",176,[[]]],[11,"from_cast","","",176,[[]]],[11,"cast","","",176,[[]]],[11,"from","","",177,[[]]],[11,"into","","",177,[[]]],[11,"try_from","","",177,[[],["result",4]]],[11,"try_into","","",177,[[],["result",4]]],[11,"borrow","","",177,[[]]],[11,"borrow_mut","","",177,[[]]],[11,"type_id","","",177,[[],["typeid",3]]],[11,"vzip","","",177,[[]]],[11,"from_cast","","",177,[[]]],[11,"cast","","",177,[[]]],[11,"from","","",178,[[]]],[11,"into","","",178,[[]]],[11,"try_from","","",178,[[],["result",4]]],[11,"try_into","","",178,[[],["result",4]]],[11,"borrow","","",178,[[]]],[11,"borrow_mut","","",178,[[]]],[11,"type_id","","",178,[[],["typeid",3]]],[11,"vzip","","",178,[[]]],[11,"from_cast","","",178,[[]]],[11,"cast","","",178,[[]]],[11,"from","","",179,[[]]],[11,"into","","",179,[[]]],[11,"try_from","","",179,[[],["result",4]]],[11,"try_into","","",179,[[],["result",4]]],[11,"borrow","","",179,[[]]],[11,"borrow_mut","","",179,[[]]],[11,"type_id","","",179,[[],["typeid",3]]],[11,"vzip","","",179,[[]]],[11,"from_cast","","",179,[[]]],[11,"cast","","",179,[[]]],[11,"from","","",180,[[]]],[11,"into","","",180,[[]]],[11,"try_from","","",180,[[],["result",4]]],[11,"try_into","","",180,[[],["result",4]]],[11,"borrow","","",180,[[]]],[11,"borrow_mut","","",180,[[]]],[11,"type_id","","",180,[[],["typeid",3]]],[11,"vzip","","",180,[[]]],[11,"from_cast","","",180,[[]]],[11,"cast","","",180,[[]]],[11,"from","","",181,[[]]],[11,"into","","",181,[[]]],[11,"try_from","","",181,[[],["result",4]]],[11,"try_into","","",181,[[],["result",4]]],[11,"borrow","","",181,[[]]],[11,"borrow_mut","","",181,[[]]],[11,"type_id","","",181,[[],["typeid",3]]],[11,"vzip","","",181,[[]]],[11,"from_cast","","",181,[[]]],[11,"cast","","",181,[[]]],[11,"from","","",182,[[]]],[11,"into","","",182,[[]]],[11,"try_from","","",182,[[],["result",4]]],[11,"try_into","","",182,[[],["result",4]]],[11,"borrow","","",182,[[]]],[11,"borrow_mut","","",182,[[]]],[11,"type_id","","",182,[[],["typeid",3]]],[11,"vzip","","",182,[[]]],[11,"from_cast","","",182,[[]]],[11,"cast","","",182,[[]]],[11,"from","","",183,[[]]],[11,"into","","",183,[[]]],[11,"try_from","","",183,[[],["result",4]]],[11,"try_into","","",183,[[],["result",4]]],[11,"borrow","","",183,[[]]],[11,"borrow_mut","","",183,[[]]],[11,"type_id","","",183,[[],["typeid",3]]],[11,"vzip","","",183,[[]]],[11,"from_cast","","",183,[[]]],[11,"cast","","",183,[[]]],[11,"from","","",184,[[]]],[11,"into","","",184,[[]]],[11,"try_from","","",184,[[],["result",4]]],[11,"try_into","","",184,[[],["result",4]]],[11,"borrow","","",184,[[]]],[11,"borrow_mut","","",184,[[]]],[11,"type_id","","",184,[[],["typeid",3]]],[11,"vzip","","",184,[[]]],[11,"from_cast","","",184,[[]]],[11,"cast","","",184,[[]]],[11,"from","","",185,[[]]],[11,"into","","",185,[[]]],[11,"try_from","","",185,[[],["result",4]]],[11,"try_into","","",185,[[],["result",4]]],[11,"borrow","","",185,[[]]],[11,"borrow_mut","","",185,[[]]],[11,"type_id","","",185,[[],["typeid",3]]],[11,"vzip","","",185,[[]]],[11,"from_cast","","",185,[[]]],[11,"cast","","",185,[[]]],[11,"from","","",186,[[]]],[11,"into","","",186,[[]]],[11,"try_from","","",186,[[],["result",4]]],[11,"try_into","","",186,[[],["result",4]]],[11,"borrow","","",186,[[]]],[11,"borrow_mut","","",186,[[]]],[11,"type_id","","",186,[[],["typeid",3]]],[11,"vzip","","",186,[[]]],[11,"from_cast","","",186,[[]]],[11,"cast","","",186,[[]]],[11,"from","","",187,[[]]],[11,"into","","",187,[[]]],[11,"try_from","","",187,[[],["result",4]]],[11,"try_into","","",187,[[],["result",4]]],[11,"borrow","","",187,[[]]],[11,"borrow_mut","","",187,[[]]],[11,"type_id","","",187,[[],["typeid",3]]],[11,"vzip","","",187,[[]]],[11,"from_cast","","",187,[[]]],[11,"cast","","",187,[[]]],[11,"from","","",188,[[]]],[11,"into","","",188,[[]]],[11,"try_from","","",188,[[],["result",4]]],[11,"try_into","","",188,[[],["result",4]]],[11,"borrow","","",188,[[]]],[11,"borrow_mut","","",188,[[]]],[11,"type_id","","",188,[[],["typeid",3]]],[11,"vzip","","",188,[[]]],[11,"from_cast","","",188,[[]]],[11,"cast","","",188,[[]]],[11,"from","","",189,[[]]],[11,"into","","",189,[[]]],[11,"try_from","","",189,[[],["result",4]]],[11,"try_into","","",189,[[],["result",4]]],[11,"borrow","","",189,[[]]],[11,"borrow_mut","","",189,[[]]],[11,"type_id","","",189,[[],["typeid",3]]],[11,"vzip","","",189,[[]]],[11,"from_cast","","",189,[[]]],[11,"cast","","",189,[[]]],[11,"from","","",190,[[]]],[11,"into","","",190,[[]]],[11,"try_from","","",190,[[],["result",4]]],[11,"try_into","","",190,[[],["result",4]]],[11,"borrow","","",190,[[]]],[11,"borrow_mut","","",190,[[]]],[11,"type_id","","",190,[[],["typeid",3]]],[11,"vzip","","",190,[[]]],[11,"from_cast","","",190,[[]]],[11,"cast","","",190,[[]]],[11,"from","","",191,[[]]],[11,"into","","",191,[[]]],[11,"try_from","","",191,[[],["result",4]]],[11,"try_into","","",191,[[],["result",4]]],[11,"borrow","","",191,[[]]],[11,"borrow_mut","","",191,[[]]],[11,"type_id","","",191,[[],["typeid",3]]],[11,"vzip","","",191,[[]]],[11,"from_cast","","",191,[[]]],[11,"cast","","",191,[[]]],[11,"from","","",192,[[]]],[11,"into","","",192,[[]]],[11,"try_from","","",192,[[],["result",4]]],[11,"try_into","","",192,[[],["result",4]]],[11,"borrow","","",192,[[]]],[11,"borrow_mut","","",192,[[]]],[11,"type_id","","",192,[[],["typeid",3]]],[11,"vzip","","",192,[[]]],[11,"from_cast","","",192,[[]]],[11,"cast","","",192,[[]]],[11,"from","","",193,[[]]],[11,"into","","",193,[[]]],[11,"try_from","","",193,[[],["result",4]]],[11,"try_into","","",193,[[],["result",4]]],[11,"borrow","","",193,[[]]],[11,"borrow_mut","","",193,[[]]],[11,"type_id","","",193,[[],["typeid",3]]],[11,"vzip","","",193,[[]]],[11,"from_cast","","",193,[[]]],[11,"cast","","",193,[[]]],[11,"from","","",194,[[]]],[11,"into","","",194,[[]]],[11,"try_from","","",194,[[],["result",4]]],[11,"try_into","","",194,[[],["result",4]]],[11,"borrow","","",194,[[]]],[11,"borrow_mut","","",194,[[]]],[11,"type_id","","",194,[[],["typeid",3]]],[11,"vzip","","",194,[[]]],[11,"from_cast","","",194,[[]]],[11,"cast","","",194,[[]]],[11,"from","","",195,[[]]],[11,"into","","",195,[[]]],[11,"try_from","","",195,[[],["result",4]]],[11,"try_into","","",195,[[],["result",4]]],[11,"borrow","","",195,[[]]],[11,"borrow_mut","","",195,[[]]],[11,"type_id","","",195,[[],["typeid",3]]],[11,"vzip","","",195,[[]]],[11,"from_cast","","",195,[[]]],[11,"cast","","",195,[[]]],[11,"from","","",196,[[]]],[11,"into","","",196,[[]]],[11,"try_from","","",196,[[],["result",4]]],[11,"try_into","","",196,[[],["result",4]]],[11,"borrow","","",196,[[]]],[11,"borrow_mut","","",196,[[]]],[11,"type_id","","",196,[[],["typeid",3]]],[11,"vzip","","",196,[[]]],[11,"from_cast","","",196,[[]]],[11,"cast","","",196,[[]]],[11,"from","","",197,[[]]],[11,"into","","",197,[[]]],[11,"try_from","","",197,[[],["result",4]]],[11,"try_into","","",197,[[],["result",4]]],[11,"borrow","","",197,[[]]],[11,"borrow_mut","","",197,[[]]],[11,"type_id","","",197,[[],["typeid",3]]],[11,"vzip","","",197,[[]]],[11,"from_cast","","",197,[[]]],[11,"cast","","",197,[[]]],[11,"from","","",198,[[]]],[11,"into","","",198,[[]]],[11,"try_from","","",198,[[],["result",4]]],[11,"try_into","","",198,[[],["result",4]]],[11,"borrow","","",198,[[]]],[11,"borrow_mut","","",198,[[]]],[11,"type_id","","",198,[[],["typeid",3]]],[11,"vzip","","",198,[[]]],[11,"from_cast","","",198,[[]]],[11,"cast","","",198,[[]]],[11,"from","","",199,[[]]],[11,"into","","",199,[[]]],[11,"try_from","","",199,[[],["result",4]]],[11,"try_into","","",199,[[],["result",4]]],[11,"borrow","","",199,[[]]],[11,"borrow_mut","","",199,[[]]],[11,"type_id","","",199,[[],["typeid",3]]],[11,"vzip","","",199,[[]]],[11,"from_cast","","",199,[[]]],[11,"cast","","",199,[[]]],[11,"from","","",200,[[]]],[11,"into","","",200,[[]]],[11,"try_from","","",200,[[],["result",4]]],[11,"try_into","","",200,[[],["result",4]]],[11,"borrow","","",200,[[]]],[11,"borrow_mut","","",200,[[]]],[11,"type_id","","",200,[[],["typeid",3]]],[11,"vzip","","",200,[[]]],[11,"from_cast","","",200,[[]]],[11,"cast","","",200,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"to_string","","",49,[[],["string",3]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"equivalent","","",49,[[]]],[11,"vzip","","",49,[[]]],[11,"from_cast","","",49,[[]]],[11,"cast","","",49,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"equivalent","","",40,[[]]],[11,"vzip","","",40,[[]]],[11,"from_cast","","",40,[[]]],[11,"cast","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"equivalent","","",41,[[]]],[11,"vzip","","",41,[[]]],[11,"from_cast","","",41,[[]]],[11,"cast","","",41,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"equivalent","","",42,[[]]],[11,"vzip","","",42,[[]]],[11,"from_cast","","",42,[[]]],[11,"cast","","",42,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"equivalent","","",43,[[]]],[11,"vzip","","",43,[[]]],[11,"from_cast","","",43,[[]]],[11,"cast","","",43,[[]]],[11,"from","polars_arrow_rvsry99dx::error","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"to_string","","",50,[[],["string",3]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"from_cast","","",50,[[]]],[11,"cast","","",50,[[]]],[11,"from","polars_arrow_rvsry99dx::ipc::reader","",51,[[]]],[11,"into","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"from_cast","","",51,[[]]],[11,"cast","","",51,[[]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"vzip","","",52,[[]]],[11,"from_cast","","",52,[[]]],[11,"cast","","",52,[[]]],[11,"from","polars_arrow_rvsry99dx::ipc::writer","",53,[[]]],[11,"into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"from_cast","","",53,[[]]],[11,"cast","","",53,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"from_cast","","",54,[[]]],[11,"cast","","",54,[[]]],[11,"from","polars_arrow_rvsry99dx::ipc::gen::File","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"vzip","","",57,[[]]],[11,"from_cast","","",57,[[]]],[11,"cast","","",57,[[]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"from_cast","","",55,[[]]],[11,"cast","","",55,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"vzip","","",56,[[]]],[11,"from_cast","","",56,[[]]],[11,"cast","","",56,[[]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"vzip","","",58,[[]]],[11,"from_cast","","",58,[[]]],[11,"cast","","",58,[[]]],[11,"from","","",201,[[]]],[11,"into","","",201,[[]]],[11,"try_from","","",201,[[],["result",4]]],[11,"try_into","","",201,[[],["result",4]]],[11,"borrow","","",201,[[]]],[11,"borrow_mut","","",201,[[]]],[11,"type_id","","",201,[[],["typeid",3]]],[11,"vzip","","",201,[[]]],[11,"from_cast","","",201,[[]]],[11,"cast","","",201,[[]]],[11,"from","polars_arrow_rvsry99dx::ipc::gen::Message","",202,[[]]],[11,"into","","",202,[[]]],[11,"try_from","","",202,[[],["result",4]]],[11,"try_into","","",202,[[],["result",4]]],[11,"borrow","","",202,[[]]],[11,"borrow_mut","","",202,[[]]],[11,"type_id","","",202,[[],["typeid",3]]],[11,"vzip","","",202,[[]]],[11,"from_cast","","",202,[[]]],[11,"cast","","",202,[[]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"vzip","","",66,[[]]],[11,"from_cast","","",66,[[]]],[11,"cast","","",66,[[]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"vzip","","",59,[[]]],[11,"from_cast","","",59,[[]]],[11,"cast","","",59,[[]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"vzip","","",60,[[]]],[11,"from_cast","","",60,[[]]],[11,"cast","","",60,[[]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"vzip","","",67,[[]]],[11,"from_cast","","",67,[[]]],[11,"cast","","",67,[[]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"vzip","","",61,[[]]],[11,"from_cast","","",61,[[]]],[11,"cast","","",61,[[]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"vzip","","",62,[[]]],[11,"from_cast","","",62,[[]]],[11,"cast","","",62,[[]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"vzip","","",68,[[]]],[11,"from_cast","","",68,[[]]],[11,"cast","","",68,[[]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"vzip","","",63,[[]]],[11,"from_cast","","",63,[[]]],[11,"cast","","",63,[[]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"vzip","","",64,[[]]],[11,"from_cast","","",64,[[]]],[11,"cast","","",64,[[]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"vzip","","",69,[[]]],[11,"from_cast","","",69,[[]]],[11,"cast","","",69,[[]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"equivalent","","",65,[[]]],[11,"vzip","","",65,[[]]],[11,"from_cast","","",65,[[]]],[11,"cast","","",65,[[]]],[11,"from","","",203,[[]]],[11,"into","","",203,[[]]],[11,"try_from","","",203,[[],["result",4]]],[11,"try_into","","",203,[[],["result",4]]],[11,"borrow","","",203,[[]]],[11,"borrow_mut","","",203,[[]]],[11,"type_id","","",203,[[],["typeid",3]]],[11,"vzip","","",203,[[]]],[11,"from_cast","","",203,[[]]],[11,"cast","","",203,[[]]],[11,"from","","",204,[[]]],[11,"into","","",204,[[]]],[11,"try_from","","",204,[[],["result",4]]],[11,"try_into","","",204,[[],["result",4]]],[11,"borrow","","",204,[[]]],[11,"borrow_mut","","",204,[[]]],[11,"type_id","","",204,[[],["typeid",3]]],[11,"vzip","","",204,[[]]],[11,"from_cast","","",204,[[]]],[11,"cast","","",204,[[]]],[11,"from","","",205,[[]]],[11,"into","","",205,[[]]],[11,"try_from","","",205,[[],["result",4]]],[11,"try_into","","",205,[[],["result",4]]],[11,"borrow","","",205,[[]]],[11,"borrow_mut","","",205,[[]]],[11,"type_id","","",205,[[],["typeid",3]]],[11,"vzip","","",205,[[]]],[11,"from_cast","","",205,[[]]],[11,"cast","","",205,[[]]],[11,"from","polars_arrow_rvsry99dx::ipc::gen::Schema","",206,[[]]],[11,"into","","",206,[[]]],[11,"try_from","","",206,[[],["result",4]]],[11,"try_into","","",206,[[],["result",4]]],[11,"borrow","","",206,[[]]],[11,"borrow_mut","","",206,[[]]],[11,"type_id","","",206,[[],["typeid",3]]],[11,"vzip","","",206,[[]]],[11,"from_cast","","",206,[[]]],[11,"cast","","",206,[[]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"vzip","","",120,[[]]],[11,"from_cast","","",120,[[]]],[11,"cast","","",120,[[]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"vzip","","",70,[[]]],[11,"from_cast","","",70,[[]]],[11,"cast","","",70,[[]]],[11,"from","","",207,[[]]],[11,"into","","",207,[[]]],[11,"try_from","","",207,[[],["result",4]]],[11,"try_into","","",207,[[],["result",4]]],[11,"borrow","","",207,[[]]],[11,"borrow_mut","","",207,[[]]],[11,"type_id","","",207,[[],["typeid",3]]],[11,"vzip","","",207,[[]]],[11,"from_cast","","",207,[[]]],[11,"cast","","",207,[[]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"vzip","","",121,[[]]],[11,"from_cast","","",121,[[]]],[11,"cast","","",121,[[]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"vzip","","",71,[[]]],[11,"from_cast","","",71,[[]]],[11,"cast","","",71,[[]]],[11,"from","","",208,[[]]],[11,"into","","",208,[[]]],[11,"try_from","","",208,[[],["result",4]]],[11,"try_into","","",208,[[],["result",4]]],[11,"borrow","","",208,[[]]],[11,"borrow_mut","","",208,[[]]],[11,"type_id","","",208,[[],["typeid",3]]],[11,"vzip","","",208,[[]]],[11,"from_cast","","",208,[[]]],[11,"cast","","",208,[[]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"vzip","","",122,[[]]],[11,"from_cast","","",122,[[]]],[11,"cast","","",122,[[]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"vzip","","",72,[[]]],[11,"from_cast","","",72,[[]]],[11,"cast","","",72,[[]]],[11,"from","","",209,[[]]],[11,"into","","",209,[[]]],[11,"try_from","","",209,[[],["result",4]]],[11,"try_into","","",209,[[],["result",4]]],[11,"borrow","","",209,[[]]],[11,"borrow_mut","","",209,[[]]],[11,"type_id","","",209,[[],["typeid",3]]],[11,"vzip","","",209,[[]]],[11,"from_cast","","",209,[[]]],[11,"cast","","",209,[[]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"vzip","","",123,[[]]],[11,"from_cast","","",123,[[]]],[11,"cast","","",123,[[]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"vzip","","",73,[[]]],[11,"from_cast","","",73,[[]]],[11,"cast","","",73,[[]]],[11,"from","","",210,[[]]],[11,"into","","",210,[[]]],[11,"try_from","","",210,[[],["result",4]]],[11,"try_into","","",210,[[],["result",4]]],[11,"borrow","","",210,[[]]],[11,"borrow_mut","","",210,[[]]],[11,"type_id","","",210,[[],["typeid",3]]],[11,"vzip","","",210,[[]]],[11,"from_cast","","",210,[[]]],[11,"cast","","",210,[[]]],[11,"from","","",124,[[]]],[11,"into","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"vzip","","",124,[[]]],[11,"from_cast","","",124,[[]]],[11,"cast","","",124,[[]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"vzip","","",74,[[]]],[11,"from_cast","","",74,[[]]],[11,"cast","","",74,[[]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"vzip","","",75,[[]]],[11,"from_cast","","",75,[[]]],[11,"cast","","",75,[[]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"vzip","","",125,[[]]],[11,"from_cast","","",125,[[]]],[11,"cast","","",125,[[]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"vzip","","",76,[[]]],[11,"from_cast","","",76,[[]]],[11,"cast","","",76,[[]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"vzip","","",77,[[]]],[11,"from_cast","","",77,[[]]],[11,"cast","","",77,[[]]],[11,"from","","",126,[[]]],[11,"into","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"vzip","","",126,[[]]],[11,"from_cast","","",126,[[]]],[11,"cast","","",126,[[]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"vzip","","",78,[[]]],[11,"from_cast","","",78,[[]]],[11,"cast","","",78,[[]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"vzip","","",79,[[]]],[11,"from_cast","","",79,[[]]],[11,"cast","","",79,[[]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"vzip","","",127,[[]]],[11,"from_cast","","",127,[[]]],[11,"cast","","",127,[[]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"vzip","","",80,[[]]],[11,"from_cast","","",80,[[]]],[11,"cast","","",80,[[]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"vzip","","",81,[[]]],[11,"from_cast","","",81,[[]]],[11,"cast","","",81,[[]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"vzip","","",128,[[]]],[11,"from_cast","","",128,[[]]],[11,"cast","","",128,[[]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"vzip","","",82,[[]]],[11,"from_cast","","",82,[[]]],[11,"cast","","",82,[[]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"vzip","","",83,[[]]],[11,"from_cast","","",83,[[]]],[11,"cast","","",83,[[]]],[11,"from","","",129,[[]]],[11,"into","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"vzip","","",129,[[]]],[11,"from_cast","","",129,[[]]],[11,"cast","","",129,[[]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"vzip","","",84,[[]]],[11,"from_cast","","",84,[[]]],[11,"cast","","",84,[[]]],[11,"from","","",211,[[]]],[11,"into","","",211,[[]]],[11,"try_from","","",211,[[],["result",4]]],[11,"try_into","","",211,[[],["result",4]]],[11,"borrow","","",211,[[]]],[11,"borrow_mut","","",211,[[]]],[11,"type_id","","",211,[[],["typeid",3]]],[11,"vzip","","",211,[[]]],[11,"from_cast","","",211,[[]]],[11,"cast","","",211,[[]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"vzip","","",130,[[]]],[11,"from_cast","","",130,[[]]],[11,"cast","","",130,[[]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"vzip","","",85,[[]]],[11,"from_cast","","",85,[[]]],[11,"cast","","",85,[[]]],[11,"from","","",212,[[]]],[11,"into","","",212,[[]]],[11,"try_from","","",212,[[],["result",4]]],[11,"try_into","","",212,[[],["result",4]]],[11,"borrow","","",212,[[]]],[11,"borrow_mut","","",212,[[]]],[11,"type_id","","",212,[[],["typeid",3]]],[11,"vzip","","",212,[[]]],[11,"from_cast","","",212,[[]]],[11,"cast","","",212,[[]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"vzip","","",131,[[]]],[11,"from_cast","","",131,[[]]],[11,"cast","","",131,[[]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"vzip","","",86,[[]]],[11,"from_cast","","",86,[[]]],[11,"cast","","",86,[[]]],[11,"from","","",213,[[]]],[11,"into","","",213,[[]]],[11,"try_from","","",213,[[],["result",4]]],[11,"try_into","","",213,[[],["result",4]]],[11,"borrow","","",213,[[]]],[11,"borrow_mut","","",213,[[]]],[11,"type_id","","",213,[[],["typeid",3]]],[11,"vzip","","",213,[[]]],[11,"from_cast","","",213,[[]]],[11,"cast","","",213,[[]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"vzip","","",132,[[]]],[11,"from_cast","","",132,[[]]],[11,"cast","","",132,[[]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"vzip","","",87,[[]]],[11,"from_cast","","",87,[[]]],[11,"cast","","",87,[[]]],[11,"from","","",214,[[]]],[11,"into","","",214,[[]]],[11,"try_from","","",214,[[],["result",4]]],[11,"try_into","","",214,[[],["result",4]]],[11,"borrow","","",214,[[]]],[11,"borrow_mut","","",214,[[]]],[11,"type_id","","",214,[[],["typeid",3]]],[11,"vzip","","",214,[[]]],[11,"from_cast","","",214,[[]]],[11,"cast","","",214,[[]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"vzip","","",133,[[]]],[11,"from_cast","","",133,[[]]],[11,"cast","","",133,[[]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"vzip","","",88,[[]]],[11,"from_cast","","",88,[[]]],[11,"cast","","",88,[[]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"vzip","","",89,[[]]],[11,"from_cast","","",89,[[]]],[11,"cast","","",89,[[]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"vzip","","",134,[[]]],[11,"from_cast","","",134,[[]]],[11,"cast","","",134,[[]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"vzip","","",90,[[]]],[11,"from_cast","","",90,[[]]],[11,"cast","","",90,[[]]],[11,"from","","",215,[[]]],[11,"into","","",215,[[]]],[11,"try_from","","",215,[[],["result",4]]],[11,"try_into","","",215,[[],["result",4]]],[11,"borrow","","",215,[[]]],[11,"borrow_mut","","",215,[[]]],[11,"type_id","","",215,[[],["typeid",3]]],[11,"vzip","","",215,[[]]],[11,"from_cast","","",215,[[]]],[11,"cast","","",215,[[]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"vzip","","",135,[[]]],[11,"from_cast","","",135,[[]]],[11,"cast","","",135,[[]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"vzip","","",91,[[]]],[11,"from_cast","","",91,[[]]],[11,"cast","","",91,[[]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"vzip","","",92,[[]]],[11,"from_cast","","",92,[[]]],[11,"cast","","",92,[[]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"vzip","","",136,[[]]],[11,"from_cast","","",136,[[]]],[11,"cast","","",136,[[]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"vzip","","",93,[[]]],[11,"from_cast","","",93,[[]]],[11,"cast","","",93,[[]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"vzip","","",94,[[]]],[11,"from_cast","","",94,[[]]],[11,"cast","","",94,[[]]],[11,"from","","",137,[[]]],[11,"into","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"vzip","","",137,[[]]],[11,"from_cast","","",137,[[]]],[11,"cast","","",137,[[]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"vzip","","",95,[[]]],[11,"from_cast","","",95,[[]]],[11,"cast","","",95,[[]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"vzip","","",96,[[]]],[11,"from_cast","","",96,[[]]],[11,"cast","","",96,[[]]],[11,"from","","",138,[[]]],[11,"into","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"vzip","","",138,[[]]],[11,"from_cast","","",138,[[]]],[11,"cast","","",138,[[]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"vzip","","",97,[[]]],[11,"from_cast","","",97,[[]]],[11,"cast","","",97,[[]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"vzip","","",98,[[]]],[11,"from_cast","","",98,[[]]],[11,"cast","","",98,[[]]],[11,"from","","",139,[[]]],[11,"into","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"vzip","","",139,[[]]],[11,"from_cast","","",139,[[]]],[11,"cast","","",139,[[]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"vzip","","",99,[[]]],[11,"from_cast","","",99,[[]]],[11,"cast","","",99,[[]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"vzip","","",100,[[]]],[11,"from_cast","","",100,[[]]],[11,"cast","","",100,[[]]],[11,"from","","",140,[[]]],[11,"into","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"vzip","","",140,[[]]],[11,"from_cast","","",140,[[]]],[11,"cast","","",140,[[]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"vzip","","",101,[[]]],[11,"from_cast","","",101,[[]]],[11,"cast","","",101,[[]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"vzip","","",102,[[]]],[11,"from_cast","","",102,[[]]],[11,"cast","","",102,[[]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"vzip","","",141,[[]]],[11,"from_cast","","",141,[[]]],[11,"cast","","",141,[[]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"to_owned","","",103,[[]]],[11,"clone_into","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"vzip","","",103,[[]]],[11,"from_cast","","",103,[[]]],[11,"cast","","",103,[[]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"vzip","","",104,[[]]],[11,"from_cast","","",104,[[]]],[11,"cast","","",104,[[]]],[11,"from","","",142,[[]]],[11,"into","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"vzip","","",142,[[]]],[11,"from_cast","","",142,[[]]],[11,"cast","","",142,[[]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"to_owned","","",105,[[]]],[11,"clone_into","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"vzip","","",105,[[]]],[11,"from_cast","","",105,[[]]],[11,"cast","","",105,[[]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"vzip","","",106,[[]]],[11,"from_cast","","",106,[[]]],[11,"cast","","",106,[[]]],[11,"from","","",143,[[]]],[11,"into","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"vzip","","",143,[[]]],[11,"from_cast","","",143,[[]]],[11,"cast","","",143,[[]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"to_owned","","",107,[[]]],[11,"clone_into","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"vzip","","",107,[[]]],[11,"from_cast","","",107,[[]]],[11,"cast","","",107,[[]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"vzip","","",108,[[]]],[11,"from_cast","","",108,[[]]],[11,"cast","","",108,[[]]],[11,"from","","",144,[[]]],[11,"into","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"try_into","","",144,[[],["result",4]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"vzip","","",144,[[]]],[11,"from_cast","","",144,[[]]],[11,"cast","","",144,[[]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"vzip","","",109,[[]]],[11,"from_cast","","",109,[[]]],[11,"cast","","",109,[[]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"vzip","","",110,[[]]],[11,"from_cast","","",110,[[]]],[11,"cast","","",110,[[]]],[11,"from","","",145,[[]]],[11,"into","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"try_into","","",145,[[],["result",4]]],[11,"borrow","","",145,[[]]],[11,"borrow_mut","","",145,[[]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"vzip","","",145,[[]]],[11,"from_cast","","",145,[[]]],[11,"cast","","",145,[[]]],[11,"from","","",111,[[]]],[11,"into","","",111,[[]]],[11,"to_owned","","",111,[[]]],[11,"clone_into","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"equivalent","","",111,[[]]],[11,"vzip","","",111,[[]]],[11,"from_cast","","",111,[[]]],[11,"cast","","",111,[[]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"equivalent","","",112,[[]]],[11,"vzip","","",112,[[]]],[11,"from_cast","","",112,[[]]],[11,"cast","","",112,[[]]],[11,"from","","",113,[[]]],[11,"into","","",113,[[]]],[11,"to_owned","","",113,[[]]],[11,"clone_into","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"equivalent","","",113,[[]]],[11,"vzip","","",113,[[]]],[11,"from_cast","","",113,[[]]],[11,"cast","","",113,[[]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"to_owned","","",114,[[]]],[11,"clone_into","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"equivalent","","",114,[[]]],[11,"vzip","","",114,[[]]],[11,"from_cast","","",114,[[]]],[11,"cast","","",114,[[]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"equivalent","","",115,[[]]],[11,"vzip","","",115,[[]]],[11,"from_cast","","",115,[[]]],[11,"cast","","",115,[[]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"equivalent","","",116,[[]]],[11,"vzip","","",116,[[]]],[11,"from_cast","","",116,[[]]],[11,"cast","","",116,[[]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"equivalent","","",117,[[]]],[11,"vzip","","",117,[[]]],[11,"from_cast","","",117,[[]]],[11,"cast","","",117,[[]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"equivalent","","",118,[[]]],[11,"vzip","","",118,[[]]],[11,"from_cast","","",118,[[]]],[11,"cast","","",118,[[]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"equivalent","","",119,[[]]],[11,"vzip","","",119,[[]]],[11,"from_cast","","",119,[[]]],[11,"cast","","",119,[[]]],[11,"from","","",216,[[]]],[11,"into","","",216,[[]]],[11,"try_from","","",216,[[],["result",4]]],[11,"try_into","","",216,[[],["result",4]]],[11,"borrow","","",216,[[]]],[11,"borrow_mut","","",216,[[]]],[11,"type_id","","",216,[[],["typeid",3]]],[11,"vzip","","",216,[[]]],[11,"from_cast","","",216,[[]]],[11,"cast","","",216,[[]]],[11,"from","","",217,[[]]],[11,"into","","",217,[[]]],[11,"try_from","","",217,[[],["result",4]]],[11,"try_into","","",217,[[],["result",4]]],[11,"borrow","","",217,[[]]],[11,"borrow_mut","","",217,[[]]],[11,"type_id","","",217,[[],["typeid",3]]],[11,"vzip","","",217,[[]]],[11,"from_cast","","",217,[[]]],[11,"cast","","",217,[[]]],[11,"from","","",218,[[]]],[11,"into","","",218,[[]]],[11,"try_from","","",218,[[],["result",4]]],[11,"try_into","","",218,[[],["result",4]]],[11,"borrow","","",218,[[]]],[11,"borrow_mut","","",218,[[]]],[11,"type_id","","",218,[[],["typeid",3]]],[11,"vzip","","",218,[[]]],[11,"from_cast","","",218,[[]]],[11,"cast","","",218,[[]]],[11,"from","","",219,[[]]],[11,"into","","",219,[[]]],[11,"try_from","","",219,[[],["result",4]]],[11,"try_into","","",219,[[],["result",4]]],[11,"borrow","","",219,[[]]],[11,"borrow_mut","","",219,[[]]],[11,"type_id","","",219,[[],["typeid",3]]],[11,"vzip","","",219,[[]]],[11,"from_cast","","",219,[[]]],[11,"cast","","",219,[[]]],[11,"from","","",220,[[]]],[11,"into","","",220,[[]]],[11,"try_from","","",220,[[],["result",4]]],[11,"try_into","","",220,[[],["result",4]]],[11,"borrow","","",220,[[]]],[11,"borrow_mut","","",220,[[]]],[11,"type_id","","",220,[[],["typeid",3]]],[11,"vzip","","",220,[[]]],[11,"from_cast","","",220,[[]]],[11,"cast","","",220,[[]]],[11,"from","","",221,[[]]],[11,"into","","",221,[[]]],[11,"try_from","","",221,[[],["result",4]]],[11,"try_into","","",221,[[],["result",4]]],[11,"borrow","","",221,[[]]],[11,"borrow_mut","","",221,[[]]],[11,"type_id","","",221,[[],["typeid",3]]],[11,"vzip","","",221,[[]]],[11,"from_cast","","",221,[[]]],[11,"cast","","",221,[[]]],[11,"from","","",222,[[]]],[11,"into","","",222,[[]]],[11,"try_from","","",222,[[],["result",4]]],[11,"try_into","","",222,[[],["result",4]]],[11,"borrow","","",222,[[]]],[11,"borrow_mut","","",222,[[]]],[11,"type_id","","",222,[[],["typeid",3]]],[11,"vzip","","",222,[[]]],[11,"from_cast","","",222,[[]]],[11,"cast","","",222,[[]]],[11,"from","","",223,[[]]],[11,"into","","",223,[[]]],[11,"try_from","","",223,[[],["result",4]]],[11,"try_into","","",223,[[],["result",4]]],[11,"borrow","","",223,[[]]],[11,"borrow_mut","","",223,[[]]],[11,"type_id","","",223,[[],["typeid",3]]],[11,"vzip","","",223,[[]]],[11,"from_cast","","",223,[[]]],[11,"cast","","",223,[[]]],[11,"from","","",224,[[]]],[11,"into","","",224,[[]]],[11,"try_from","","",224,[[],["result",4]]],[11,"try_into","","",224,[[],["result",4]]],[11,"borrow","","",224,[[]]],[11,"borrow_mut","","",224,[[]]],[11,"type_id","","",224,[[],["typeid",3]]],[11,"vzip","","",224,[[]]],[11,"from_cast","","",224,[[]]],[11,"cast","","",224,[[]]],[11,"from","","",225,[[]]],[11,"into","","",225,[[]]],[11,"try_from","","",225,[[],["result",4]]],[11,"try_into","","",225,[[],["result",4]]],[11,"borrow","","",225,[[]]],[11,"borrow_mut","","",225,[[]]],[11,"type_id","","",225,[[],["typeid",3]]],[11,"vzip","","",225,[[]]],[11,"from_cast","","",225,[[]]],[11,"cast","","",225,[[]]],[11,"from","","",226,[[]]],[11,"into","","",226,[[]]],[11,"try_from","","",226,[[],["result",4]]],[11,"try_into","","",226,[[],["result",4]]],[11,"borrow","","",226,[[]]],[11,"borrow_mut","","",226,[[]]],[11,"type_id","","",226,[[],["typeid",3]]],[11,"vzip","","",226,[[]]],[11,"from_cast","","",226,[[]]],[11,"cast","","",226,[[]]],[11,"from","","",227,[[]]],[11,"into","","",227,[[]]],[11,"try_from","","",227,[[],["result",4]]],[11,"try_into","","",227,[[],["result",4]]],[11,"borrow","","",227,[[]]],[11,"borrow_mut","","",227,[[]]],[11,"type_id","","",227,[[],["typeid",3]]],[11,"vzip","","",227,[[]]],[11,"from_cast","","",227,[[]]],[11,"cast","","",227,[[]]],[11,"from","","",228,[[]]],[11,"into","","",228,[[]]],[11,"try_from","","",228,[[],["result",4]]],[11,"try_into","","",228,[[],["result",4]]],[11,"borrow","","",228,[[]]],[11,"borrow_mut","","",228,[[]]],[11,"type_id","","",228,[[],["typeid",3]]],[11,"vzip","","",228,[[]]],[11,"from_cast","","",228,[[]]],[11,"cast","","",228,[[]]],[11,"from","","",229,[[]]],[11,"into","","",229,[[]]],[11,"try_from","","",229,[[],["result",4]]],[11,"try_into","","",229,[[],["result",4]]],[11,"borrow","","",229,[[]]],[11,"borrow_mut","","",229,[[]]],[11,"type_id","","",229,[[],["typeid",3]]],[11,"vzip","","",229,[[]]],[11,"from_cast","","",229,[[]]],[11,"cast","","",229,[[]]],[11,"from","","",230,[[]]],[11,"into","","",230,[[]]],[11,"try_from","","",230,[[],["result",4]]],[11,"try_into","","",230,[[],["result",4]]],[11,"borrow","","",230,[[]]],[11,"borrow_mut","","",230,[[]]],[11,"type_id","","",230,[[],["typeid",3]]],[11,"vzip","","",230,[[]]],[11,"from_cast","","",230,[[]]],[11,"cast","","",230,[[]]],[11,"from","","",231,[[]]],[11,"into","","",231,[[]]],[11,"try_from","","",231,[[],["result",4]]],[11,"try_into","","",231,[[],["result",4]]],[11,"borrow","","",231,[[]]],[11,"borrow_mut","","",231,[[]]],[11,"type_id","","",231,[[],["typeid",3]]],[11,"vzip","","",231,[[]]],[11,"from_cast","","",231,[[]]],[11,"cast","","",231,[[]]],[11,"from","","",232,[[]]],[11,"into","","",232,[[]]],[11,"try_from","","",232,[[],["result",4]]],[11,"try_into","","",232,[[],["result",4]]],[11,"borrow","","",232,[[]]],[11,"borrow_mut","","",232,[[]]],[11,"type_id","","",232,[[],["typeid",3]]],[11,"vzip","","",232,[[]]],[11,"from_cast","","",232,[[]]],[11,"cast","","",232,[[]]],[11,"from","","",233,[[]]],[11,"into","","",233,[[]]],[11,"try_from","","",233,[[],["result",4]]],[11,"try_into","","",233,[[],["result",4]]],[11,"borrow","","",233,[[]]],[11,"borrow_mut","","",233,[[]]],[11,"type_id","","",233,[[],["typeid",3]]],[11,"vzip","","",233,[[]]],[11,"from_cast","","",233,[[]]],[11,"cast","","",233,[[]]],[11,"from","","",234,[[]]],[11,"into","","",234,[[]]],[11,"try_from","","",234,[[],["result",4]]],[11,"try_into","","",234,[[],["result",4]]],[11,"borrow","","",234,[[]]],[11,"borrow_mut","","",234,[[]]],[11,"type_id","","",234,[[],["typeid",3]]],[11,"vzip","","",234,[[]]],[11,"from_cast","","",234,[[]]],[11,"cast","","",234,[[]]],[11,"from","","",235,[[]]],[11,"into","","",235,[[]]],[11,"try_from","","",235,[[],["result",4]]],[11,"try_into","","",235,[[],["result",4]]],[11,"borrow","","",235,[[]]],[11,"borrow_mut","","",235,[[]]],[11,"type_id","","",235,[[],["typeid",3]]],[11,"vzip","","",235,[[]]],[11,"from_cast","","",235,[[]]],[11,"cast","","",235,[[]]],[11,"from","","",236,[[]]],[11,"into","","",236,[[]]],[11,"try_from","","",236,[[],["result",4]]],[11,"try_into","","",236,[[],["result",4]]],[11,"borrow","","",236,[[]]],[11,"borrow_mut","","",236,[[]]],[11,"type_id","","",236,[[],["typeid",3]]],[11,"vzip","","",236,[[]]],[11,"from_cast","","",236,[[]]],[11,"cast","","",236,[[]]],[11,"from","","",237,[[]]],[11,"into","","",237,[[]]],[11,"try_from","","",237,[[],["result",4]]],[11,"try_into","","",237,[[],["result",4]]],[11,"borrow","","",237,[[]]],[11,"borrow_mut","","",237,[[]]],[11,"type_id","","",237,[[],["typeid",3]]],[11,"vzip","","",237,[[]]],[11,"from_cast","","",237,[[]]],[11,"cast","","",237,[[]]],[11,"from","","",238,[[]]],[11,"into","","",238,[[]]],[11,"try_from","","",238,[[],["result",4]]],[11,"try_into","","",238,[[],["result",4]]],[11,"borrow","","",238,[[]]],[11,"borrow_mut","","",238,[[]]],[11,"type_id","","",238,[[],["typeid",3]]],[11,"vzip","","",238,[[]]],[11,"from_cast","","",238,[[]]],[11,"cast","","",238,[[]]],[11,"from","","",239,[[]]],[11,"into","","",239,[[]]],[11,"try_from","","",239,[[],["result",4]]],[11,"try_into","","",239,[[],["result",4]]],[11,"borrow","","",239,[[]]],[11,"borrow_mut","","",239,[[]]],[11,"type_id","","",239,[[],["typeid",3]]],[11,"vzip","","",239,[[]]],[11,"from_cast","","",239,[[]]],[11,"cast","","",239,[[]]],[11,"from","","",240,[[]]],[11,"into","","",240,[[]]],[11,"try_from","","",240,[[],["result",4]]],[11,"try_into","","",240,[[],["result",4]]],[11,"borrow","","",240,[[]]],[11,"borrow_mut","","",240,[[]]],[11,"type_id","","",240,[[],["typeid",3]]],[11,"vzip","","",240,[[]]],[11,"from_cast","","",240,[[]]],[11,"cast","","",240,[[]]],[11,"from","polars_arrow_rvsry99dx::ipc::gen::SparseTensor","",241,[[]]],[11,"into","","",241,[[]]],[11,"try_from","","",241,[[],["result",4]]],[11,"try_into","","",241,[[],["result",4]]],[11,"borrow","","",241,[[]]],[11,"borrow_mut","","",241,[[]]],[11,"type_id","","",241,[[],["typeid",3]]],[11,"vzip","","",241,[[]]],[11,"from_cast","","",241,[[]]],[11,"cast","","",241,[[]]],[11,"from","","",146,[[]]],[11,"into","","",146,[[]]],[11,"to_owned","","",146,[[]]],[11,"clone_into","","",146,[[]]],[11,"try_from","","",146,[[],["result",4]]],[11,"try_into","","",146,[[],["result",4]]],[11,"borrow","","",146,[[]]],[11,"borrow_mut","","",146,[[]]],[11,"type_id","","",146,[[],["typeid",3]]],[11,"vzip","","",146,[[]]],[11,"from_cast","","",146,[[]]],[11,"cast","","",146,[[]]],[11,"from","","",147,[[]]],[11,"into","","",147,[[]]],[11,"try_from","","",147,[[],["result",4]]],[11,"try_into","","",147,[[],["result",4]]],[11,"borrow","","",147,[[]]],[11,"borrow_mut","","",147,[[]]],[11,"type_id","","",147,[[],["typeid",3]]],[11,"vzip","","",147,[[]]],[11,"from_cast","","",147,[[]]],[11,"cast","","",147,[[]]],[11,"from","","",154,[[]]],[11,"into","","",154,[[]]],[11,"try_from","","",154,[[],["result",4]]],[11,"try_into","","",154,[[],["result",4]]],[11,"borrow","","",154,[[]]],[11,"borrow_mut","","",154,[[]]],[11,"type_id","","",154,[[],["typeid",3]]],[11,"vzip","","",154,[[]]],[11,"from_cast","","",154,[[]]],[11,"cast","","",154,[[]]],[11,"from","","",148,[[]]],[11,"into","","",148,[[]]],[11,"to_owned","","",148,[[]]],[11,"clone_into","","",148,[[]]],[11,"try_from","","",148,[[],["result",4]]],[11,"try_into","","",148,[[],["result",4]]],[11,"borrow","","",148,[[]]],[11,"borrow_mut","","",148,[[]]],[11,"type_id","","",148,[[],["typeid",3]]],[11,"vzip","","",148,[[]]],[11,"from_cast","","",148,[[]]],[11,"cast","","",148,[[]]],[11,"from","","",149,[[]]],[11,"into","","",149,[[]]],[11,"try_from","","",149,[[],["result",4]]],[11,"try_into","","",149,[[],["result",4]]],[11,"borrow","","",149,[[]]],[11,"borrow_mut","","",149,[[]]],[11,"type_id","","",149,[[],["typeid",3]]],[11,"vzip","","",149,[[]]],[11,"from_cast","","",149,[[]]],[11,"cast","","",149,[[]]],[11,"from","","",155,[[]]],[11,"into","","",155,[[]]],[11,"try_from","","",155,[[],["result",4]]],[11,"try_into","","",155,[[],["result",4]]],[11,"borrow","","",155,[[]]],[11,"borrow_mut","","",155,[[]]],[11,"type_id","","",155,[[],["typeid",3]]],[11,"vzip","","",155,[[]]],[11,"from_cast","","",155,[[]]],[11,"cast","","",155,[[]]],[11,"from","","",150,[[]]],[11,"into","","",150,[[]]],[11,"to_owned","","",150,[[]]],[11,"clone_into","","",150,[[]]],[11,"try_from","","",150,[[],["result",4]]],[11,"try_into","","",150,[[],["result",4]]],[11,"borrow","","",150,[[]]],[11,"borrow_mut","","",150,[[]]],[11,"type_id","","",150,[[],["typeid",3]]],[11,"vzip","","",150,[[]]],[11,"from_cast","","",150,[[]]],[11,"cast","","",150,[[]]],[11,"from","","",151,[[]]],[11,"into","","",151,[[]]],[11,"try_from","","",151,[[],["result",4]]],[11,"try_into","","",151,[[],["result",4]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"vzip","","",151,[[]]],[11,"from_cast","","",151,[[]]],[11,"cast","","",151,[[]]],[11,"from","","",156,[[]]],[11,"into","","",156,[[]]],[11,"try_from","","",156,[[],["result",4]]],[11,"try_into","","",156,[[],["result",4]]],[11,"borrow","","",156,[[]]],[11,"borrow_mut","","",156,[[]]],[11,"type_id","","",156,[[],["typeid",3]]],[11,"vzip","","",156,[[]]],[11,"from_cast","","",156,[[]]],[11,"cast","","",156,[[]]],[11,"from","","",152,[[]]],[11,"into","","",152,[[]]],[11,"to_owned","","",152,[[]]],[11,"clone_into","","",152,[[]]],[11,"try_from","","",152,[[],["result",4]]],[11,"try_into","","",152,[[],["result",4]]],[11,"borrow","","",152,[[]]],[11,"borrow_mut","","",152,[[]]],[11,"type_id","","",152,[[],["typeid",3]]],[11,"equivalent","","",152,[[]]],[11,"vzip","","",152,[[]]],[11,"from_cast","","",152,[[]]],[11,"cast","","",152,[[]]],[11,"from","","",153,[[]]],[11,"into","","",153,[[]]],[11,"to_owned","","",153,[[]]],[11,"clone_into","","",153,[[]]],[11,"try_from","","",153,[[],["result",4]]],[11,"try_into","","",153,[[],["result",4]]],[11,"borrow","","",153,[[]]],[11,"borrow_mut","","",153,[[]]],[11,"type_id","","",153,[[],["typeid",3]]],[11,"equivalent","","",153,[[]]],[11,"vzip","","",153,[[]]],[11,"from_cast","","",153,[[]]],[11,"cast","","",153,[[]]],[11,"from","","",242,[[]]],[11,"into","","",242,[[]]],[11,"try_from","","",242,[[],["result",4]]],[11,"try_into","","",242,[[],["result",4]]],[11,"borrow","","",242,[[]]],[11,"borrow_mut","","",242,[[]]],[11,"type_id","","",242,[[],["typeid",3]]],[11,"vzip","","",242,[[]]],[11,"from_cast","","",242,[[]]],[11,"cast","","",242,[[]]],[11,"from","","",243,[[]]],[11,"into","","",243,[[]]],[11,"try_from","","",243,[[],["result",4]]],[11,"try_into","","",243,[[],["result",4]]],[11,"borrow","","",243,[[]]],[11,"borrow_mut","","",243,[[]]],[11,"type_id","","",243,[[],["typeid",3]]],[11,"vzip","","",243,[[]]],[11,"from_cast","","",243,[[]]],[11,"cast","","",243,[[]]],[11,"from","","",244,[[]]],[11,"into","","",244,[[]]],[11,"try_from","","",244,[[],["result",4]]],[11,"try_into","","",244,[[],["result",4]]],[11,"borrow","","",244,[[]]],[11,"borrow_mut","","",244,[[]]],[11,"type_id","","",244,[[],["typeid",3]]],[11,"vzip","","",244,[[]]],[11,"from_cast","","",244,[[]]],[11,"cast","","",244,[[]]],[11,"from","polars_arrow_rvsry99dx::ipc::gen::Tensor","",157,[[]]],[11,"into","","",157,[[]]],[11,"to_owned","","",157,[[]]],[11,"clone_into","","",157,[[]]],[11,"try_from","","",157,[[],["result",4]]],[11,"try_into","","",157,[[],["result",4]]],[11,"borrow","","",157,[[]]],[11,"borrow_mut","","",157,[[]]],[11,"type_id","","",157,[[],["typeid",3]]],[11,"vzip","","",157,[[]]],[11,"from_cast","","",157,[[]]],[11,"cast","","",157,[[]]],[11,"from","","",158,[[]]],[11,"into","","",158,[[]]],[11,"try_from","","",158,[[],["result",4]]],[11,"try_into","","",158,[[],["result",4]]],[11,"borrow","","",158,[[]]],[11,"borrow_mut","","",158,[[]]],[11,"type_id","","",158,[[],["typeid",3]]],[11,"vzip","","",158,[[]]],[11,"from_cast","","",158,[[]]],[11,"cast","","",158,[[]]],[11,"from","","",161,[[]]],[11,"into","","",161,[[]]],[11,"try_from","","",161,[[],["result",4]]],[11,"try_into","","",161,[[],["result",4]]],[11,"borrow","","",161,[[]]],[11,"borrow_mut","","",161,[[]]],[11,"type_id","","",161,[[],["typeid",3]]],[11,"vzip","","",161,[[]]],[11,"from_cast","","",161,[[]]],[11,"cast","","",161,[[]]],[11,"from","","",159,[[]]],[11,"into","","",159,[[]]],[11,"to_owned","","",159,[[]]],[11,"clone_into","","",159,[[]]],[11,"try_from","","",159,[[],["result",4]]],[11,"try_into","","",159,[[],["result",4]]],[11,"borrow","","",159,[[]]],[11,"borrow_mut","","",159,[[]]],[11,"type_id","","",159,[[],["typeid",3]]],[11,"vzip","","",159,[[]]],[11,"from_cast","","",159,[[]]],[11,"cast","","",159,[[]]],[11,"from","","",160,[[]]],[11,"into","","",160,[[]]],[11,"try_from","","",160,[[],["result",4]]],[11,"try_into","","",160,[[],["result",4]]],[11,"borrow","","",160,[[]]],[11,"borrow_mut","","",160,[[]]],[11,"type_id","","",160,[[],["typeid",3]]],[11,"vzip","","",160,[[]]],[11,"from_cast","","",160,[[]]],[11,"cast","","",160,[[]]],[11,"from","","",162,[[]]],[11,"into","","",162,[[]]],[11,"try_from","","",162,[[],["result",4]]],[11,"try_into","","",162,[[],["result",4]]],[11,"borrow","","",162,[[]]],[11,"borrow_mut","","",162,[[]]],[11,"type_id","","",162,[[],["typeid",3]]],[11,"vzip","","",162,[[]]],[11,"from_cast","","",162,[[]]],[11,"cast","","",162,[[]]],[11,"from","","",245,[[]]],[11,"into","","",245,[[]]],[11,"try_from","","",245,[[],["result",4]]],[11,"try_into","","",245,[[],["result",4]]],[11,"borrow","","",245,[[]]],[11,"borrow_mut","","",245,[[]]],[11,"type_id","","",245,[[],["typeid",3]]],[11,"vzip","","",245,[[]]],[11,"from_cast","","",245,[[]]],[11,"cast","","",245,[[]]],[11,"from","","",246,[[]]],[11,"into","","",246,[[]]],[11,"try_from","","",246,[[],["result",4]]],[11,"try_into","","",246,[[],["result",4]]],[11,"borrow","","",246,[[]]],[11,"borrow_mut","","",246,[[]]],[11,"type_id","","",246,[[],["typeid",3]]],[11,"vzip","","",246,[[]]],[11,"from_cast","","",246,[[]]],[11,"cast","","",246,[[]]],[11,"from","polars_arrow_rvsry99dx::json::reader","",163,[[]]],[11,"into","","",163,[[]]],[11,"try_from","","",163,[[],["result",4]]],[11,"try_into","","",163,[[],["result",4]]],[11,"borrow","","",163,[[]]],[11,"borrow_mut","","",163,[[]]],[11,"type_id","","",163,[[],["typeid",3]]],[11,"vzip","","",163,[[]]],[11,"from_cast","","",163,[[]]],[11,"cast","","",163,[[]]],[11,"from","","",164,[[]]],[11,"into","","",164,[[]]],[11,"try_from","","",164,[[],["result",4]]],[11,"try_into","","",164,[[],["result",4]]],[11,"borrow","","",164,[[]]],[11,"borrow_mut","","",164,[[]]],[11,"type_id","","",164,[[],["typeid",3]]],[11,"vzip","","",164,[[]]],[11,"from_cast","","",164,[[]]],[11,"cast","","",164,[[]]],[11,"from","polars_arrow_rvsry99dx::record_batch","",166,[[]]],[11,"into","","",166,[[]]],[11,"to_owned","","",166,[[]]],[11,"clone_into","","",166,[[]]],[11,"try_from","","",166,[[],["result",4]]],[11,"try_into","","",166,[[],["result",4]]],[11,"borrow","","",166,[[]]],[11,"borrow_mut","","",166,[[]]],[11,"type_id","","",166,[[],["typeid",3]]],[11,"vzip","","",166,[[]]],[11,"from_cast","","",166,[[]]],[11,"cast","","",166,[[]]],[11,"from","polars_arrow_rvsry99dx::tensor","",167,[[]]],[11,"into","","",167,[[]]],[11,"try_from","","",167,[[],["result",4]]],[11,"try_into","","",167,[[],["result",4]]],[11,"borrow","","",167,[[]]],[11,"borrow_mut","","",167,[[]]],[11,"type_id","","",167,[[],["typeid",3]]],[11,"vzip","","",167,[[]]],[11,"from_cast","","",167,[[]]],[11,"cast","","",167,[[]]],[11,"from","polars_arrow_rvsry99dx::util::integration_util","",168,[[]]],[11,"into","","",168,[[]]],[11,"try_from","","",168,[[],["result",4]]],[11,"try_into","","",168,[[],["result",4]]],[11,"borrow","","",168,[[]]],[11,"borrow_mut","","",168,[[]]],[11,"type_id","","",168,[[],["typeid",3]]],[11,"vzip","","",168,[[]]],[11,"from_cast","","",168,[[]]],[11,"cast","","",168,[[]]],[11,"from","","",169,[[]]],[11,"into","","",169,[[]]],[11,"try_from","","",169,[[],["result",4]]],[11,"try_into","","",169,[[],["result",4]]],[11,"borrow","","",169,[[]]],[11,"borrow_mut","","",169,[[]]],[11,"type_id","","",169,[[],["typeid",3]]],[11,"vzip","","",169,[[]]],[11,"from_cast","","",169,[[]]],[11,"cast","","",169,[[]]],[11,"from","","",170,[[]]],[11,"into","","",170,[[]]],[11,"try_from","","",170,[[],["result",4]]],[11,"try_into","","",170,[[],["result",4]]],[11,"borrow","","",170,[[]]],[11,"borrow_mut","","",170,[[]]],[11,"type_id","","",170,[[],["typeid",3]]],[11,"vzip","","",170,[[]]],[11,"from_cast","","",170,[[]]],[11,"cast","","",170,[[]]],[11,"from","","",247,[[]]],[11,"into","","",247,[[]]],[11,"try_from","","",247,[[],["result",4]]],[11,"try_into","","",247,[[],["result",4]]],[11,"borrow","","",247,[[]]],[11,"borrow_mut","","",247,[[]]],[11,"type_id","","",247,[[],["typeid",3]]],[11,"vzip","","",247,[[]]],[11,"from_cast","","",247,[[]]],[11,"cast","","",247,[[]]],[11,"from","","",171,[[]]],[11,"into","","",171,[[]]],[11,"to_owned","","",171,[[]]],[11,"clone_into","","",171,[[]]],[11,"try_from","","",171,[[],["result",4]]],[11,"try_into","","",171,[[],["result",4]]],[11,"borrow","","",171,[[]]],[11,"borrow_mut","","",171,[[]]],[11,"type_id","","",171,[[],["typeid",3]]],[11,"vzip","","",171,[[]]],[11,"from_cast","","",171,[[]]],[11,"cast","","",171,[[]]],[11,"from","polars_arrow_rvsry99dx::util::string_writer","",172,[[]]],[11,"into","","",172,[[]]],[11,"to_string","","",172,[[],["string",3]]],[11,"try_from","","",172,[[],["result",4]]],[11,"try_into","","",172,[[],["result",4]]],[11,"borrow","","",172,[[]]],[11,"borrow_mut","","",172,[[]]],[11,"type_id","","",172,[[],["typeid",3]]],[11,"vzip","","",172,[[]]],[11,"from_cast","","",172,[[]]],[11,"cast","","",172,[[]]],[11,"as_any","polars_arrow_rvsry99dx::array","",0,[[],["any",8]]],[11,"data","","",0,[[],["arraydataref",6]]],[11,"data_ref","","",0,[[],["arraydataref",6]]],[11,"as_any","","",1,[[],["any",8]]],[11,"data","","",1,[[],["arraydataref",6]]],[11,"data_ref","","",1,[[],["arraydataref",6]]],[11,"as_any","","",2,[[],["any",8]]],[11,"data","","",2,[[],["arraydataref",6]]],[11,"data_ref","","",2,[[],["arraydataref",6]]],[11,"as_any","","",3,[[],["any",8]]],[11,"data","","",3,[[],["arraydataref",6]]],[11,"data_ref","","",3,[[],["arraydataref",6]]],[11,"as_any","","",4,[[],["any",8]]],[11,"data","","",4,[[],["arraydataref",6]]],[11,"data_ref","","",4,[[],["arraydataref",6]]],[11,"as_any","","",5,[[],["any",8]]],[11,"data","","",5,[[],["arraydataref",6]]],[11,"data_ref","","",5,[[],["arraydataref",6]]],[11,"as_any","","",6,[[],["any",8]]],[11,"data","","",6,[[],["arraydataref",6]]],[11,"data_ref","","",6,[[],["arraydataref",6]]],[11,"len","","Returns the length (i.e., number of elements) of this array",6,[[]]],[11,"as_any","","",7,[[],["any",8]]],[11,"data","","",7,[[],["arraydataref",6]]],[11,"data_ref","","",7,[[],["arraydataref",6]]],[11,"as_any","","",19,[[],["any",8]]],[11,"data","","",19,[[],["arraydataref",6]]],[11,"data_ref","","",19,[[],["arraydataref",6]]],[11,"is_null","","Returns whether the element at `index` is null. All…",19,[[]]],[11,"is_valid","","Returns whether the element at `index` is valid. All…",19,[[]]],[11,"null_count","","Returns the total number of null values in this array. The…",19,[[]]],[11,"as_any","","",20,[[],["any",8]]],[11,"data","","",20,[[],["arraydataref",6]]],[11,"data_ref","","",20,[[],["arraydataref",6]]],[11,"values","","",0,[[],["buffer",3]]],[11,"value","","",0,[[]]],[11,"values","","",0,[[],["buffer",3]]],[11,"value","","",0,[[]]],[11,"values","polars_arrow_rvsry99dx","",248,[[],["buffer",3]]],[11,"value","","",248,[[]]],[11,"value_offset_at","polars_arrow_rvsry99dx::array","",1,[[]]],[11,"value_offset_at","","",2,[[]]],[11,"value_offset_at","","",3,[[]]],[11,"value_offset_at","","",4,[[]]],[11,"value_offset_at","","",5,[[]]],[11,"new","","",173,[[]]],[11,"len","","",173,[[]]],[11,"capacity","","",173,[[]]],[11,"advance","","",173,[[],["result",6]]],[11,"reserve","","",173,[[],["result",6]]],[11,"append","","",173,[[],["result",6]]],[11,"append_n","","",173,[[],["result",6]]],[11,"append_slice","","",173,[[],["result",6]]],[11,"finish","","",173,[[],["buffer",3]]],[11,"new","","",173,[[]]],[11,"advance","","",173,[[],["result",6]]],[11,"append","","",173,[[],["result",6]]],[11,"append_n","","",173,[[],["result",6]]],[11,"append_slice","","",173,[[],["result",6]]],[11,"reserve","","",173,[[],["result",6]]],[11,"finish","","",173,[[],["buffer",3]]],[11,"as_any","","Returns the builder as a non-mutable `Any` reference.",8,[[],["any",8]]],[11,"as_any_mut","","Returns the builder as a mutable `Any` reference.",8,[[],["any",8]]],[11,"into_box_any","","Returns the boxed builder as a box of `Any`.",8,[[["box",3]],[["box",3],["any",8]]]],[11,"len","","Returns the number of array slots in the builder",8,[[]]],[11,"append_data","","Appends data from other arrays into the builder",8,[[],["result",6]]],[11,"data_type","","Returns the data type of the builder",8,[[],["datatype",4]]],[11,"finish","","Builds the array and reset this builder.",8,[[],["arrayref",6]]],[11,"as_any","","Returns the builder as a non-mutable `Any` reference.",9,[[],["any",8]]],[11,"append_data","","Appends data from other arrays into the builder",9,[[],["result",6]]],[11,"data_type","","Returns the data type of the builder",9,[[],["datatype",4]]],[11,"as_any_mut","","Returns the builder as a mutable `Any` reference.",9,[[],["any",8]]],[11,"into_box_any","","Returns the boxed builder as a box of `Any`.",9,[[["box",3]],[["box",3],["any",8]]]],[11,"len","","Returns the number of array slots in the builder",9,[[]]],[11,"finish","","Builds the array and reset this builder.",9,[[],["arrayref",6]]],[11,"as_any","","Returns the builder as a non-mutable `Any` reference.",10,[[],["any",8]]],[11,"append_data","","Appends data from other arrays into the builder",10,[[],["result",6]]],[11,"data_type","","Returns the data type of the builder",10,[[],["datatype",4]]],[11,"as_any_mut","","Returns the builder as a mutable `Any` reference.",10,[[],["any",8]]],[11,"into_box_any","","Returns the boxed builder as a box of `Any`.",10,[[["box",3]],[["box",3],["any",8]]]],[11,"len","","Returns the number of array slots in the builder",10,[[]]],[11,"finish","","Builds the array and reset this builder.",10,[[],["arrayref",6]]],[11,"as_any","","Returns the builder as a non-mutable `Any` reference.",11,[[],["any",8]]],[11,"append_data","","Appends data from other arrays into the builder",11,[[],["result",6]]],[11,"data_type","","Returns the data type of the builder",11,[[],["datatype",4]]],[11,"as_any_mut","","Returns the builder as a mutable `Any` reference.",11,[[],["any",8]]],[11,"into_box_any","","Returns the boxed builder as a box of `Any`.",11,[[["box",3]],[["box",3],["any",8]]]],[11,"len","","Returns the number of array slots in the builder",11,[[]]],[11,"finish","","Builds the array and reset this builder.",11,[[],["arrayref",6]]],[11,"as_any","","Returns the builder as a non-mutable `Any` reference.",12,[[],["any",8]]],[11,"append_data","","Appends data from other arrays into the builder",12,[[],["result",6]]],[11,"data_type","","Returns the data type of the builder",12,[[],["datatype",4]]],[11,"as_any_mut","","Returns the builder as a mutable `Any` reference.",12,[[],["any",8]]],[11,"into_box_any","","Returns the boxed builder as a box of `Any`.",12,[[["box",3]],[["box",3],["any",8]]]],[11,"len","","Returns the number of array slots in the builder",12,[[]]],[11,"finish","","Builds the array and reset this builder.",12,[[],["arrayref",6]]],[11,"as_any","","Returns the builder as a non-mutable `Any` reference.",13,[[],["any",8]]],[11,"append_data","","Appends data from other arrays into the builder",13,[[],["result",6]]],[11,"data_type","","Returns the data type of the builder",13,[[],["datatype",4]]],[11,"as_any_mut","","Returns the builder as a mutable `Any` reference.",13,[[],["any",8]]],[11,"into_box_any","","Returns the boxed builder as a box of `Any`.",13,[[["box",3]],[["box",3],["any",8]]]],[11,"len","","Returns the number of array slots in the builder",13,[[]]],[11,"finish","","Builds the array and reset this builder.",13,[[],["arrayref",6]]],[11,"len","","Returns the number of array slots in the builder.",14,[[]]],[11,"append_data","","Appends data from other arrays into the builder",14,[[],["result",6]]],[11,"data_type","","Returns the data type of the builder",14,[[],["datatype",4]]],[11,"finish","","Builds the array.",14,[[],["arrayref",6]]],[11,"as_any","","Returns the builder as a non-mutable `Any` reference.",14,[[],["any",8]]],[11,"as_any_mut","","Returns the builder as a mutable `Any` reference.",14,[[],["any",8]]],[11,"into_box_any","","Returns the boxed builder as a box of `Any`.",14,[[["box",3]],[["box",3],["any",8]]]],[11,"as_any","","Returns the builder as an non-mutable `Any` reference.",15,[[],["any",8]]],[11,"as_any_mut","","Returns the builder as an mutable `Any` reference.",15,[[],["any",8]]],[11,"into_box_any","","Returns the boxed builder as a box of `Any`.",15,[[["box",3]],[["box",3],["any",8]]]],[11,"len","","Returns the number of array slots in the builder",15,[[]]],[11,"append_data","","Appends data from other arrays into the builder",15,[[],["result",6]]],[11,"data_type","","Returns the data type of the builder",15,[[],["datatype",4]]],[11,"finish","","Builds the array and reset this builder.",15,[[],["arrayref",6]]],[11,"as_any","","Returns the builder as an non-mutable `Any` reference.",16,[[],["any",8]]],[11,"as_any_mut","","Returns the builder as an mutable `Any` reference.",16,[[],["any",8]]],[11,"into_box_any","","Returns the boxed builder as a box of `Any`.",16,[[["box",3]],[["box",3],["any",8]]]],[11,"len","","Returns the number of array slots in the builder",16,[[]]],[11,"append_data","","Appends data from other arrays into the builder",16,[[],["result",6]]],[11,"data_type","","Returns the data type of the builder",16,[[],["datatype",4]]],[11,"finish","","Builds the array and reset this builder.",16,[[],["arrayref",6]]],[11,"equals","","",0,[[["array",8]]]],[11,"range_equals","","",0,[[["array",8]]]],[11,"equals","polars_arrow_rvsry99dx","",248,[[["array",8]]]],[11,"equals","polars_arrow_rvsry99dx::array","",1,[[["array",8]]]],[11,"range_equals","","",1,[[["array",8]]]],[11,"equals","","",7,[[["array",8]]]],[11,"range_equals","","",7,[[["array",8]]]],[11,"equals","","",2,[[["array",8]]]],[11,"range_equals","","",2,[[["array",8]]]],[11,"equals","","",3,[[["array",8]]]],[11,"range_equals","","",3,[[["array",8]]]],[11,"equals","","",4,[[["array",8]]]],[11,"range_equals","","",4,[[["array",8]]]],[11,"equals","","",5,[[["array",8]]]],[11,"range_equals","","",5,[[["array",8]]]],[11,"equals","","",6,[[["array",8]]]],[11,"range_equals","","",6,[[["array",8]]]],[11,"equals","","",20,[[["array",8]]]],[11,"range_equals","","",20,[[["array",8]]]],[11,"equals","","",19,[[["array",8]]]],[11,"range_equals","","",19,[[["array",8]]]],[11,"equals_json","","",0,[[]]],[11,"equals_json","","",1,[[]]],[11,"equals_json","","",7,[[]]],[11,"equals_json","","",2,[[]]],[11,"equals_json","","",6,[[]]],[11,"equals_json","","",3,[[]]],[11,"equals_json","","",4,[[]]],[11,"equals_json","","",5,[[]]],[11,"equals_json","","",20,[[]]],[11,"equals_json","","",19,[[]]],[11,"cmp_value","","",0,[[],["ordering",4]]],[11,"cmp_value","","",4,[[],["ordering",4]]],[11,"cmp_value","","",19,[[],["ordering",4]]],[11,"get_data_type","polars_arrow_rvsry99dx::datatypes","",174,[[],["datatype",4]]],[11,"get_bit_width","","",174,[[]]],[11,"default_value","","",174,[[]]],[11,"get_data_type","","",175,[[],["datatype",4]]],[11,"get_bit_width","","",175,[[]]],[11,"default_value","","",175,[[]]],[11,"get_data_type","","",176,[[],["datatype",4]]],[11,"get_bit_width","","",176,[[]]],[11,"default_value","","",176,[[]]],[11,"get_data_type","","",177,[[],["datatype",4]]],[11,"get_bit_width","","",177,[[]]],[11,"default_value","","",177,[[]]],[11,"get_data_type","","",178,[[],["datatype",4]]],[11,"get_bit_width","","",178,[[]]],[11,"default_value","","",178,[[]]],[11,"get_data_type","","",179,[[],["datatype",4]]],[11,"get_bit_width","","",179,[[]]],[11,"default_value","","",179,[[]]],[11,"get_data_type","","",180,[[],["datatype",4]]],[11,"get_bit_width","","",180,[[]]],[11,"default_value","","",180,[[]]],[11,"get_data_type","","",181,[[],["datatype",4]]],[11,"get_bit_width","","",181,[[]]],[11,"default_value","","",181,[[]]],[11,"get_data_type","","",182,[[],["datatype",4]]],[11,"get_bit_width","","",182,[[]]],[11,"default_value","","",182,[[]]],[11,"get_data_type","","",183,[[],["datatype",4]]],[11,"get_bit_width","","",183,[[]]],[11,"default_value","","",183,[[]]],[11,"get_data_type","","",184,[[],["datatype",4]]],[11,"get_bit_width","","",184,[[]]],[11,"default_value","","",184,[[]]],[11,"get_data_type","","",185,[[],["datatype",4]]],[11,"get_bit_width","","",185,[[]]],[11,"default_value","","",185,[[]]],[11,"get_data_type","","",186,[[],["datatype",4]]],[11,"get_bit_width","","",186,[[]]],[11,"default_value","","",186,[[]]],[11,"get_data_type","","",187,[[],["datatype",4]]],[11,"get_bit_width","","",187,[[]]],[11,"default_value","","",187,[[]]],[11,"get_data_type","","",188,[[],["datatype",4]]],[11,"get_bit_width","","",188,[[]]],[11,"default_value","","",188,[[]]],[11,"get_data_type","","",189,[[],["datatype",4]]],[11,"get_bit_width","","",189,[[]]],[11,"default_value","","",189,[[]]],[11,"get_data_type","","",190,[[],["datatype",4]]],[11,"get_bit_width","","",190,[[]]],[11,"default_value","","",190,[[]]],[11,"get_data_type","","",191,[[],["datatype",4]]],[11,"get_bit_width","","",191,[[]]],[11,"default_value","","",191,[[]]],[11,"get_data_type","","",192,[[],["datatype",4]]],[11,"get_bit_width","","",192,[[]]],[11,"default_value","","",192,[[]]],[11,"get_data_type","","",193,[[],["datatype",4]]],[11,"get_bit_width","","",193,[[]]],[11,"default_value","","",193,[[]]],[11,"get_data_type","","",194,[[],["datatype",4]]],[11,"get_bit_width","","",194,[[]]],[11,"default_value","","",194,[[]]],[11,"get_data_type","","",195,[[],["datatype",4]]],[11,"get_bit_width","","",195,[[]]],[11,"default_value","","",195,[[]]],[11,"get_data_type","","",196,[[],["datatype",4]]],[11,"get_bit_width","","",196,[[]]],[11,"default_value","","",196,[[]]],[11,"get_data_type","","",197,[[],["datatype",4]]],[11,"get_bit_width","","",197,[[]]],[11,"default_value","","",197,[[]]],[11,"get_data_type","","",198,[[],["datatype",4]]],[11,"get_bit_width","","",198,[[]]],[11,"default_value","","",198,[[]]],[11,"get_data_type","","",199,[[],["datatype",4]]],[11,"get_bit_width","","",199,[[]]],[11,"default_value","","",199,[[]]],[11,"get_data_type","","",200,[[],["datatype",4]]],[11,"get_bit_width","","",200,[[]]],[11,"default_value","","",200,[[]]],[11,"get_time_unit","","",185,[[],["timeunit",4]]],[11,"get_time_unit","","",186,[[],["timeunit",4]]],[11,"get_time_unit","","",187,[[],["timeunit",4]]],[11,"get_time_unit","","",188,[[],["timeunit",4]]],[11,"schema","polars_arrow_rvsry99dx::ipc::reader","",51,[[],["schemaref",6]]],[11,"next_batch","","",51,[[],[["result",6],["option",4]]]],[11,"schema","","",52,[[],["schemaref",6]]],[11,"next_batch","","",52,[[],[["result",6],["option",4]]]],[11,"drop","polars_arrow_rvsry99dx::array","",14,[[]]],[11,"drop","polars_arrow_rvsry99dx::buffer","",32,[[]]],[11,"drop","polars_arrow_rvsry99dx::ipc::writer","",53,[[]]],[11,"drop","","",54,[[]]],[11,"from","polars_arrow_rvsry99dx::array","",0,[[["vec",3]]]],[11,"from","","",0,[[["vec",3],["option",4]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["vec",3],["option",4]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["option",4],["vec",3]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["vec",3],["option",4]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["option",4],["vec",3]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["vec",3],["option",4]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["vec",3],["option",4]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["option",4],["vec",3]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["vec",3],["option",4]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["option",4],["vec",3]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["option",4],["vec",3]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["vec",3],["option",4]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["option",4],["vec",3]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["option",4],["vec",3]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["vec",3],["option",4]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["vec",3],["option",4]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["option",4],["vec",3]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["vec",3],["option",4]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["vec",3],["option",4]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["vec",3],["option",4]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["vec",3],["option",4]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["vec",3],["option",4]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["vec",3],["option",4]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[["vec",3],["option",4]]]],[11,"from","polars_arrow_rvsry99dx","",248,[[["vec",3]]]],[11,"from","","",248,[[["option",4],["vec",3]]]],[11,"from","polars_arrow_rvsry99dx::array","",0,[[["arraydataref",6]]]],[11,"from","","",1,[[["arraydataref",6]]]],[11,"from","","",2,[[["arraydataref",6]]]],[11,"from","","",3,[[["arraydataref",6]]]],[11,"from","","",4,[[["arraydataref",6]]]],[11,"from","","",5,[[["arraydataref",6]]]],[11,"from","","",4,[[["vec",3]]]],[11,"from","","",3,[[["vec",3]]]],[11,"from","","",3,[[["listarray",3]]]],[11,"from","","",4,[[["listarray",3]]]],[11,"from","","",5,[[["fixedsizelistarray",3]]]],[11,"from","","",6,[[["arraydataref",6]]]],[11,"from","","",6,[[["vec",3]]]],[11,"from","","",6,[[]]],[11,"from","","",7,[[["arraydataref",6]]]],[11,"from","","",19,[[["arraydataref",6]]]],[11,"from","","",20,[[["arraydataref",6]]]],[11,"from","polars_arrow_rvsry99dx::bitmap","",30,[[["buffer",3]]]],[11,"from","polars_arrow_rvsry99dx::buffer","",31,[[]]],[11,"from","polars_arrow_rvsry99dx::error","",50,[[["error",3]]]],[11,"from","","",50,[[["error",3]]]],[11,"from","","",50,[[["fromutf8error",3]]]],[11,"from","polars_arrow_rvsry99dx::datatypes","",48,[[["field",3]],["field",3]]],[11,"from","polars_arrow_rvsry99dx::record_batch","Create a record batch from struct array.",166,[[["structarray",3]]]],[11,"into","","",166,[[],["structarray",3]]],[11,"clone","polars_arrow_rvsry99dx::array","",17,[[],["arraydata",3]]],[11,"clone","polars_arrow_rvsry99dx::bitmap","",30,[[],["bitmap",3]]],[11,"clone","polars_arrow_rvsry99dx::buffer","",31,[[],["buffer",3]]],[11,"clone","polars_arrow_rvsry99dx::compute::kernels::sort","",33,[[],["sortoptions",3]]],[11,"clone","","",34,[[],["sortcolumn",3]]],[11,"clone","polars_arrow_rvsry99dx::compute::kernels::take","",35,[[],["takeoptions",3]]],[11,"clone","polars_arrow_rvsry99dx::datatypes","",40,[[],["datatype",4]]],[11,"clone","","",41,[[],["dateunit",4]]],[11,"clone","","",42,[[],["timeunit",4]]],[11,"clone","","",43,[[],["intervalunit",4]]],[11,"clone","","",48,[[],["field",3]]],[11,"clone","","",49,[[],["schema",3]]],[11,"clone","polars_arrow_rvsry99dx::error","",50,[[],["arrowerror",4]]],[11,"clone","polars_arrow_rvsry99dx::ipc::gen::File","",57,[[],["block",3]]],[11,"clone","","",55,[[],["footer",3]]],[11,"clone","polars_arrow_rvsry99dx::ipc::gen::Message","",65,[[],["messageheader",4]]],[11,"clone","","",66,[[],["fieldnode",3]]],[11,"clone","","",59,[[],["recordbatch",3]]],[11,"clone","","",61,[[],["dictionarybatch",3]]],[11,"clone","","",63,[[],["message",3]]],[11,"clone","polars_arrow_rvsry99dx::ipc::gen::Schema","",111,[[],["metadataversion",4]]],[11,"clone","","",112,[[],["unionmode",4]]],[11,"clone","","",113,[[],["precision",4]]],[11,"clone","","",114,[[],["dateunit",4]]],[11,"clone","","",115,[[],["timeunit",4]]],[11,"clone","","",116,[[],["intervalunit",4]]],[11,"clone","","",117,[[],["type",4]]],[11,"clone","","",118,[[],["dictionarykind",4]]],[11,"clone","","",119,[[],["endianness",4]]],[11,"clone","","",120,[[],["buffer",3]]],[11,"clone","","",70,[[],["null",3]]],[11,"clone","","",71,[[],["struct_",3]]],[11,"clone","","",72,[[],["list",3]]],[11,"clone","","",73,[[],["largelist",3]]],[11,"clone","","",74,[[],["fixedsizelist",3]]],[11,"clone","","",76,[[],["map",3]]],[11,"clone","","",78,[[],["union",3]]],[11,"clone","","",80,[[],["int",3]]],[11,"clone","","",82,[[],["floatingpoint",3]]],[11,"clone","","",84,[[],["utf8",3]]],[11,"clone","","",85,[[],["binary",3]]],[11,"clone","","",86,[[],["largeutf8",3]]],[11,"clone","","",87,[[],["largebinary",3]]],[11,"clone","","",88,[[],["fixedsizebinary",3]]],[11,"clone","","",90,[[],["bool",3]]],[11,"clone","","",91,[[],["decimal",3]]],[11,"clone","","",93,[[],["date",3]]],[11,"clone","","",95,[[],["time",3]]],[11,"clone","","",97,[[],["timestamp",3]]],[11,"clone","","",99,[[],["interval",3]]],[11,"clone","","",101,[[],["duration",3]]],[11,"clone","","",103,[[],["keyvalue",3]]],[11,"clone","","",105,[[],["dictionaryencoding",3]]],[11,"clone","","",107,[[],["field",3]]],[11,"clone","","",109,[[],["schema",3]]],[11,"clone","polars_arrow_rvsry99dx::ipc::gen::SparseTensor","",152,[[],["sparsematrixcompressedaxis",4]]],[11,"clone","","",153,[[],["sparsetensorindex",4]]],[11,"clone","","",146,[[],["sparsetensorindexcoo",3]]],[11,"clone","","",148,[[],["sparsematrixindexcsx",3]]],[11,"clone","","",150,[[],["sparsetensor",3]]],[11,"clone","polars_arrow_rvsry99dx::ipc::gen::Tensor","",157,[[],["tensordim",3]]],[11,"clone","","",159,[[],["tensor",3]]],[11,"clone","polars_arrow_rvsry99dx::record_batch","",166,[[],["recordbatch",3]]],[11,"clone","polars_arrow_rvsry99dx::util::integration_util","",171,[[],["arrowjsoncolumn",3]]],[11,"default","polars_arrow_rvsry99dx::compute::kernels::sort","",33,[[]]],[11,"default","polars_arrow_rvsry99dx::compute::kernels::take","",35,[[]]],[11,"default","polars_arrow_rvsry99dx::csv::reader","",37,[[]]],[11,"default","polars_arrow_rvsry99dx::csv::writer","",39,[[]]],[11,"default","polars_arrow_rvsry99dx::ipc::gen::File","",56,[[]]],[11,"default","polars_arrow_rvsry99dx::ipc::gen::Message","",60,[[]]],[11,"default","","",62,[[]]],[11,"default","","",64,[[]]],[11,"default","polars_arrow_rvsry99dx::ipc::gen::Schema","",207,[[]]],[11,"default","","",208,[[]]],[11,"default","","",209,[[]]],[11,"default","","",210,[[]]],[11,"default","","",75,[[]]],[11,"default","","",77,[[]]],[11,"default","","",79,[[]]],[11,"default","","",81,[[]]],[11,"default","","",83,[[]]],[11,"default","","",211,[[]]],[11,"default","","",212,[[]]],[11,"default","","",213,[[]]],[11,"default","","",214,[[]]],[11,"default","","",89,[[]]],[11,"default","","",215,[[]]],[11,"default","","",92,[[]]],[11,"default","","",94,[[]]],[11,"default","","",96,[[]]],[11,"default","","",98,[[]]],[11,"default","","",100,[[]]],[11,"default","","",102,[[]]],[11,"default","","",104,[[]]],[11,"default","","",106,[[]]],[11,"default","","",108,[[]]],[11,"default","","",110,[[]]],[11,"default","polars_arrow_rvsry99dx::ipc::gen::SparseTensor","",147,[[]]],[11,"default","","",149,[[]]],[11,"default","","",151,[[]]],[11,"default","polars_arrow_rvsry99dx::ipc::gen::Tensor","",158,[[]]],[11,"default","","",160,[[]]],[11,"default","polars_arrow_rvsry99dx::json::reader","",164,[[]]],[11,"cmp","polars_arrow_rvsry99dx::datatypes","",40,[[["datatype",4]],["ordering",4]]],[11,"cmp","","",41,[[["dateunit",4]],["ordering",4]]],[11,"cmp","","",42,[[["timeunit",4]],["ordering",4]]],[11,"cmp","","",43,[[["intervalunit",4]],["ordering",4]]],[11,"cmp","","",48,[[["field",3]],["ordering",4]]],[11,"cmp","polars_arrow_rvsry99dx::ipc::gen::Message","",65,[[["messageheader",4]],["ordering",4]]],[11,"cmp","polars_arrow_rvsry99dx::ipc::gen::Schema","",111,[[["metadataversion",4]],["ordering",4]]],[11,"cmp","","",112,[[["unionmode",4]],["ordering",4]]],[11,"cmp","","",113,[[["precision",4]],["ordering",4]]],[11,"cmp","","",114,[[["dateunit",4]],["ordering",4]]],[11,"cmp","","",115,[[["timeunit",4]],["ordering",4]]],[11,"cmp","","",116,[[["intervalunit",4]],["ordering",4]]],[11,"cmp","","",117,[[["type",4]],["ordering",4]]],[11,"cmp","","",118,[[["dictionarykind",4]],["ordering",4]]],[11,"cmp","","",119,[[["endianness",4]],["ordering",4]]],[11,"cmp","polars_arrow_rvsry99dx::ipc::gen::SparseTensor","",152,[[["sparsematrixcompressedaxis",4]],["ordering",4]]],[11,"cmp","","",153,[[["sparsetensorindex",4]],["ordering",4]]],[11,"eq","polars_arrow_rvsry99dx::array","",17,[[["arraydata",3]]]],[11,"ne","","",17,[[["arraydata",3]]]],[11,"eq","","",0,[[["primitivearray",3]]]],[11,"eq","polars_arrow_rvsry99dx","",248,[[["booleanarray",6]]]],[11,"eq","polars_arrow_rvsry99dx::array","",4,[[]]],[11,"eq","","",5,[[]]],[11,"eq","","",3,[[]]],[11,"eq","","",0,[[["value",4]]]],[11,"eq","","",1,[[["value",4]]]],[11,"eq","","",7,[[["value",4]]]],[11,"eq","","",2,[[["value",4]]]],[11,"eq","","",6,[[["value",4]]]],[11,"eq","","",3,[[["value",4]]]],[11,"eq","","",4,[[["value",4]]]],[11,"eq","","",5,[[["value",4]]]],[11,"eq","","",19,[[["value",4]]]],[11,"eq","polars_arrow_rvsry99dx::bitmap","",30,[[]]],[11,"eq","polars_arrow_rvsry99dx::buffer","",31,[[["buffer",3]]]],[11,"ne","","",31,[[["buffer",3]]]],[11,"eq","","",32,[[["mutablebuffer",3]]]],[11,"eq","polars_arrow_rvsry99dx::datatypes","",40,[[["datatype",4]]]],[11,"ne","","",40,[[["datatype",4]]]],[11,"eq","","",41,[[["dateunit",4]]]],[11,"eq","","",42,[[["timeunit",4]]]],[11,"eq","","",43,[[["intervalunit",4]]]],[11,"eq","","",48,[[["field",3]]]],[11,"ne","","",48,[[["field",3]]]],[11,"eq","","",49,[[["schema",3]]]],[11,"ne","","",49,[[["schema",3]]]],[11,"eq","polars_arrow_rvsry99dx::error","",50,[[["arrowerror",4]]]],[11,"ne","","",50,[[["arrowerror",4]]]],[11,"eq","polars_arrow_rvsry99dx::ipc::gen::File","",57,[[["block",3]]]],[11,"ne","","",57,[[["block",3]]]],[11,"eq","","",55,[[["footer",3]]]],[11,"ne","","",55,[[["footer",3]]]],[11,"eq","polars_arrow_rvsry99dx::ipc::gen::Message","",65,[[["messageheader",4]]]],[11,"eq","","",66,[[["fieldnode",3]]]],[11,"ne","","",66,[[["fieldnode",3]]]],[11,"eq","","",59,[[["recordbatch",3]]]],[11,"ne","","",59,[[["recordbatch",3]]]],[11,"eq","","",61,[[["dictionarybatch",3]]]],[11,"ne","","",61,[[["dictionarybatch",3]]]],[11,"eq","","",63,[[["message",3]]]],[11,"ne","","",63,[[["message",3]]]],[11,"eq","polars_arrow_rvsry99dx::ipc::gen::Schema","",111,[[["metadataversion",4]]]],[11,"eq","","",112,[[["unionmode",4]]]],[11,"eq","","",113,[[["precision",4]]]],[11,"eq","","",114,[[["dateunit",4]]]],[11,"eq","","",115,[[["timeunit",4]]]],[11,"eq","","",116,[[["intervalunit",4]]]],[11,"eq","","",117,[[["type",4]]]],[11,"eq","","",118,[[["dictionarykind",4]]]],[11,"eq","","",119,[[["endianness",4]]]],[11,"eq","","",120,[[["buffer",3]]]],[11,"ne","","",120,[[["buffer",3]]]],[11,"eq","","",70,[[["null",3]]]],[11,"ne","","",70,[[["null",3]]]],[11,"eq","","",71,[[["struct_",3]]]],[11,"ne","","",71,[[["struct_",3]]]],[11,"eq","","",72,[[["list",3]]]],[11,"ne","","",72,[[["list",3]]]],[11,"eq","","",73,[[["largelist",3]]]],[11,"ne","","",73,[[["largelist",3]]]],[11,"eq","","",74,[[["fixedsizelist",3]]]],[11,"ne","","",74,[[["fixedsizelist",3]]]],[11,"eq","","",76,[[["map",3]]]],[11,"ne","","",76,[[["map",3]]]],[11,"eq","","",78,[[["union",3]]]],[11,"ne","","",78,[[["union",3]]]],[11,"eq","","",80,[[["int",3]]]],[11,"ne","","",80,[[["int",3]]]],[11,"eq","","",82,[[["floatingpoint",3]]]],[11,"ne","","",82,[[["floatingpoint",3]]]],[11,"eq","","",84,[[["utf8",3]]]],[11,"ne","","",84,[[["utf8",3]]]],[11,"eq","","",85,[[["binary",3]]]],[11,"ne","","",85,[[["binary",3]]]],[11,"eq","","",86,[[["largeutf8",3]]]],[11,"ne","","",86,[[["largeutf8",3]]]],[11,"eq","","",87,[[["largebinary",3]]]],[11,"ne","","",87,[[["largebinary",3]]]],[11,"eq","","",88,[[["fixedsizebinary",3]]]],[11,"ne","","",88,[[["fixedsizebinary",3]]]],[11,"eq","","",90,[[["bool",3]]]],[11,"ne","","",90,[[["bool",3]]]],[11,"eq","","",91,[[["decimal",3]]]],[11,"ne","","",91,[[["decimal",3]]]],[11,"eq","","",93,[[["date",3]]]],[11,"ne","","",93,[[["date",3]]]],[11,"eq","","",95,[[["time",3]]]],[11,"ne","","",95,[[["time",3]]]],[11,"eq","","",97,[[["timestamp",3]]]],[11,"ne","","",97,[[["timestamp",3]]]],[11,"eq","","",99,[[["interval",3]]]],[11,"ne","","",99,[[["interval",3]]]],[11,"eq","","",101,[[["duration",3]]]],[11,"ne","","",101,[[["duration",3]]]],[11,"eq","","",103,[[["keyvalue",3]]]],[11,"ne","","",103,[[["keyvalue",3]]]],[11,"eq","","",105,[[["dictionaryencoding",3]]]],[11,"ne","","",105,[[["dictionaryencoding",3]]]],[11,"eq","","",107,[[["field",3]]]],[11,"ne","","",107,[[["field",3]]]],[11,"eq","","",109,[[["schema",3]]]],[11,"ne","","",109,[[["schema",3]]]],[11,"eq","polars_arrow_rvsry99dx::ipc::gen::SparseTensor","",152,[[["sparsematrixcompressedaxis",4]]]],[11,"eq","","",153,[[["sparsetensorindex",4]]]],[11,"eq","","",146,[[["sparsetensorindexcoo",3]]]],[11,"ne","","",146,[[["sparsetensorindexcoo",3]]]],[11,"eq","","",148,[[["sparsematrixindexcsx",3]]]],[11,"ne","","",148,[[["sparsematrixindexcsx",3]]]],[11,"eq","","",150,[[["sparsetensor",3]]]],[11,"ne","","",150,[[["sparsetensor",3]]]],[11,"eq","polars_arrow_rvsry99dx::ipc::gen::Tensor","",157,[[["tensordim",3]]]],[11,"ne","","",157,[[["tensordim",3]]]],[11,"eq","","",159,[[["tensor",3]]]],[11,"ne","","",159,[[["tensor",3]]]],[11,"partial_cmp","polars_arrow_rvsry99dx::datatypes","",40,[[["datatype",4]],[["option",4],["ordering",4]]]],[11,"lt","","",40,[[["datatype",4]]]],[11,"le","","",40,[[["datatype",4]]]],[11,"gt","","",40,[[["datatype",4]]]],[11,"ge","","",40,[[["datatype",4]]]],[11,"partial_cmp","","",41,[[["dateunit",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",42,[[["timeunit",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",43,[[["intervalunit",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",48,[[["field",3]],[["option",4],["ordering",4]]]],[11,"lt","","",48,[[["field",3]]]],[11,"le","","",48,[[["field",3]]]],[11,"gt","","",48,[[["field",3]]]],[11,"ge","","",48,[[["field",3]]]],[11,"partial_cmp","polars_arrow_rvsry99dx::ipc::gen::Message","",65,[[["messageheader",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","polars_arrow_rvsry99dx::ipc::gen::Schema","",111,[[["metadataversion",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",112,[[["unionmode",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",113,[[["precision",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",114,[[["dateunit",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",115,[[["timeunit",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",116,[[["intervalunit",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",117,[[["type",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",118,[[["dictionarykind",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",119,[[["endianness",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","polars_arrow_rvsry99dx::ipc::gen::SparseTensor","",152,[[["sparsematrixcompressedaxis",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",153,[[["sparsetensorindex",4]],[["option",4],["ordering",4]]]],[11,"to_string","polars_arrow_rvsry99dx::util::string_writer","",172,[[],["string",3]]],[11,"fmt","polars_arrow_rvsry99dx::array","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","polars_arrow_rvsry99dx::bitmap","",30,[[["formatter",3]],["result",6]]],[11,"fmt","polars_arrow_rvsry99dx::buffer","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","polars_arrow_rvsry99dx::datatypes","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","polars_arrow_rvsry99dx::error","",50,[[["formatter",3]],["result",6]]],[11,"fmt","polars_arrow_rvsry99dx::ipc::gen::File","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","polars_arrow_rvsry99dx::ipc::gen::Message","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","polars_arrow_rvsry99dx::ipc::gen::Schema","",111,[[["formatter",3]],["result",6]]],[11,"fmt","","",112,[[["formatter",3]],["result",6]]],[11,"fmt","","",113,[[["formatter",3]],["result",6]]],[11,"fmt","","",114,[[["formatter",3]],["result",6]]],[11,"fmt","","",115,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"fmt","","",117,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",93,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",99,[[["formatter",3]],["result",6]]],[11,"fmt","","",101,[[["formatter",3]],["result",6]]],[11,"fmt","","",103,[[["formatter",3]],["result",6]]],[11,"fmt","","",105,[[["formatter",3]],["result",6]]],[11,"fmt","","",107,[[["formatter",3]],["result",6]]],[11,"fmt","","",109,[[["formatter",3]],["result",6]]],[11,"fmt","polars_arrow_rvsry99dx::ipc::gen::SparseTensor","",152,[[["formatter",3]],["result",6]]],[11,"fmt","","",153,[[["formatter",3]],["result",6]]],[11,"fmt","","",146,[[["formatter",3]],["result",6]]],[11,"fmt","","",148,[[["formatter",3]],["result",6]]],[11,"fmt","","",150,[[["formatter",3]],["result",6]]],[11,"fmt","polars_arrow_rvsry99dx::ipc::gen::Tensor","",157,[[["formatter",3]],["result",6]]],[11,"fmt","","",159,[[["formatter",3]],["result",6]]],[11,"fmt","polars_arrow_rvsry99dx::record_batch","",166,[[["formatter",3]],["result",6]]],[11,"fmt","polars_arrow_rvsry99dx::util::integration_util","",168,[[["formatter",3]],["result",6]]],[11,"fmt","","",169,[[["formatter",3]],["result",6]]],[11,"fmt","","",170,[[["formatter",3]],["result",6]]],[11,"fmt","","",247,[[["formatter",3]],["result",6]]],[11,"fmt","","",171,[[["formatter",3]],["result",6]]],[11,"fmt","polars_arrow_rvsry99dx::datatypes","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","polars_arrow_rvsry99dx::error","",50,[[["formatter",3]],["result",6]]],[11,"hash","polars_arrow_rvsry99dx::datatypes","",40,[[]]],[11,"hash","","",41,[[]]],[11,"hash","","",42,[[]]],[11,"hash","","",43,[[]]],[11,"hash","","",48,[[]]],[11,"hash","polars_arrow_rvsry99dx::ipc::gen::Message","",65,[[]]],[11,"hash","polars_arrow_rvsry99dx::ipc::gen::Schema","",111,[[]]],[11,"hash","","",112,[[]]],[11,"hash","","",113,[[]]],[11,"hash","","",114,[[]]],[11,"hash","","",115,[[]]],[11,"hash","","",116,[[]]],[11,"hash","","",117,[[]]],[11,"hash","","",118,[[]]],[11,"hash","","",119,[[]]],[11,"hash","polars_arrow_rvsry99dx::ipc::gen::SparseTensor","",152,[[]]],[11,"hash","","",153,[[]]],[11,"from_iter","polars_arrow_rvsry99dx::array","",7,[[["intoiterator",8]]]],[11,"from_iter","","",7,[[["intoiterator",8]]]],[11,"try_from","","",4,[[["option",4],["vec",3]],["result",6]]],[11,"write","polars_arrow_rvsry99dx::buffer","",32,[[],["ioresult",6]]],[11,"flush","","",32,[[],["ioresult",6]]],[11,"write","polars_arrow_rvsry99dx::util::string_writer","",172,[[],["result",6]]],[11,"flush","","",172,[[],["result",6]]],[11,"serialize","polars_arrow_rvsry99dx::datatypes","",40,[[],["result",4]]],[11,"serialize","","",41,[[],["result",4]]],[11,"serialize","","",42,[[],["result",4]]],[11,"serialize","","",43,[[],["result",4]]],[11,"serialize","","",48,[[],["result",4]]],[11,"serialize","","",49,[[],["result",4]]],[11,"serialize","polars_arrow_rvsry99dx::util::integration_util","",168,[[],["result",4]]],[11,"serialize","","",169,[[],["result",4]]],[11,"serialize","","",170,[[],["result",4]]],[11,"serialize","","",247,[[],["result",4]]],[11,"serialize","","",171,[[],["result",4]]],[11,"deserialize","polars_arrow_rvsry99dx::datatypes","",40,[[],["result",4]]],[11,"deserialize","","",41,[[],["result",4]]],[11,"deserialize","","",42,[[],["result",4]]],[11,"deserialize","","",43,[[],["result",4]]],[11,"deserialize","","",48,[[],["result",4]]],[11,"deserialize","","",49,[[],["result",4]]],[11,"deserialize","polars_arrow_rvsry99dx::util::integration_util","",168,[[],["result",4]]],[11,"deserialize","","",169,[[],["result",4]]],[11,"deserialize","","",170,[[],["result",4]]],[11,"deserialize","","",247,[[],["result",4]]],[11,"deserialize","","",171,[[],["result",4]]],[11,"push","polars_arrow_rvsry99dx::ipc::gen::File","",57,[[]]],[11,"push","polars_arrow_rvsry99dx::ipc::gen::Message","",65,[[]]],[11,"push","","",66,[[]]],[11,"push","polars_arrow_rvsry99dx::ipc::gen::Schema","",111,[[]]],[11,"push","","",112,[[]]],[11,"push","","",113,[[]]],[11,"push","","",114,[[]]],[11,"push","","",115,[[]]],[11,"push","","",116,[[]]],[11,"push","","",117,[[]]],[11,"push","","",118,[[]]],[11,"push","","",119,[[]]],[11,"push","","",120,[[]]],[11,"push","polars_arrow_rvsry99dx::ipc::gen::SparseTensor","",152,[[]]],[11,"push","","",153,[[]]],[11,"to_little_endian","polars_arrow_rvsry99dx::ipc::gen::Message","",65,[[]]],[11,"from_little_endian","","",65,[[]]],[11,"to_little_endian","polars_arrow_rvsry99dx::ipc::gen::Schema","",111,[[]]],[11,"from_little_endian","","",111,[[]]],[11,"to_little_endian","","",112,[[]]],[11,"from_little_endian","","",112,[[]]],[11,"to_little_endian","","",113,[[]]],[11,"from_little_endian","","",113,[[]]],[11,"to_little_endian","","",114,[[]]],[11,"from_little_endian","","",114,[[]]],[11,"to_little_endian","","",115,[[]]],[11,"from_little_endian","","",115,[[]]],[11,"to_little_endian","","",116,[[]]],[11,"from_little_endian","","",116,[[]]],[11,"to_little_endian","","",117,[[]]],[11,"from_little_endian","","",117,[[]]],[11,"to_little_endian","","",118,[[]]],[11,"from_little_endian","","",118,[[]]],[11,"to_little_endian","","",119,[[]]],[11,"from_little_endian","","",119,[[]]],[11,"to_little_endian","polars_arrow_rvsry99dx::ipc::gen::SparseTensor","",152,[[]]],[11,"from_little_endian","","",152,[[]]],[11,"to_little_endian","","",153,[[]]],[11,"from_little_endian","","",153,[[]]],[11,"follow","polars_arrow_rvsry99dx::ipc::gen::File","",57,[[]]],[11,"follow","","",55,[[]]],[11,"follow","polars_arrow_rvsry99dx::ipc::gen::Message","",65,[[]]],[11,"follow","","",66,[[]]],[11,"follow","","",59,[[]]],[11,"follow","","",61,[[]]],[11,"follow","","",63,[[]]],[11,"follow","polars_arrow_rvsry99dx::ipc::gen::Schema","",111,[[]]],[11,"follow","","",112,[[]]],[11,"follow","","",113,[[]]],[11,"follow","","",114,[[]]],[11,"follow","","",115,[[]]],[11,"follow","","",116,[[]]],[11,"follow","","",117,[[]]],[11,"follow","","",118,[[]]],[11,"follow","","",119,[[]]],[11,"follow","","",120,[[]]],[11,"follow","","",70,[[]]],[11,"follow","","",71,[[]]],[11,"follow","","",72,[[]]],[11,"follow","","",73,[[]]],[11,"follow","","",74,[[]]],[11,"follow","","",76,[[]]],[11,"follow","","",78,[[]]],[11,"follow","","",80,[[]]],[11,"follow","","",82,[[]]],[11,"follow","","",84,[[]]],[11,"follow","","",85,[[]]],[11,"follow","","",86,[[]]],[11,"follow","","",87,[[]]],[11,"follow","","",88,[[]]],[11,"follow","","",90,[[]]],[11,"follow","","",91,[[]]],[11,"follow","","",93,[[]]],[11,"follow","","",95,[[]]],[11,"follow","","",97,[[]]],[11,"follow","","",99,[[]]],[11,"follow","","",101,[[]]],[11,"follow","","",103,[[]]],[11,"follow","","",105,[[]]],[11,"follow","","",107,[[]]],[11,"follow","","",109,[[]]],[11,"follow","polars_arrow_rvsry99dx::ipc::gen::SparseTensor","",152,[[]]],[11,"follow","","",153,[[]]],[11,"follow","","",146,[[]]],[11,"follow","","",148,[[]]],[11,"follow","","",150,[[]]],[11,"follow","polars_arrow_rvsry99dx::ipc::gen::Tensor","",157,[[]]],[11,"follow","","",159,[[]]],[11,"data_type","polars_arrow_rvsry99dx::array","Returns a reference to the `DataType` of this array.",22,[[],["datatype",4]]],[11,"slice","","Returns a zero-copy slice of this array with the indicated…",22,[[],["arrayref",6]]],[11,"len","","Returns the length (i.e., number of elements) of this array.",22,[[]]],[11,"offset","","Returns the offset into the underlying data used by this…",22,[[]]],[11,"is_null","","Returns whether the element at `index` is null. When using…",22,[[]]],[11,"is_valid","","Returns whether the element at `index` is not null. When…",22,[[]]],[11,"null_count","","Returns the total number of null values in this array.",22,[[]]],[11,"equals_json_values","","Checks whether some array equals to json array.",28,[[]]]],"p":[[3,"PrimitiveArray"],[3,"ListArray"],[3,"FixedSizeListArray"],[3,"BinaryArray"],[3,"StringArray"],[3,"FixedSizeBinaryArray"],[3,"StructArray"],[3,"DictionaryArray"],[3,"PrimitiveBuilder"],[3,"ListBuilder"],[3,"FixedSizeListBuilder"],[3,"BinaryBuilder"],[3,"StringBuilder"],[3,"FixedSizeBinaryBuilder"],[3,"StructBuilder"],[3,"PrimitiveDictionaryBuilder"],[3,"StringDictionaryBuilder"],[3,"ArrayData"],[3,"ArrayDataBuilder"],[3,"NullArray"],[3,"UnionArray"],[3,"UnionBuilder"],[8,"Array"],[8,"ListArrayOps"],[8,"PrimitiveArrayOps"],[8,"BufferBuilderTrait"],[8,"ArrayBuilder"],[8,"ArrayEqual"],[8,"JsonEqual"],[8,"OrdArray"],[3,"Bitmap"],[3,"Buffer"],[3,"MutableBuffer"],[3,"SortOptions"],[3,"SortColumn"],[3,"TakeOptions"],[3,"Reader"],[3,"ReaderBuilder"],[3,"Writer"],[3,"WriterBuilder"],[4,"DataType"],[4,"DateUnit"],[4,"TimeUnit"],[4,"IntervalUnit"],[8,"ArrowNativeType"],[8,"ArrowPrimitiveType"],[8,"ArrowTimestampType"],[8,"ToByteSlice"],[3,"Field"],[3,"Schema"],[4,"ArrowError"],[3,"FileReader"],[3,"StreamReader"],[3,"FileWriter"],[3,"StreamWriter"],[3,"Footer"],[3,"FooterArgs"],[3,"Block"],[3,"FooterBuilder"],[3,"RecordBatch"],[3,"RecordBatchArgs"],[3,"DictionaryBatch"],[3,"DictionaryBatchArgs"],[3,"Message"],[3,"MessageArgs"],[4,"MessageHeader"],[3,"FieldNode"],[3,"RecordBatchBuilder"],[3,"DictionaryBatchBuilder"],[3,"MessageBuilder"],[3,"Null"],[3,"Struct_"],[3,"List"],[3,"LargeList"],[3,"FixedSizeList"],[3,"FixedSizeListArgs"],[3,"Map"],[3,"MapArgs"],[3,"Union"],[3,"UnionArgs"],[3,"Int"],[3,"IntArgs"],[3,"FloatingPoint"],[3,"FloatingPointArgs"],[3,"Utf8"],[3,"Binary"],[3,"LargeUtf8"],[3,"LargeBinary"],[3,"FixedSizeBinary"],[3,"FixedSizeBinaryArgs"],[3,"Bool"],[3,"Decimal"],[3,"DecimalArgs"],[3,"Date"],[3,"DateArgs"],[3,"Time"],[3,"TimeArgs"],[3,"Timestamp"],[3,"TimestampArgs"],[3,"Interval"],[3,"IntervalArgs"],[3,"Duration"],[3,"DurationArgs"],[3,"KeyValue"],[3,"KeyValueArgs"],[3,"DictionaryEncoding"],[3,"DictionaryEncodingArgs"],[3,"Field"],[3,"FieldArgs"],[3,"Schema"],[3,"SchemaArgs"],[4,"MetadataVersion"],[4,"UnionMode"],[4,"Precision"],[4,"DateUnit"],[4,"TimeUnit"],[4,"IntervalUnit"],[4,"Type"],[4,"DictionaryKind"],[4,"Endianness"],[3,"Buffer"],[3,"NullBuilder"],[3,"Struct_Builder"],[3,"ListBuilder"],[3,"LargeListBuilder"],[3,"FixedSizeListBuilder"],[3,"MapBuilder"],[3,"UnionBuilder"],[3,"IntBuilder"],[3,"FloatingPointBuilder"],[3,"Utf8Builder"],[3,"BinaryBuilder"],[3,"LargeUtf8Builder"],[3,"LargeBinaryBuilder"],[3,"FixedSizeBinaryBuilder"],[3,"BoolBuilder"],[3,"DecimalBuilder"],[3,"DateBuilder"],[3,"TimeBuilder"],[3,"TimestampBuilder"],[3,"IntervalBuilder"],[3,"DurationBuilder"],[3,"KeyValueBuilder"],[3,"DictionaryEncodingBuilder"],[3,"FieldBuilder"],[3,"SchemaBuilder"],[3,"SparseTensorIndexCOO"],[3,"SparseTensorIndexCOOArgs"],[3,"SparseMatrixIndexCSX"],[3,"SparseMatrixIndexCSXArgs"],[3,"SparseTensor"],[3,"SparseTensorArgs"],[4,"SparseMatrixCompressedAxis"],[4,"SparseTensorIndex"],[3,"SparseTensorIndexCOOBuilder"],[3,"SparseMatrixIndexCSXBuilder"],[3,"SparseTensorBuilder"],[3,"TensorDim"],[3,"TensorDimArgs"],[3,"Tensor"],[3,"TensorArgs"],[3,"TensorDimBuilder"],[3,"TensorBuilder"],[3,"Reader"],[3,"ReaderBuilder"],[8,"RecordBatchReader"],[3,"RecordBatch"],[3,"Tensor"],[3,"ArrowJson"],[3,"ArrowJsonSchema"],[3,"ArrowJsonBatch"],[3,"ArrowJsonColumn"],[3,"StringWriter"],[3,"BufferBuilder"],[3,"BooleanType"],[3,"Int8Type"],[3,"Int16Type"],[3,"Int32Type"],[3,"Int64Type"],[3,"UInt8Type"],[3,"UInt16Type"],[3,"UInt32Type"],[3,"UInt64Type"],[3,"Float32Type"],[3,"Float64Type"],[3,"TimestampSecondType"],[3,"TimestampMillisecondType"],[3,"TimestampMicrosecondType"],[3,"TimestampNanosecondType"],[3,"Date32Type"],[3,"Date64Type"],[3,"Time32SecondType"],[3,"Time32MillisecondType"],[3,"Time64MicrosecondType"],[3,"Time64NanosecondType"],[3,"IntervalYearMonthType"],[3,"IntervalDayTimeType"],[3,"DurationSecondType"],[3,"DurationMillisecondType"],[3,"DurationMicrosecondType"],[3,"DurationNanosecondType"],[4,"FooterOffset"],[3,"MessageHeaderUnionTableOffset"],[4,"RecordBatchOffset"],[4,"DictionaryBatchOffset"],[4,"MessageOffset"],[3,"TypeUnionTableOffset"],[3,"NullArgs"],[3,"Struct_Args"],[3,"ListArgs"],[3,"LargeListArgs"],[3,"Utf8Args"],[3,"BinaryArgs"],[3,"LargeUtf8Args"],[3,"LargeBinaryArgs"],[3,"BoolArgs"],[4,"NullOffset"],[4,"Struct_Offset"],[4,"ListOffset"],[4,"LargeListOffset"],[4,"FixedSizeListOffset"],[4,"MapOffset"],[4,"UnionOffset"],[4,"IntOffset"],[4,"FloatingPointOffset"],[4,"Utf8Offset"],[4,"BinaryOffset"],[4,"LargeUtf8Offset"],[4,"LargeBinaryOffset"],[4,"FixedSizeBinaryOffset"],[4,"BoolOffset"],[4,"DecimalOffset"],[4,"DateOffset"],[4,"TimeOffset"],[4,"TimestampOffset"],[4,"IntervalOffset"],[4,"DurationOffset"],[4,"KeyValueOffset"],[4,"DictionaryEncodingOffset"],[4,"FieldOffset"],[4,"SchemaOffset"],[3,"SparseTensorIndexUnionTableOffset"],[4,"SparseTensorIndexCOOOffset"],[4,"SparseMatrixIndexCSXOffset"],[4,"SparseTensorOffset"],[4,"TensorDimOffset"],[4,"TensorOffset"],[3,"ArrowJsonDictionaryBatch"],[6,"BooleanArray"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);